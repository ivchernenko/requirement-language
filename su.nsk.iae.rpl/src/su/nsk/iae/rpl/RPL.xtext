grammar su.nsk.iae.rpl.RPL with org.eclipse.xtext.common.Terminals
generate rPL "http://www.nsk.su/iae/rpl/RPL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	(imports+=Import)*
	(elements+=Element)*;
	
Import:
	"import" importURI=STRING ";";
	
Element:
	VarDeclaration | DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern | 
	DerivedExtraInvariantPattern | FutureExtraInvariantPattern | PastExtraInvariantPattern | Requirement | ExtraInvariant;
           	
BasicRequirementPattern:
	DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern;
	
	/* ======================= Derived requirement pattern ======================= */
           	
DerivedRequirementPattern:
	'derivedreq' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	("simple" "formulas" ":" simpleFmParams+=SimpleFormulaParameter ("," simpleFmParams+=SimpleFormulaParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)? ")"
   ("=" definition=Formula | "with" extraInvPattern=[DerivedExtraInvariantPattern])
   (lemmas=DerivedLemmas)? ";";
   
Variable:
	ConstantParameter | ProgramVariable;
/* ======================= Variables ======================= */
VarDeclaration:
	"var" vars+=ProgramVariable ("," vars+=ProgramVariable)* ";";
	
ProgramVariable:
	name=ID;
           	
UpdateStateVariable:
	name=ID;
	
/* ======================= Pattern parameters ======================= */
ConstantParameter:
	name=ID;
           	
FormulaParameter:
	SimpleFormulaParameter | RegularFormulaParameter;
	
SimpleFormulaParameter:
	name=ID ("(" arity=INTEGER ")")?;
	
RegularFormulaParameter:
	name=ID;
           	
FunctionalParameter:
	name=ID;
	
/* ======================= Top-level formulas ======================= */
           	
Formula:
	ConjunctionFormula ({Formula.left=current} DISJUNCTION right=Formula)*;
           	
terminal DISJUNCTION:
	"OR" | "||" | "\\/";
           	
ConjunctionFormula:
	PrimaryFormula ({Conjunction.left=current} CONJUNCTION right=ConjunctionFormula)*;
           	            	
PrimaryFormula:
	patternInst=OuterRequirementPatternInstance | "(" nestedFormula=Formula ")";
           	
terminal CONJUNCTION:
	"AND" | "&" | "&&" | "/\\";
	
OuterRequirementPatternInstance:
	pattern=[OuterRequirementPattern] "("
	("const" ":" cParams+=Term ("," cParams+=Term)*)?
	("simple" "formulas"  ":" simpleFmParams+=PatternFreeFormulaParameterValue
		("," simpleFmParams+=PatternFreeFormulaParameterValue)*
	)?
	 ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
	 ")";
	 
OuterRequirementPattern:
	DerivedRequirementPattern | PastRequirementPattern;
	
/* ======================= Inner formulas ======================= */
           	
FormulaParameterValue:
	("lambda" (states+=UpdateStateVariable)+ ".")? formula=InnerFormula;
           	
InnerFormula:
	ConjunctionInnerFormula ({InnerFormula.left=current} DISJUNCTION right=InnerFormula)*;
           	
ConjunctionInnerFormula:
	PrimaryInnerFormula ({ConjunctionInnerFormula.left=current} CONJUNCTION right=ConjunctionInnerFormula)*;
           	
PrimaryInnerFormula:
	atomic=NegationFormula | patternInst=BasicRequirementPatternInstance | "(" nestedFormula=InnerFormula ")";
	
NegationFormula:
	(neg?=NEGATION)? right=AtomicFormula;
	
terminal NEGATION:
	"NOT" | "!" | "~";
           	
AtomicFormula:
	boolLiteral=BOOLEAN_LITERAL | "frm" "(" boolTerm=Term ")" |
	fmParam=[FormulaParameter] ("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?;
	
BasicRequirementPatternInstance:
	pattern=[BasicRequirementPattern] "("
	("const" ":" cParams+=Term ("," cParams+=Term)*)?
	 ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
	  ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
	 ")";
	
/* ======================= Pattern declarations ======================= */
FutureRequirementPattern:
	'futurereq' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	 ")"
	 "with" extraInvPattern=[FutureExtraInvariantPattern] (lessas=FutureLemmas)? ";";
	 
PastRequirementPattern:
	'pastreq' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	")"
	"with" extraInvPattern=[PastExtraInvariantPattern] (lemmas=PastLemmas)? ";";
                       	
FutureExtraInvariantPattern:
	'futureeinv' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	")"
	(lemmas=FutureLemmas)? ";";
           	
PastExtraInvariantPattern:
	'pasteinv' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	")"
	(lemmas=PastLemmas)? ";";
                          	
DerivedExtraInvariantPattern:
	'derivedeinv' 'pattern' name=ID '('
	("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	("simple" "formulas" ":" simpleFmParams+=SimpleFormulaParameter ("," simpleFmParams+=SimpleFormulaParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	")"
	(lemmas=DerivedLemmas)? ";";
	
FilePath:
	'/'? (Dir '/')* ID;

Dir:
	ID | "." | "..";

	
/* ======================= Terms ======================= */
Term:
	ConjunctionTerm ({Term.left=current} DISJUNCTION right=Term)*;
ConjunctionTerm:
	NegationTerm ({ConjunctionTerm.left=current} CONJUNCTION right=ConjunctionTerm)*;
NegationTerm:
	EqTerm | (NEGATION right=EqTerm);
           	
EqTerm:
	CompareTerm ({EqTerm.left=current} eqPred=EqPredicate right=EqTerm)*;
enum EqPredicate:
	EQ="=" | NOT_EQ="<>";
           	
CompareTerm:
	AddTerm ({CompareTerm.left=current} compPred=CompPredicate right=CompareTerm)*;
           	
enum CompPredicate:
	LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">=";
           	
AddTerm:
	MulTerm ({AddTerm.left=current} addOp=AddOperator right=AddTerm)*;
           	
enum AddOperator:
	PLUS="+" | BMINUS="-";
           	
MulTerm:
	PowerTerm ({MulTerm.left=current} mulOp=MulOperator right=MulTerm)*;
           	
enum MulOperator:
	MUL="*" | DIV="/" | MOD="mod";
           	
PowerTerm:
	UnaryTerm ({PowerTerm.left=current} POWER_OPERATOR right=PowerTerm)*;
           	
terminal POWER_OPERATOR:
	"**";
           	
UnaryTerm:
	PrimaryTerm | (unOp=UnMinus right=PrimaryTerm);
           	
enum UnMinus:
	UNMINUS="-";
           	
PrimaryTerm:
	const=Constant |  variable=[Variable] | state=[UpdateStateVariable] "[" variable=[ProgramVariable] "]" |
	 funApp=FunApplication |
	"(" nestedTerm=Term ")";
           	 
FunApplication:
	fnParam=[FunctionalParameter] "(" state=[UpdateStateVariable] ")";
	
/* ======================= Literals ======================= */

           	
terminal BOOLEAN_LITERAL:
	"True" | "False";
	            	
Constant:
	num=NumericLiteral | bool=BOOLEAN_LITERAL;
           	
NumericLiteral:
	IntegerLiteral | RealLiteral;
           	
IntegerLiteral:
	(sig?="-")? value=INTEGER;
           	
terminal INTEGER returns ecore::EString:
	DIGIT+;
terminal fragment DIGIT:
	'0'..'9';
           	
RealLiteral:
	(sig?="-")? value=REAL;
           	
terminal REAL returns ecore::EString:
	INTEGER '.' INTEGER;
	

 /* ======================= Formulas without patterns ======================= */
            	
PatternFreeFormula:
	ConjunctionPatternFreeFormula ({PatternFreeFormula.left=current} DISJUNCTION right=PatternFreeFormula)*;
           	
ConjunctionPatternFreeFormula:
	PrimaryPatternFreeFormula ({ConjunctionPatternFreeFormula.left=current} CONJUNCTION right=ConjunctionPatternFreeFormula)*;
PrimaryPatternFreeFormula:
	atomic=NegationFormula | "(" nestedFormula=PatternFreeFormula ")";
           	
Requirement:
	"requirement" name=ID ":" pattern=[DerivedRequirementPattern] "with" extraInv=[ExtraInvariant] ";";
	
ExtraInvariant:
	"extra" "invariant" name=ID ":" pattern=[DerivedExtraInvariantPattern] ";";
                          	
PatternFreeFormulaParameterValue:
	("lambda" states+=UpdateStateVariable+ ".")? formula=PatternFreeFormula;
           	
/* ======================= Lemmas ======================= */
FutureLemmas:
	{FutureLemmas} ("lemmas" "{" (("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?) "}");
           	
PastLemmas:
	{PastLemmas} ("lemmas" "{" (("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?) "}");
           	
DerivedLemmas:
	{DerivedLemmas} ("lemmas" "{" (("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?) "}");
Lemma:
	"lemma" name=ID "{"
	("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)? &
	("fun" ":" fnVars+=FunctionalParameter ("," fnVars+=FunctionalParameter)*)? &
	("simple" "formulas" ":" simpleFmVars+=SimpleFormulaParameter ("," simpleFmVars+=SimpleFormulaParameter)*)? &
   ("extra" "invariant" "formulas" ":" ifmVars+=RegularFormulaParameter ("," ifmVars+=RegularFormulaParameter)*)? &
   ("requirement" "formulas" ":" rfmVars+=RegularFormulaParameter ("," rfmVars+=RegularFormulaParameter)*)? &
   ("init" "state" ":" initState=UpdateStateVariable)? &
   "final" "state" ":" finalState=UpdateStateVariable &
   "premise" prem=LemmaPremiseFormula "}" ";";
           	
 /* ======================= Formulas in lemma premises ======================= */
 LemmaPremiseFormula:
	DisjunctionLemmaPremiseFormula | left=FunApplication IMPLICATION right=LemmaPremiseFormula;
           	
terminal IMPLICATION:
	"-->";
DisjunctionLemmaPremiseFormula:
	ConjunctionLemmaPremiseFormula ({DisjunctionLemmaPremiseFormula.left=current} DISJUNCTION right=DisjunctionLemmaPremiseFormula)*;
ConjunctionLemmaPremiseFormula:
	PrimaryLemmaPremiseFormula ({ConjunctionLemmaPremiseFormula.left=current} CONJUNCTION right=ConjunctionLemmaPremiseFormula)*;
PrimaryLemmaPremiseFormula:
	atomic=NegationFormula | alwaysImp=AlwaysImplication | inst=PastExtraInvariantPatternInstance | "(" nestedFormula=LemmaPremiseFormula ")";
AlwaysImplication:
	"alwaysimp" "(" state=[UpdateStateVariable] "," left=AlwaysImplicationParameterValue "," 
	right=AlwaysImplicationParameterValue ")";
	
AlwaysImplicationParameterValue:
	("lambda" state=UpdateStateVariable ".")? formula=NegationFormula;
	
PastExtraInvariantPatternInstance:
	pattern=[PastExtraInvariantPattern] "("
	("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	("formulas" ":" fmParams+=RegularFormulaParameter ("," fmParams+=RegularFormulaParameter)*)?
	("current" | "final") state=[UpdateStateVariable]
	 ")";

@Override	 
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9' | "'")* ('a'..'z'|'A'..'Z'|'0'..'9' | "'");
