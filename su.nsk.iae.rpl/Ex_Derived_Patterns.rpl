import "Lib.rpl" ; import "Derived_Patterns.rpl" ; derivedeinv pattern P_constrained_always_after_max_delay_inv ( const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 formulas : A3_1 ) lemmas { LS8 lemma P_constrained_always_after_max_delay_inv_saving_gen { const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 init state : s0 final state : s premise ( ( True AND True AND True AND ( True AND ( frm ( t2 = 0 ) OR alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) + 1 >= t2 ) OR A3_1 ( s , s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( frm ( t1_0_0 ( s0 ) = 0 ) OR ( A2 ( s ) AND ( frm ( t2 = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A3_1 ( s , s ) ) ) AND frm ( t1_0_0 ( s0 ) <= t1 ) OR NOT A2 ( s ) AND frm ( t1_0_0 ( s0 ) < t1_0_0 ( s ) ) ) ) AND ( frm ( b_0_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A2 ( s ) AND ( frm ( t2 = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A3_1 ( s , s ) ) OR NOT A2 ( s ) AND frm ( t1_0_0 ( s ) > 0 ) ) ) AND ( b_0_0 ( s ) --> NOT A11 ( s ) ) } ; LS9 lemma P_constrained_always_after_max_delayeinv_imp_req_gen { const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 requirement formulas : A3 final state : s0 premise True AND True AND True AND ( True AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) ) AND frm ( t1_0_0 ( s0 ) <= t1 ) } ; } ; derivedeinv pattern P_constrained_always_after_max_delay_inv_part ( const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 , A3 ) lemmas { LS8 lemma P_constrained_always_after_max_delay_inv_saving { const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 , A3 init state : s0 final state : s premise ( ( ( frm ( t2 = 0 ) OR ( frm ( t1_0 ( s0 ) + 1 >= t2 ) OR A3 ( s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( frm ( t1_0_0 ( s0 ) = 0 ) OR ( A2 ( s ) AND ( frm ( t2 = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A3 ( s ) ) ) AND frm ( t1_0_0 ( s0 ) <= t1 ) OR NOT A2 ( s ) AND frm ( t1_0_0 ( s0 ) < t1_0_0 ( s ) ) ) ) AND ( frm ( b_0_0 ( s0 ) ) OR NOT A12 ( s ) OR A2 ( s ) AND ( frm ( t2 = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A3 ( s ) ) OR NOT A2 ( s ) AND frm ( t1_0_0 ( s ) > 0 ) ) ) AND ( b_0_0 ( s ) --> NOT A11 ( s ) ) } ; LS9 lemma P_constrained_always_after_max_delayeinv_imp_req { const : t1 , t2 fun : t1_0 , b_0_0 , t1_0_0 simple formulas : A11 , A12 , A2 , A3 final state : s premise frm ( t1_0_0 ( s ) <= t1 ) } ; } ; derivedreq pattern P_constrained_always_after_max_delay ( const : t1 , t2 simple formulas : A11 , A12 , A2 formulas : A3 ) with P_constrained_always_after_max_delay_inv ; derivedreq pattern P_constrained_always_after_max_delay_part ( const : t1 , t2 simple formulas : A11 , A12 , A2 , A3 ) with P_constrained_always_after_max_delay_inv_part ; derivedeinv pattern P5_inv ( fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 formulas : A3_1 , A4_1 ) lemmas { LS8 lemma P5_inv_saving_gen { fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 , A4_1 init state : s0 final state : s premise ( ( ( ( True AND True ) AND True AND ( ( True AND alwaysimp ( s0 , lambda r1 . A4_1 ( s0 , r1 ) , lambda r1 . A4_1 ( s , r1 ) ) ) AND alwaysimp ( s0 , lambda r1 . A3_1 ( s0 , r1 ) , lambda r1 . A3_1 ( s , r1 ) ) ) AND ( NOT frm ( w_0_0 ( s0 ) ) OR ( A2 ( s ) AND A4_1 ( s , s ) OR A3_1 ( s , s ) ) OR frm ( w_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( frm ( b_1_0 ( s0 ) ) AND True AND True OR ( A2 ( s ) AND A4_1 ( s , s ) OR A3_1 ( s , s ) ) OR frm ( w_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( b_1_0 ( s ) --> frm ( b_0_0 ( s0 ) ) AND True OR NOT A12 ( s ) ) ) AND ( b_0_0 ( s ) --> NOT A11 ( s ) ) } ; LS9 lemma P5einv_imp_req_gen { fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 , A4_1 requirement formulas : A3 , A4 final state : s0 premise ( True AND True ) AND True AND ( True AND alwaysimp ( s0 , lambda r1 . A4_1 ( s0 , r1 ) , lambda r1 . A4 ( s0 , r1 ) ) ) AND alwaysimp ( s0 , lambda r1 . A3_1 ( s0 , r1 ) , lambda r1 . A3 ( s0 , r1 ) ) } ; } ; derivedeinv pattern P5_inv_part ( fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 ) lemmas { LS8 lemma P5_inv_saving { fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 init state : s0 final state : s premise ( ( ( NOT frm ( w_0_0 ( s0 ) ) OR ( A2 ( s ) AND A4 ( s ) OR A3 ( s ) ) OR frm ( w_0_0 ( s ) ) AND NOT A2 ( s ) ) AND ( frm ( b_1_0 ( s0 ) ) OR ( A2 ( s ) AND A4 ( s ) OR A3 ( s ) ) OR frm ( w_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( b_1_0 ( s ) --> frm ( b_0_0 ( s0 ) ) OR NOT A12 ( s ) ) ) AND ( b_0_0 ( s ) --> NOT A11 ( s ) ) } ; LS9 lemma P5einv_imp_req { fun : b_0_0 , b_1_0 , w_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 final state : s premise True } ; } ; derivedreq pattern P5 ( simple formulas : A11 , A12 , A2 formulas : A3 , A4 ) with P5_inv ; derivedreq pattern P5_part ( simple formulas : A11 , A12 , A2 , A3 , A4 ) with P5_inv_part ;