/*
 * generated by Xtext 2.36.0
 */
grammar InternalRPL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package su.nsk.iae.rpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package su.nsk.iae.rpl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import su.nsk.iae.rpl.services.RPLGrammarAccess;

}

@parser::members {

 	private RPLGrammarAccess grammarAccess;

    public InternalRPLParser(TokenStream input, RPLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected RPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"su.nsk.iae.rpl.RPL.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"su.nsk.iae.rpl.RPL.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getVarDeclarationParserRuleCall_0());
		}
		this_VarDeclaration_0=ruleVarDeclaration
		{
			$current = $this_VarDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getDerivedRequirementPatternParserRuleCall_1());
		}
		this_DerivedRequirementPattern_1=ruleDerivedRequirementPattern
		{
			$current = $this_DerivedRequirementPattern_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getFutureRequirementPatternParserRuleCall_2());
		}
		this_FutureRequirementPattern_2=ruleFutureRequirementPattern
		{
			$current = $this_FutureRequirementPattern_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getPastRequirementPatternParserRuleCall_3());
		}
		this_PastRequirementPattern_3=rulePastRequirementPattern
		{
			$current = $this_PastRequirementPattern_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getDerivedExtraInvariantPatternParserRuleCall_4());
		}
		this_DerivedExtraInvariantPattern_4=ruleDerivedExtraInvariantPattern
		{
			$current = $this_DerivedExtraInvariantPattern_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getFutureExtraInvariantPatternParserRuleCall_5());
		}
		this_FutureExtraInvariantPattern_5=ruleFutureExtraInvariantPattern
		{
			$current = $this_FutureExtraInvariantPattern_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getPastExtraInvariantPatternParserRuleCall_6());
		}
		this_PastExtraInvariantPattern_6=rulePastExtraInvariantPattern
		{
			$current = $this_PastExtraInvariantPattern_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getRequirementParserRuleCall_7());
		}
		this_Requirement_7=ruleRequirement
		{
			$current = $this_Requirement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getExtraInvariantParserRuleCall_8());
		}
		this_ExtraInvariant_8=ruleExtraInvariant
		{
			$current = $this_ExtraInvariant_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDerivedRequirementPattern
entryRuleDerivedRequirementPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDerivedRequirementPatternRule()); }
	iv_ruleDerivedRequirementPattern=ruleDerivedRequirementPattern
	{ $current=$iv_ruleDerivedRequirementPattern.current; }
	EOF;

// Rule DerivedRequirementPattern
ruleDerivedRequirementPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='derivedreq'
		{
			newLeafNode(otherlv_0, grammarAccess.getDerivedRequirementPatternAccess().getDerivedreqKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getDerivedRequirementPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDerivedRequirementPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDerivedRequirementPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDerivedRequirementPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getDerivedRequirementPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getDerivedRequirementPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getDerivedRequirementPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='formulas'
			{
				newLeafNode(otherlv_9, grammarAccess.getDerivedRequirementPatternAccess().getFormulasKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getDerivedRequirementPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_2_0());
					}
					lv_fmParams_11_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_11_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getDerivedRequirementPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_3_1_0());
						}
						lv_fmParams_13_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_13_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getDerivedRequirementPatternAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				otherlv_15='='
				{
					newLeafNode(otherlv_15, grammarAccess.getDerivedRequirementPatternAccess().getEqualsSignKeyword_7_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getDefinitionFormulaParserRuleCall_7_0_1_0());
						}
						lv_definition_16_0=ruleFormula
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
							}
							set(
								$current,
								"definition",
								lv_definition_16_0,
								"su.nsk.iae.rpl.RPL.Formula");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_17='from'
				{
					newLeafNode(otherlv_17, grammarAccess.getDerivedRequirementPatternAccess().getFromKeyword_7_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getFileFilePathParserRuleCall_7_1_1_0());
						}
						lv_file_18_0=ruleFilePath
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
							}
							set(
								$current,
								"file",
								lv_file_18_0,
								"su.nsk.iae.rpl.RPL.FilePath");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_19='with'
				{
					newLeafNode(otherlv_19, grammarAccess.getDerivedRequirementPatternAccess().getWithKeyword_7_1_2());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDerivedRequirementPatternRule());
							}
						}
						otherlv_20=RULE_ID
						{
							newLeafNode(otherlv_20, grammarAccess.getDerivedRequirementPatternAccess().getExtraInvPatternDerivedExtraInvariantPatternCrossReference_7_1_3_0());
						}
					)
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDerivedRequirementPatternAccess().getLemmasDerivedLemmasParserRuleCall_8_0());
				}
				lv_lemmas_21_0=ruleDerivedLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDerivedRequirementPatternRule());
					}
					set(
						$current,
						"lemmas",
						lv_lemmas_21_0,
						"su.nsk.iae.rpl.RPL.DerivedLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_22=';'
		{
			newLeafNode(otherlv_22, grammarAccess.getDerivedRequirementPatternAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsProgramVariableParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleProgramVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_1_0,
						"su.nsk.iae.rpl.RPL.ProgramVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getVarDeclarationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsProgramVariableParserRuleCall_2_1_0());
					}
					lv_vars_3_0=ruleProgramVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_3_0,
							"su.nsk.iae.rpl.RPL.ProgramVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleProgramVariable
entryRuleProgramVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramVariableRule()); }
	iv_ruleProgramVariable=ruleProgramVariable
	{ $current=$iv_ruleProgramVariable.current; }
	EOF;

// Rule ProgramVariable
ruleProgramVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getProgramVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProgramVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleUpdateStateVariable
entryRuleUpdateStateVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateStateVariableRule()); }
	iv_ruleUpdateStateVariable=ruleUpdateStateVariable
	{ $current=$iv_ruleUpdateStateVariable.current; }
	EOF;

// Rule UpdateStateVariable
ruleUpdateStateVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getUpdateStateVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUpdateStateVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConstantParameter
entryRuleConstantParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantParameterRule()); }
	iv_ruleConstantParameter=ruleConstantParameter
	{ $current=$iv_ruleConstantParameter.current; }
	EOF;

// Rule ConstantParameter
ruleConstantParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getConstantParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstantParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFormulaParameter
entryRuleFormulaParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaParameterRule()); }
	iv_ruleFormulaParameter=ruleFormulaParameter
	{ $current=$iv_ruleFormulaParameter.current; }
	EOF;

// Rule FormulaParameter
ruleFormulaParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFormulaParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFormulaParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctionalParameter
entryRuleFunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionalParameterRule()); }
	iv_ruleFunctionalParameter=ruleFunctionalParameter
	{ $current=$iv_ruleFunctionalParameter.current; }
	EOF;

// Rule FunctionalParameter
ruleFunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionalParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionalParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormulaAccess().getConjunctionFormulaParserRuleCall_0());
		}
		this_ConjunctionFormula_0=ruleConjunctionFormula
		{
			$current = $this_ConjunctionFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFormulaAccess().getFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_DISJUNCTION_2=RULE_DISJUNCTION
			{
				newLeafNode(this_DISJUNCTION_2, grammarAccess.getFormulaAccess().getDISJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getRightFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionFormula
entryRuleConjunctionFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionFormulaRule()); }
	iv_ruleConjunctionFormula=ruleConjunctionFormula
	{ $current=$iv_ruleConjunctionFormula.current; }
	EOF;

// Rule ConjunctionFormula
ruleConjunctionFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctionFormulaAccess().getPrimaryFormulaParserRuleCall_0());
		}
		this_PrimaryFormula_0=rulePrimaryFormula
		{
			$current = $this_PrimaryFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConjunctionFormulaAccess().getConjunctionLeftAction_1_0(),
						$current);
				}
			)
			this_CONJUNCTION_2=RULE_CONJUNCTION
			{
				newLeafNode(this_CONJUNCTION_2, grammarAccess.getConjunctionFormulaAccess().getCONJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionFormulaAccess().getRightConjunctionFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConjunctionFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.ConjunctionFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryFormula
entryRulePrimaryFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryFormulaRule()); }
	iv_rulePrimaryFormula=rulePrimaryFormula
	{ $current=$iv_rulePrimaryFormula.current; }
	EOF;

// Rule PrimaryFormula
rulePrimaryFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryFormulaAccess().getPatternInstRequirementPatternInstanceParserRuleCall_0_0());
				}
				lv_patternInst_0_0=ruleRequirementPatternInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryFormulaRule());
					}
					set(
						$current,
						"patternInst",
						lv_patternInst_0_0,
						"su.nsk.iae.rpl.RPL.RequirementPatternInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryFormulaAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryFormulaAccess().getNestedFormulaFormulaParserRuleCall_1_1_0());
					}
					lv_nestedFormula_2_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryFormulaRule());
						}
						set(
							$current,
							"nestedFormula",
							lv_nestedFormula_2_0,
							"su.nsk.iae.rpl.RPL.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryFormulaAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleFormulaParameterValue
entryRuleFormulaParameterValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaParameterValueRule()); }
	iv_ruleFormulaParameterValue=ruleFormulaParameterValue
	{ $current=$iv_ruleFormulaParameterValue.current; }
	EOF;

// Rule FormulaParameterValue
ruleFormulaParameterValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='lambda'
			{
				newLeafNode(otherlv_0, grammarAccess.getFormulaParameterValueAccess().getLambdaKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaParameterValueAccess().getStatesUpdateStateVariableParserRuleCall_0_1_0());
					}
					lv_states_1_0=ruleUpdateStateVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaParameterValueRule());
						}
						add(
							$current,
							"states",
							lv_states_1_0,
							"su.nsk.iae.rpl.RPL.UpdateStateVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormulaParameterValueAccess().getFullStopKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaParameterValueAccess().getFormulaInnerFormulaParserRuleCall_1_0());
				}
				lv_formula_3_0=ruleInnerFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaParameterValueRule());
					}
					set(
						$current,
						"formula",
						lv_formula_3_0,
						"su.nsk.iae.rpl.RPL.InnerFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInnerFormula
entryRuleInnerFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInnerFormulaRule()); }
	iv_ruleInnerFormula=ruleInnerFormula
	{ $current=$iv_ruleInnerFormula.current; }
	EOF;

// Rule InnerFormula
ruleInnerFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInnerFormulaAccess().getConjunctionInnerFormulaParserRuleCall_0());
		}
		this_ConjunctionInnerFormula_0=ruleConjunctionInnerFormula
		{
			$current = $this_ConjunctionInnerFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getInnerFormulaAccess().getInnerFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_DISJUNCTION_2=RULE_DISJUNCTION
			{
				newLeafNode(this_DISJUNCTION_2, grammarAccess.getInnerFormulaAccess().getDISJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInnerFormulaAccess().getRightInnerFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleInnerFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInnerFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.InnerFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionInnerFormula
entryRuleConjunctionInnerFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionInnerFormulaRule()); }
	iv_ruleConjunctionInnerFormula=ruleConjunctionInnerFormula
	{ $current=$iv_ruleConjunctionInnerFormula.current; }
	EOF;

// Rule ConjunctionInnerFormula
ruleConjunctionInnerFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctionInnerFormulaAccess().getPrimaryInnerFormulaParserRuleCall_0());
		}
		this_PrimaryInnerFormula_0=rulePrimaryInnerFormula
		{
			$current = $this_PrimaryInnerFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConjunctionInnerFormulaAccess().getConnunctionInnerFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_CONJUNCTION_2=RULE_CONJUNCTION
			{
				newLeafNode(this_CONJUNCTION_2, grammarAccess.getConjunctionInnerFormulaAccess().getCONJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionInnerFormulaAccess().getRightConjunctionInnerFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConjunctionInnerFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionInnerFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.ConjunctionInnerFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryInnerFormula
entryRulePrimaryInnerFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryInnerFormulaRule()); }
	iv_rulePrimaryInnerFormula=rulePrimaryInnerFormula
	{ $current=$iv_rulePrimaryInnerFormula.current; }
	EOF;

// Rule PrimaryInnerFormula
rulePrimaryInnerFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryInnerFormulaAccess().getAtomicNegationFormulaParserRuleCall_0_0());
				}
				lv_atomic_0_0=ruleNegationFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryInnerFormulaRule());
					}
					set(
						$current,
						"atomic",
						lv_atomic_0_0,
						"su.nsk.iae.rpl.RPL.NegationFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryInnerFormulaAccess().getPatternInstRequirementPatternInstanceParserRuleCall_1_0());
				}
				lv_patternInst_1_0=ruleRequirementPatternInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryInnerFormulaRule());
					}
					set(
						$current,
						"patternInst",
						lv_patternInst_1_0,
						"su.nsk.iae.rpl.RPL.RequirementPatternInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryInnerFormulaAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryInnerFormulaAccess().getNestedFormulaInnerFormulaParserRuleCall_2_1_0());
					}
					lv_nestedFormula_3_0=ruleInnerFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryInnerFormulaRule());
						}
						set(
							$current,
							"nestedFormula",
							lv_nestedFormula_3_0,
							"su.nsk.iae.rpl.RPL.InnerFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryInnerFormulaAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleNegationFormula
entryRuleNegationFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationFormulaRule()); }
	iv_ruleNegationFormula=ruleNegationFormula
	{ $current=$iv_ruleNegationFormula.current; }
	EOF;

// Rule NegationFormula
ruleNegationFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_neg_0_0=RULE_NEGATION
				{
					newLeafNode(lv_neg_0_0, grammarAccess.getNegationFormulaAccess().getNegNEGATIONTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNegationFormulaRule());
					}
					setWithLastConsumed(
						$current,
						"neg",
						lv_neg_0_0 != null,
						"su.nsk.iae.rpl.RPL.NEGATION");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationFormulaAccess().getRightAtomicFormulaParserRuleCall_1_0());
				}
				lv_right_1_0=ruleAtomicFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationFormulaRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"su.nsk.iae.rpl.RPL.AtomicFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtomicFormula
entryRuleAtomicFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicFormulaRule()); }
	iv_ruleAtomicFormula=ruleAtomicFormula
	{ $current=$iv_ruleAtomicFormula.current; }
	EOF;

// Rule AtomicFormula
ruleAtomicFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_boolLiteral_0_0=RULE_BOOLEAN_LITERAL
				{
					newLeafNode(lv_boolLiteral_0_0, grammarAccess.getAtomicFormulaAccess().getBoolLiteralBOOLEAN_LITERALTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicFormulaRule());
					}
					setWithLastConsumed(
						$current,
						"boolLiteral",
						lv_boolLiteral_0_0,
						"su.nsk.iae.rpl.RPL.BOOLEAN_LITERAL");
				}
			)
		)
		    |
		(
			otherlv_1='frm'
			{
				newLeafNode(otherlv_1, grammarAccess.getAtomicFormulaAccess().getFrmKeyword_1_0());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAtomicFormulaAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicFormulaAccess().getBoolTermTermParserRuleCall_1_2_0());
					}
					lv_boolTerm_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicFormulaRule());
						}
						set(
							$current,
							"boolTerm",
							lv_boolTerm_3_0,
							"su.nsk.iae.rpl.RPL.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getAtomicFormulaAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicFormulaRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getAtomicFormulaAccess().getFmParamFormulaParameterCrossReference_2_0_0());
					}
				)
			)
			(
				otherlv_6='('
				{
					newLeafNode(otherlv_6, grammarAccess.getAtomicFormulaAccess().getLeftParenthesisKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicFormulaRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getAtomicFormulaAccess().getStatesUpdateStateVariableCrossReference_2_1_1_0());
						}
					)
				)
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getAtomicFormulaAccess().getCommaKeyword_2_1_2_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAtomicFormulaRule());
								}
							}
							otherlv_9=RULE_ID
							{
								newLeafNode(otherlv_9, grammarAccess.getAtomicFormulaAccess().getStatesUpdateStateVariableCrossReference_2_1_2_1_0());
							}
						)
					)
				)*
				otherlv_10=')'
				{
					newLeafNode(otherlv_10, grammarAccess.getAtomicFormulaAccess().getRightParenthesisKeyword_2_1_3());
				}
			)?
		)
	)
;

// Entry rule entryRuleRequirementPatternInstance
entryRuleRequirementPatternInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementPatternInstanceRule()); }
	iv_ruleRequirementPatternInstance=ruleRequirementPatternInstance
	{ $current=$iv_ruleRequirementPatternInstance.current; }
	EOF;

// Rule RequirementPatternInstance
ruleRequirementPatternInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementPatternInstanceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getRequirementPatternInstanceAccess().getPatternRequirementPatternCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRequirementPatternInstanceAccess().getLeftParenthesisKeyword_1());
		}
		(
			otherlv_2='const'
			{
				newLeafNode(otherlv_2, grammarAccess.getRequirementPatternInstanceAccess().getConstKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getRequirementPatternInstanceAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementPatternInstanceAccess().getCParamsTermParserRuleCall_2_2_0());
					}
					lv_cParams_4_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementPatternInstanceRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_4_0,
							"su.nsk.iae.rpl.RPL.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getRequirementPatternInstanceAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRequirementPatternInstanceAccess().getCParamsTermParserRuleCall_2_3_1_0());
						}
						lv_cParams_6_0=ruleTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRequirementPatternInstanceRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_6_0,
								"su.nsk.iae.rpl.RPL.Term");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='formulas'
			{
				newLeafNode(otherlv_7, grammarAccess.getRequirementPatternInstanceAccess().getFormulasKeyword_3_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getRequirementPatternInstanceAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementPatternInstanceAccess().getFmParamsFormulaParameterValueParserRuleCall_3_2_0());
					}
					lv_fmParams_9_0=ruleFormulaParameterValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementPatternInstanceRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_9_0,
							"su.nsk.iae.rpl.RPL.FormulaParameterValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getRequirementPatternInstanceAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRequirementPatternInstanceAccess().getFmParamsFormulaParameterValueParserRuleCall_3_3_1_0());
						}
						lv_fmParams_11_0=ruleFormulaParameterValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRequirementPatternInstanceRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_11_0,
								"su.nsk.iae.rpl.RPL.FormulaParameterValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='final'
			{
				newLeafNode(otherlv_12, grammarAccess.getRequirementPatternInstanceAccess().getFinalKeyword_4_0());
			}
			otherlv_13=':'
			{
				newLeafNode(otherlv_13, grammarAccess.getRequirementPatternInstanceAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequirementPatternInstanceRule());
						}
					}
					otherlv_14=RULE_ID
					{
						newLeafNode(otherlv_14, grammarAccess.getRequirementPatternInstanceAccess().getFinStateUpdateStateVariableCrossReference_4_2_0());
					}
				)
			)
			(
				otherlv_15='current'
				{
					newLeafNode(otherlv_15, grammarAccess.getRequirementPatternInstanceAccess().getCurrentKeyword_4_3_0());
				}
				otherlv_16=':'
				{
					newLeafNode(otherlv_16, grammarAccess.getRequirementPatternInstanceAccess().getColonKeyword_4_3_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRequirementPatternInstanceRule());
							}
						}
						otherlv_17=RULE_ID
						{
							newLeafNode(otherlv_17, grammarAccess.getRequirementPatternInstanceAccess().getCurStateUpdateStateVariableCrossReference_4_3_2_0());
						}
					)
				)
			)?
		)?
		otherlv_18=')'
		{
			newLeafNode(otherlv_18, grammarAccess.getRequirementPatternInstanceAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleFutureRequirementPattern
entryRuleFutureRequirementPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFutureRequirementPatternRule()); }
	iv_ruleFutureRequirementPattern=ruleFutureRequirementPattern
	{ $current=$iv_ruleFutureRequirementPattern.current; }
	EOF;

// Rule FutureRequirementPattern
ruleFutureRequirementPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='futurereq'
		{
			newLeafNode(otherlv_0, grammarAccess.getFutureRequirementPatternAccess().getFuturereqKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getFutureRequirementPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFutureRequirementPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFutureRequirementPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFutureRequirementPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getFutureRequirementPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getFutureRequirementPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getFutureRequirementPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='formulas'
			{
				newLeafNode(otherlv_9, grammarAccess.getFutureRequirementPatternAccess().getFormulasKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getFutureRequirementPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_2_0());
					}
					lv_fmParams_11_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_11_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getFutureRequirementPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_3_1_0());
						}
						lv_fmParams_13_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_13_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getFutureRequirementPatternAccess().getRightParenthesisKeyword_6());
		}
		otherlv_15='from'
		{
			newLeafNode(otherlv_15, grammarAccess.getFutureRequirementPatternAccess().getFromKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getFileFilePathParserRuleCall_8_0());
				}
				lv_file_16_0=ruleFilePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
					}
					set(
						$current,
						"file",
						lv_file_16_0,
						"su.nsk.iae.rpl.RPL.FilePath");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17='with'
		{
			newLeafNode(otherlv_17, grammarAccess.getFutureRequirementPatternAccess().getWithKeyword_9());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFutureRequirementPatternRule());
					}
				}
				otherlv_18=RULE_ID
				{
					newLeafNode(otherlv_18, grammarAccess.getFutureRequirementPatternAccess().getExtraInvPatternFutureExtraInvariantPatternCrossReference_10_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFutureRequirementPatternAccess().getLessasFutureLemmasParserRuleCall_11_0());
				}
				lv_lessas_19_0=ruleFutureLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFutureRequirementPatternRule());
					}
					set(
						$current,
						"lessas",
						lv_lessas_19_0,
						"su.nsk.iae.rpl.RPL.FutureLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_20=';'
		{
			newLeafNode(otherlv_20, grammarAccess.getFutureRequirementPatternAccess().getSemicolonKeyword_12());
		}
	)
;

// Entry rule entryRulePastRequirementPattern
entryRulePastRequirementPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPastRequirementPatternRule()); }
	iv_rulePastRequirementPattern=rulePastRequirementPattern
	{ $current=$iv_rulePastRequirementPattern.current; }
	EOF;

// Rule PastRequirementPattern
rulePastRequirementPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pastreq'
		{
			newLeafNode(otherlv_0, grammarAccess.getPastRequirementPatternAccess().getPastreqKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getPastRequirementPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPastRequirementPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPastRequirementPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getPastRequirementPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getPastRequirementPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getPastRequirementPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getPastRequirementPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='formulas'
			{
				newLeafNode(otherlv_9, grammarAccess.getPastRequirementPatternAccess().getFormulasKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getPastRequirementPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_2_0());
					}
					lv_fmParams_11_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_11_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getPastRequirementPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getFmParamsFormulaParameterParserRuleCall_5_3_1_0());
						}
						lv_fmParams_13_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_13_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getPastRequirementPatternAccess().getRightParenthesisKeyword_6());
		}
		otherlv_15='from'
		{
			newLeafNode(otherlv_15, grammarAccess.getPastRequirementPatternAccess().getFromKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getFileFilePathParserRuleCall_8_0());
				}
				lv_file_16_0=ruleFilePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
					}
					set(
						$current,
						"file",
						lv_file_16_0,
						"su.nsk.iae.rpl.RPL.FilePath");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17='with'
		{
			newLeafNode(otherlv_17, grammarAccess.getPastRequirementPatternAccess().getWithKeyword_9());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPastRequirementPatternRule());
					}
				}
				otherlv_18=RULE_ID
				{
					newLeafNode(otherlv_18, grammarAccess.getPastRequirementPatternAccess().getExtraInvPatternPastExtraInvariantPatternCrossReference_10_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPastRequirementPatternAccess().getLemmasPastLemmasParserRuleCall_11_0());
				}
				lv_lemmas_19_0=rulePastLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPastRequirementPatternRule());
					}
					set(
						$current,
						"lemmas",
						lv_lemmas_19_0,
						"su.nsk.iae.rpl.RPL.PastLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_20=';'
		{
			newLeafNode(otherlv_20, grammarAccess.getPastRequirementPatternAccess().getSemicolonKeyword_12());
		}
	)
;

// Entry rule entryRuleFutureExtraInvariantPattern
entryRuleFutureExtraInvariantPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFutureExtraInvariantPatternRule()); }
	iv_ruleFutureExtraInvariantPattern=ruleFutureExtraInvariantPattern
	{ $current=$iv_ruleFutureExtraInvariantPattern.current; }
	EOF;

// Rule FutureExtraInvariantPattern
ruleFutureExtraInvariantPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='futureeinv'
		{
			newLeafNode(otherlv_0, grammarAccess.getFutureExtraInvariantPatternAccess().getFutureeinvKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getFutureExtraInvariantPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFutureExtraInvariantPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFutureExtraInvariantPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFutureExtraInvariantPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getFutureExtraInvariantPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getFutureExtraInvariantPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getFutureExtraInvariantPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='fun'
			{
				newLeafNode(otherlv_9, grammarAccess.getFutureExtraInvariantPatternAccess().getFunKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getFutureExtraInvariantPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_2_0());
					}
					lv_fnParams_11_0=ruleFunctionalParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
						}
						add(
							$current,
							"fnParams",
							lv_fnParams_11_0,
							"su.nsk.iae.rpl.RPL.FunctionalParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getFutureExtraInvariantPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_3_1_0());
						}
						lv_fnParams_13_0=ruleFunctionalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
							}
							add(
								$current,
								"fnParams",
								lv_fnParams_13_0,
								"su.nsk.iae.rpl.RPL.FunctionalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_14='formulas'
			{
				newLeafNode(otherlv_14, grammarAccess.getFutureExtraInvariantPatternAccess().getFormulasKeyword_6_0());
			}
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getFutureExtraInvariantPatternAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_2_0());
					}
					lv_fmParams_16_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_16_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_17=','
				{
					newLeafNode(otherlv_17, grammarAccess.getFutureExtraInvariantPatternAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_3_1_0());
						}
						lv_fmParams_18_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_18_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_19=')'
		{
			newLeafNode(otherlv_19, grammarAccess.getFutureExtraInvariantPatternAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_20='from'
			{
				newLeafNode(otherlv_20, grammarAccess.getFutureExtraInvariantPatternAccess().getFromKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getFileFilePathParserRuleCall_8_1_0());
					}
					lv_file_21_0=ruleFilePath
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
						}
						set(
							$current,
							"file",
							lv_file_21_0,
							"su.nsk.iae.rpl.RPL.FilePath");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFutureExtraInvariantPatternAccess().getLemmasFutureLemmasParserRuleCall_9_0());
				}
				lv_lemmas_22_0=ruleFutureLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFutureExtraInvariantPatternRule());
					}
					set(
						$current,
						"lemmas",
						lv_lemmas_22_0,
						"su.nsk.iae.rpl.RPL.FutureLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_23=';'
		{
			newLeafNode(otherlv_23, grammarAccess.getFutureExtraInvariantPatternAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRulePastExtraInvariantPattern
entryRulePastExtraInvariantPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPastExtraInvariantPatternRule()); }
	iv_rulePastExtraInvariantPattern=rulePastExtraInvariantPattern
	{ $current=$iv_rulePastExtraInvariantPattern.current; }
	EOF;

// Rule PastExtraInvariantPattern
rulePastExtraInvariantPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pasteinv'
		{
			newLeafNode(otherlv_0, grammarAccess.getPastExtraInvariantPatternAccess().getPasteinvKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getPastExtraInvariantPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPastExtraInvariantPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPastExtraInvariantPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getPastExtraInvariantPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getPastExtraInvariantPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getPastExtraInvariantPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getPastExtraInvariantPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='fun'
			{
				newLeafNode(otherlv_9, grammarAccess.getPastExtraInvariantPatternAccess().getFunKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getPastExtraInvariantPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_2_0());
					}
					lv_fnParams_11_0=ruleFunctionalParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
						}
						add(
							$current,
							"fnParams",
							lv_fnParams_11_0,
							"su.nsk.iae.rpl.RPL.FunctionalParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getPastExtraInvariantPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_3_1_0());
						}
						lv_fnParams_13_0=ruleFunctionalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
							}
							add(
								$current,
								"fnParams",
								lv_fnParams_13_0,
								"su.nsk.iae.rpl.RPL.FunctionalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_14='formulas'
			{
				newLeafNode(otherlv_14, grammarAccess.getPastExtraInvariantPatternAccess().getFormulasKeyword_6_0());
			}
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getPastExtraInvariantPatternAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_2_0());
					}
					lv_fmParams_16_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_16_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_17=','
				{
					newLeafNode(otherlv_17, grammarAccess.getPastExtraInvariantPatternAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_3_1_0());
						}
						lv_fmParams_18_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_18_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_19=')'
		{
			newLeafNode(otherlv_19, grammarAccess.getPastExtraInvariantPatternAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_20='from'
			{
				newLeafNode(otherlv_20, grammarAccess.getPastExtraInvariantPatternAccess().getFromKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getFileFilePathParserRuleCall_8_1_0());
					}
					lv_file_21_0=ruleFilePath
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
						}
						set(
							$current,
							"file",
							lv_file_21_0,
							"su.nsk.iae.rpl.RPL.FilePath");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPastExtraInvariantPatternAccess().getLemmasPastLemmasParserRuleCall_9_0());
				}
				lv_lemmas_22_0=rulePastLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternRule());
					}
					set(
						$current,
						"lemmas",
						lv_lemmas_22_0,
						"su.nsk.iae.rpl.RPL.PastLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_23=';'
		{
			newLeafNode(otherlv_23, grammarAccess.getPastExtraInvariantPatternAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRuleDerivedExtraInvariantPattern
entryRuleDerivedExtraInvariantPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternRule()); }
	iv_ruleDerivedExtraInvariantPattern=ruleDerivedExtraInvariantPattern
	{ $current=$iv_ruleDerivedExtraInvariantPattern.current; }
	EOF;

// Rule DerivedExtraInvariantPattern
ruleDerivedExtraInvariantPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='derivedeinv'
		{
			newLeafNode(otherlv_0, grammarAccess.getDerivedExtraInvariantPatternAccess().getDerivedeinvKeyword_0());
		}
		otherlv_1='pattern'
		{
			newLeafNode(otherlv_1, grammarAccess.getDerivedExtraInvariantPatternAccess().getPatternKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDerivedExtraInvariantPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDerivedExtraInvariantPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDerivedExtraInvariantPatternAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getDerivedExtraInvariantPatternAccess().getConstKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getDerivedExtraInvariantPatternAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_2_0());
					}
					lv_cParams_6_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_6_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getDerivedExtraInvariantPatternAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getCParamsConstantParameterParserRuleCall_4_3_1_0());
						}
						lv_cParams_8_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_8_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='fun'
			{
				newLeafNode(otherlv_9, grammarAccess.getDerivedExtraInvariantPatternAccess().getFunKeyword_5_0());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getDerivedExtraInvariantPatternAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_2_0());
					}
					lv_fnParams_11_0=ruleFunctionalParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
						}
						add(
							$current,
							"fnParams",
							lv_fnParams_11_0,
							"su.nsk.iae.rpl.RPL.FunctionalParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getDerivedExtraInvariantPatternAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getFnParamsFunctionalParameterParserRuleCall_5_3_1_0());
						}
						lv_fnParams_13_0=ruleFunctionalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
							}
							add(
								$current,
								"fnParams",
								lv_fnParams_13_0,
								"su.nsk.iae.rpl.RPL.FunctionalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_14='formulas'
			{
				newLeafNode(otherlv_14, grammarAccess.getDerivedExtraInvariantPatternAccess().getFormulasKeyword_6_0());
			}
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getDerivedExtraInvariantPatternAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_2_0());
					}
					lv_fmParams_16_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_16_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_17=','
				{
					newLeafNode(otherlv_17, grammarAccess.getDerivedExtraInvariantPatternAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getFmParamsFormulaParameterParserRuleCall_6_3_1_0());
						}
						lv_fmParams_18_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_18_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_19=')'
		{
			newLeafNode(otherlv_19, grammarAccess.getDerivedExtraInvariantPatternAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_20='from'
			{
				newLeafNode(otherlv_20, grammarAccess.getDerivedExtraInvariantPatternAccess().getFromKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getFileFilePathParserRuleCall_8_1_0());
					}
					lv_file_21_0=ruleFilePath
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
						}
						set(
							$current,
							"file",
							lv_file_21_0,
							"su.nsk.iae.rpl.RPL.FilePath");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDerivedExtraInvariantPatternAccess().getLemmasDerivedLemmasParserRuleCall_9_0());
				}
				lv_lemmas_22_0=ruleDerivedLemmas
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDerivedExtraInvariantPatternRule());
					}
					set(
						$current,
						"lemmas",
						lv_lemmas_22_0,
						"su.nsk.iae.rpl.RPL.DerivedLemmas");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_23=';'
		{
			newLeafNode(otherlv_23, grammarAccess.getDerivedExtraInvariantPatternAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRuleFilePath
entryRuleFilePath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFilePathRule()); }
	iv_ruleFilePath=ruleFilePath
	{ $current=$iv_ruleFilePath.current.getText(); }
	EOF;

// Rule FilePath
ruleFilePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFilePathAccess().getSolidusKeyword_0());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getFilePathAccess().getDirParserRuleCall_1_0());
			}
			this_Dir_1=ruleDir
			{
				$current.merge(this_Dir_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFilePathAccess().getSolidusKeyword_1_1());
			}
		)*
		this_ID_3=RULE_ID
		{
			$current.merge(this_ID_3);
		}
		{
			newLeafNode(this_ID_3, grammarAccess.getFilePathAccess().getIDTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleDir
entryRuleDir returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirRule()); }
	iv_ruleDir=ruleDir
	{ $current=$iv_ruleDir.current.getText(); }
	EOF;

// Rule Dir
ruleDir returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getDirAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDirAccess().getFullStopKeyword_1());
		}
		    |
		kw='..'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDirAccess().getFullStopFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getConjunctionTermParserRuleCall_0());
		}
		this_ConjunctionTerm_0=ruleConjunctionTerm
		{
			$current = $this_ConjunctionTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTermAccess().getTermLeftAction_1_0(),
						$current);
				}
			)
			this_DISJUNCTION_2=RULE_DISJUNCTION
			{
				newLeafNode(this_DISJUNCTION_2, grammarAccess.getTermAccess().getDISJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionTerm
entryRuleConjunctionTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionTermRule()); }
	iv_ruleConjunctionTerm=ruleConjunctionTerm
	{ $current=$iv_ruleConjunctionTerm.current; }
	EOF;

// Rule ConjunctionTerm
ruleConjunctionTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctionTermAccess().getNegationTermParserRuleCall_0());
		}
		this_NegationTerm_0=ruleNegationTerm
		{
			$current = $this_NegationTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConjunctionTermAccess().getConjunctionTermLeftAction_1_0(),
						$current);
				}
			)
			this_CONJUNCTION_2=RULE_CONJUNCTION
			{
				newLeafNode(this_CONJUNCTION_2, grammarAccess.getConjunctionTermAccess().getCONJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionTermAccess().getRightConjunctionTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConjunctionTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.ConjunctionTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNegationTerm
entryRuleNegationTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationTermRule()); }
	iv_ruleNegationTerm=ruleNegationTerm
	{ $current=$iv_ruleNegationTerm.current; }
	EOF;

// Rule NegationTerm
ruleNegationTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNegationTermAccess().getEqTermParserRuleCall_0());
		}
		this_EqTerm_0=ruleEqTerm
		{
			$current = $this_EqTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_NEGATION_1=RULE_NEGATION
			{
				newLeafNode(this_NEGATION_1, grammarAccess.getNegationTermAccess().getNEGATIONTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNegationTermAccess().getRightEqTermParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleEqTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegationTermRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"su.nsk.iae.rpl.RPL.EqTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEqTerm
entryRuleEqTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqTermRule()); }
	iv_ruleEqTerm=ruleEqTerm
	{ $current=$iv_ruleEqTerm.current; }
	EOF;

// Rule EqTerm
ruleEqTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqTermAccess().getCompareTermParserRuleCall_0());
		}
		this_CompareTerm_0=ruleCompareTerm
		{
			$current = $this_CompareTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqTermAccess().getEqTermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqTermAccess().getEqPredEqPredicateEnumRuleCall_1_1_0());
					}
					lv_eqPred_2_0=ruleEqPredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqTermRule());
						}
						set(
							$current,
							"eqPred",
							lv_eqPred_2_0,
							"su.nsk.iae.rpl.RPL.EqPredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqTermAccess().getRightEqTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.EqTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompareTerm
entryRuleCompareTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareTermRule()); }
	iv_ruleCompareTerm=ruleCompareTerm
	{ $current=$iv_ruleCompareTerm.current; }
	EOF;

// Rule CompareTerm
ruleCompareTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompareTermAccess().getAddTermParserRuleCall_0());
		}
		this_AddTerm_0=ruleAddTerm
		{
			$current = $this_AddTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompareTermAccess().getCompareTermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareTermAccess().getCompPredCompPredicateEnumRuleCall_1_1_0());
					}
					lv_compPred_2_0=ruleCompPredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareTermRule());
						}
						set(
							$current,
							"compPred",
							lv_compPred_2_0,
							"su.nsk.iae.rpl.RPL.CompPredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareTermAccess().getRightCompareTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompareTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.CompareTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddTerm
entryRuleAddTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddTermRule()); }
	iv_ruleAddTerm=ruleAddTerm
	{ $current=$iv_ruleAddTerm.current; }
	EOF;

// Rule AddTerm
ruleAddTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddTermAccess().getMulTermParserRuleCall_0());
		}
		this_MulTerm_0=ruleMulTerm
		{
			$current = $this_MulTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddTermAccess().getAddTermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddTermAccess().getAddOpAddOperatorEnumRuleCall_1_1_0());
					}
					lv_addOp_2_0=ruleAddOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddTermRule());
						}
						set(
							$current,
							"addOp",
							lv_addOp_2_0,
							"su.nsk.iae.rpl.RPL.AddOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddTermAccess().getRightAddTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.AddTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulTerm
entryRuleMulTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulTermRule()); }
	iv_ruleMulTerm=ruleMulTerm
	{ $current=$iv_ruleMulTerm.current; }
	EOF;

// Rule MulTerm
ruleMulTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulTermAccess().getPowerTermParserRuleCall_0());
		}
		this_PowerTerm_0=rulePowerTerm
		{
			$current = $this_PowerTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulTermAccess().getMulTermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulTermAccess().getMulOpMulOperatorEnumRuleCall_1_1_0());
					}
					lv_mulOp_2_0=ruleMulOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulTermRule());
						}
						set(
							$current,
							"mulOp",
							lv_mulOp_2_0,
							"su.nsk.iae.rpl.RPL.MulOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulTermAccess().getRightMulTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.MulTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePowerTerm
entryRulePowerTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerTermRule()); }
	iv_rulePowerTerm=rulePowerTerm
	{ $current=$iv_rulePowerTerm.current; }
	EOF;

// Rule PowerTerm
rulePowerTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowerTermAccess().getUnaryTermParserRuleCall_0());
		}
		this_UnaryTerm_0=ruleUnaryTerm
		{
			$current = $this_UnaryTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPowerTermAccess().getPowerTermLeftAction_1_0(),
						$current);
				}
			)
			this_POWER_OPERATOR_2=RULE_POWER_OPERATOR
			{
				newLeafNode(this_POWER_OPERATOR_2, grammarAccess.getPowerTermAccess().getPOWER_OPERATORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPowerTermAccess().getRightPowerTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePowerTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowerTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.PowerTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryTerm
entryRuleUnaryTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryTermRule()); }
	iv_ruleUnaryTerm=ruleUnaryTerm
	{ $current=$iv_ruleUnaryTerm.current; }
	EOF;

// Rule UnaryTerm
ruleUnaryTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryTermAccess().getPrimaryTermParserRuleCall_0());
		}
		this_PrimaryTerm_0=rulePrimaryTerm
		{
			$current = $this_PrimaryTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryTermAccess().getUnOpUnMinusEnumRuleCall_1_0_0());
					}
					lv_unOp_1_0=ruleUnMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryTermRule());
						}
						set(
							$current,
							"unOp",
							lv_unOp_1_0,
							"su.nsk.iae.rpl.RPL.UnMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryTermAccess().getRightPrimaryTermParserRuleCall_1_1_0());
					}
					lv_right_2_0=rulePrimaryTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryTermRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"su.nsk.iae.rpl.RPL.PrimaryTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryTerm
entryRulePrimaryTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryTermRule()); }
	iv_rulePrimaryTerm=rulePrimaryTerm
	{ $current=$iv_rulePrimaryTerm.current; }
	EOF;

// Rule PrimaryTerm
rulePrimaryTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryTermAccess().getConstantParserRuleCall_0());
		}
		this_Constant_0=ruleConstant
		{
			$current = $this_Constant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryTermRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryTermAccess().getVariableVariableCrossReference_1_0());
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryTermRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getPrimaryTermAccess().getStateUpdateStateVariableCrossReference_2_0_0());
					}
				)
			)
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryTermAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryTermRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getPrimaryTermAccess().getVariableProgramVariableCrossReference_2_2_0());
					}
				)
			)
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryTermAccess().getRightSquareBracketKeyword_2_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryTermAccess().getFunApplicationParserRuleCall_3());
		}
		this_FunApplication_6=ruleFunApplication
		{
			$current = $this_FunApplication_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryTermAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryTermAccess().getNestedTermTermParserRuleCall_4_1_0());
					}
					lv_nestedTerm_8_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryTermRule());
						}
						set(
							$current,
							"nestedTerm",
							lv_nestedTerm_8_0,
							"su.nsk.iae.rpl.RPL.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryTermAccess().getRightParenthesisKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRuleFunApplication
entryRuleFunApplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunApplicationRule()); }
	iv_ruleFunApplication=ruleFunApplication
	{ $current=$iv_ruleFunApplication.current; }
	EOF;

// Rule FunApplication
ruleFunApplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunApplicationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunApplicationAccess().getFnParamFunctionalParameterCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunApplicationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunApplicationRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFunApplicationAccess().getStateUpdateStateVariableCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunApplicationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getNumNumericLiteralParserRuleCall_0_0());
				}
				lv_num_0_0=ruleNumericLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"num",
						lv_num_0_0,
						"su.nsk.iae.rpl.RPL.NumericLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_bool_1_0=RULE_BOOLEAN_LITERAL
				{
					newLeafNode(lv_bool_1_0, grammarAccess.getConstantAccess().getBoolBOOLEAN_LITERALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"bool",
						lv_bool_1_0,
						"su.nsk.iae.rpl.RPL.BOOLEAN_LITERAL");
				}
			)
		)
	)
;

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	iv_ruleNumericLiteral=ruleNumericLiteral
	{ $current=$iv_ruleNumericLiteral.current; }
	EOF;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0());
		}
		this_IntegerLiteral_0=ruleIntegerLiteral
		{
			$current = $this_IntegerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1());
		}
		this_RealLiteral_1=ruleRealLiteral
		{
			$current = $this_RealLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	iv_ruleIntegerLiteral=ruleIntegerLiteral
	{ $current=$iv_ruleIntegerLiteral.current; }
	EOF;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sig_0_0='-'
				{
					newLeafNode(lv_sig_0_0, grammarAccess.getIntegerLiteralAccess().getSigHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerLiteralRule());
					}
					setWithLastConsumed($current, "sig", lv_sig_0_0 != null, "-");
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_INTEGER
				{
					newLeafNode(lv_value_1_0, grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"su.nsk.iae.rpl.RPL.INTEGER");
				}
			)
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sig_0_0='-'
				{
					newLeafNode(lv_sig_0_0, grammarAccess.getRealLiteralAccess().getSigHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed($current, "sig", lv_sig_0_0 != null, "-");
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_REAL
				{
					newLeafNode(lv_value_1_0, grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"su.nsk.iae.rpl.RPL.REAL");
				}
			)
		)
	)
;

// Entry rule entryRulePatternFreeFormula
entryRulePatternFreeFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternFreeFormulaRule()); }
	iv_rulePatternFreeFormula=rulePatternFreeFormula
	{ $current=$iv_rulePatternFreeFormula.current; }
	EOF;

// Rule PatternFreeFormula
rulePatternFreeFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPatternFreeFormulaAccess().getConjunctionPatternFreeFormulaParserRuleCall_0());
		}
		this_ConjunctionPatternFreeFormula_0=ruleConjunctionPatternFreeFormula
		{
			$current = $this_ConjunctionPatternFreeFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPatternFreeFormulaAccess().getPatternFreeFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_DISJUNCTION_2=RULE_DISJUNCTION
			{
				newLeafNode(this_DISJUNCTION_2, grammarAccess.getPatternFreeFormulaAccess().getDISJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternFreeFormulaAccess().getRightPatternFreeFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePatternFreeFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternFreeFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.PatternFreeFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionPatternFreeFormula
entryRuleConjunctionPatternFreeFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionPatternFreeFormulaRule()); }
	iv_ruleConjunctionPatternFreeFormula=ruleConjunctionPatternFreeFormula
	{ $current=$iv_ruleConjunctionPatternFreeFormula.current; }
	EOF;

// Rule ConjunctionPatternFreeFormula
ruleConjunctionPatternFreeFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctionPatternFreeFormulaAccess().getPrimaryPatternFreeFormulaParserRuleCall_0());
		}
		this_PrimaryPatternFreeFormula_0=rulePrimaryPatternFreeFormula
		{
			$current = $this_PrimaryPatternFreeFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConjunctionPatternFreeFormulaAccess().getConjunctionPatternFreeFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_CONJUNCTION_2=RULE_CONJUNCTION
			{
				newLeafNode(this_CONJUNCTION_2, grammarAccess.getConjunctionPatternFreeFormulaAccess().getCONJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionPatternFreeFormulaAccess().getRightConjunctionPatternFreeFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConjunctionPatternFreeFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionPatternFreeFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.ConjunctionPatternFreeFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryPatternFreeFormula
entryRulePrimaryPatternFreeFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryPatternFreeFormulaRule()); }
	iv_rulePrimaryPatternFreeFormula=rulePrimaryPatternFreeFormula
	{ $current=$iv_rulePrimaryPatternFreeFormula.current; }
	EOF;

// Rule PrimaryPatternFreeFormula
rulePrimaryPatternFreeFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryPatternFreeFormulaAccess().getAtomicNegationFormulaParserRuleCall_0_0());
				}
				lv_atomic_0_0=ruleNegationFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryPatternFreeFormulaRule());
					}
					set(
						$current,
						"atomic",
						lv_atomic_0_0,
						"su.nsk.iae.rpl.RPL.NegationFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryPatternFreeFormulaAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryPatternFreeFormulaAccess().getNestedFormulaPatternFreeFormulaParserRuleCall_1_1_0());
					}
					lv_nestedFormula_2_0=rulePatternFreeFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryPatternFreeFormulaRule());
						}
						set(
							$current,
							"nestedFormula",
							lv_nestedFormula_2_0,
							"su.nsk.iae.rpl.RPL.PatternFreeFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryPatternFreeFormulaAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='requirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getRequirementKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				otherlv_2='='
				{
					newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getEqualsSignKeyword_2_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRequirementRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getRequirementAccess().getPatternDerivedRequirementPatternCrossReference_2_0_1_0());
						}
					)
				)
				otherlv_4='('
				{
					newLeafNode(otherlv_4, grammarAccess.getRequirementAccess().getLeftParenthesisKeyword_2_0_2());
				}
				(
					otherlv_5='const'
					{
						newLeafNode(otherlv_5, grammarAccess.getRequirementAccess().getConstKeyword_2_0_3_0());
					}
					otherlv_6=':'
					{
						newLeafNode(otherlv_6, grammarAccess.getRequirementAccess().getColonKeyword_2_0_3_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getRequirementAccess().getCParamsTermParserRuleCall_2_0_3_2_0());
							}
							lv_cParams_7_0=ruleTerm
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRequirementRule());
								}
								add(
									$current,
									"cParams",
									lv_cParams_7_0,
									"su.nsk.iae.rpl.RPL.Term");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_8=','
						{
							newLeafNode(otherlv_8, grammarAccess.getRequirementAccess().getCommaKeyword_2_0_3_3_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getRequirementAccess().getCParamsTermParserRuleCall_2_0_3_3_1_0());
								}
								lv_cParams_9_0=ruleTerm
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getRequirementRule());
									}
									add(
										$current,
										"cParams",
										lv_cParams_9_0,
										"su.nsk.iae.rpl.RPL.Term");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				(
					otherlv_10='formulas'
					{
						newLeafNode(otherlv_10, grammarAccess.getRequirementAccess().getFormulasKeyword_2_0_4_0());
					}
					otherlv_11=':'
					{
						newLeafNode(otherlv_11, grammarAccess.getRequirementAccess().getColonKeyword_2_0_4_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getRequirementAccess().getFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_2_0());
							}
							lv_fmParams_12_0=rulePatternFreeFormulaParameterValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRequirementRule());
								}
								add(
									$current,
									"fmParams",
									lv_fmParams_12_0,
									"su.nsk.iae.rpl.RPL.PatternFreeFormulaParameterValue");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_13=','
						{
							newLeafNode(otherlv_13, grammarAccess.getRequirementAccess().getCommaKeyword_2_0_4_3_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getRequirementAccess().getFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_3_1_0());
								}
								lv_fmParams_14_0=rulePatternFreeFormulaParameterValue
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getRequirementRule());
									}
									add(
										$current,
										"fmParams",
										lv_fmParams_14_0,
										"su.nsk.iae.rpl.RPL.PatternFreeFormulaParameterValue");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_15=')'
				{
					newLeafNode(otherlv_15, grammarAccess.getRequirementAccess().getRightParenthesisKeyword_2_0_5());
				}
			)
			    |
			(
				otherlv_16=':'
				{
					newLeafNode(otherlv_16, grammarAccess.getRequirementAccess().getColonKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRequirementRule());
							}
						}
						otherlv_17=RULE_ID
						{
							newLeafNode(otherlv_17, grammarAccess.getRequirementAccess().getPatternDerivedRequirementPatternCrossReference_2_1_1_0());
						}
					)
				)
				otherlv_18='with'
				{
					newLeafNode(otherlv_18, grammarAccess.getRequirementAccess().getWithKeyword_2_1_2());
				}
				(
					(
						lv_extraIn_19_0=RULE_ID
						{
							newLeafNode(lv_extraIn_19_0, grammarAccess.getRequirementAccess().getExtraInIDTerminalRuleCall_2_1_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRequirementRule());
							}
							setWithLastConsumed(
								$current,
								"extraIn",
								lv_extraIn_19_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
		)
		otherlv_20=';'
		{
			newLeafNode(otherlv_20, grammarAccess.getRequirementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleExtraInvariant
entryRuleExtraInvariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtraInvariantRule()); }
	iv_ruleExtraInvariant=ruleExtraInvariant
	{ $current=$iv_ruleExtraInvariant.current; }
	EOF;

// Rule ExtraInvariant
ruleExtraInvariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extra'
		{
			newLeafNode(otherlv_0, grammarAccess.getExtraInvariantAccess().getExtraKeyword_0());
		}
		otherlv_1='invariant'
		{
			newLeafNode(otherlv_1, grammarAccess.getExtraInvariantAccess().getInvariantKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getExtraInvariantAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtraInvariantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getExtraInvariantAccess().getColonKeyword_3_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExtraInvariantRule());
							}
						}
						otherlv_4=RULE_ID
						{
							newLeafNode(otherlv_4, grammarAccess.getExtraInvariantAccess().getPatternDerivedExtraInvariantPatternCrossReference_3_0_1_0());
						}
					)
				)
				otherlv_5='for'
				{
					newLeafNode(otherlv_5, grammarAccess.getExtraInvariantAccess().getForKeyword_3_0_2());
				}
				(
					(
						lv_reqName_6_0=RULE_ID
						{
							newLeafNode(lv_reqName_6_0, grammarAccess.getExtraInvariantAccess().getReqNameIDTerminalRuleCall_3_0_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExtraInvariantRule());
							}
							setWithLastConsumed(
								$current,
								"reqName",
								lv_reqName_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			(
				otherlv_7='for'
				{
					newLeafNode(otherlv_7, grammarAccess.getExtraInvariantAccess().getForKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExtraInvariantRule());
							}
						}
						otherlv_8=RULE_ID
						{
							newLeafNode(otherlv_8, grammarAccess.getExtraInvariantAccess().getReqRequirementCrossReference_3_1_1_0());
						}
					)
				)
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getExtraInvariantAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulePatternFreeFormulaParameterValue
entryRulePatternFreeFormulaParameterValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternFreeFormulaParameterValueRule()); }
	iv_rulePatternFreeFormulaParameterValue=rulePatternFreeFormulaParameterValue
	{ $current=$iv_rulePatternFreeFormulaParameterValue.current; }
	EOF;

// Rule PatternFreeFormulaParameterValue
rulePatternFreeFormulaParameterValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='lambda'
			{
				newLeafNode(otherlv_0, grammarAccess.getPatternFreeFormulaParameterValueAccess().getLambdaKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternFreeFormulaParameterValueAccess().getStatesUpdateStateVariableParserRuleCall_0_1_0());
					}
					lv_states_1_0=ruleUpdateStateVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternFreeFormulaParameterValueRule());
						}
						add(
							$current,
							"states",
							lv_states_1_0,
							"su.nsk.iae.rpl.RPL.UpdateStateVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getPatternFreeFormulaParameterValueAccess().getFullStopKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternFreeFormulaParameterValueAccess().getFormulaPatternFreeFormulaParserRuleCall_1_0());
				}
				lv_formula_3_0=rulePatternFreeFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternFreeFormulaParameterValueRule());
					}
					set(
						$current,
						"formula",
						lv_formula_3_0,
						"su.nsk.iae.rpl.RPL.PatternFreeFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFutureLemmas
entryRuleFutureLemmas returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFutureLemmasRule()); }
	iv_ruleFutureLemmas=ruleFutureLemmas
	{ $current=$iv_ruleFutureLemmas.current; }
	EOF;

// Rule FutureLemmas
ruleFutureLemmas returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFutureLemmasAccess().getFutureLemmasAction_0(),
					$current);
			}
		)
		(
			otherlv_1='lemmas'
			{
				newLeafNode(otherlv_1, grammarAccess.getFutureLemmasAccess().getLemmasKeyword_1_0());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getFutureLemmasAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{ 
					  getUnorderedGroupHelper().enter(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2());
					}
					(
						(
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 0)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 0);
						}
									({true}?=>(otherlv_4='LS1'
									{
										newLeafNode(otherlv_4, grammarAccess.getFutureLemmasAccess().getLS1Keyword_1_2_0_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getFutureLemmasAccess().getL1LemmaParserRuleCall_1_2_0_1_0());
											}
											lv_L1_5_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getFutureLemmasRule());
												}
												set(
													$current,
													"L1",
													lv_L1_5_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 1)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 1);
						}
									({true}?=>(otherlv_6='LS2'
									{
										newLeafNode(otherlv_6, grammarAccess.getFutureLemmasAccess().getLS2Keyword_1_2_1_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getFutureLemmasAccess().getL2LemmaParserRuleCall_1_2_1_1_0());
											}
											lv_L2_7_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getFutureLemmasRule());
												}
												set(
													$current,
													"L2",
													lv_L2_7_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 2)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2(), 2);
						}
									({true}?=>(otherlv_8='LS3'
									{
										newLeafNode(otherlv_8, grammarAccess.getFutureLemmasAccess().getLS3Keyword_1_2_2_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getFutureLemmasAccess().getL3LemmaParserRuleCall_1_2_2_1_0());
											}
											lv_L3_9_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getFutureLemmasRule());
												}
												set(
													$current,
													"L3",
													lv_L3_9_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)
						)*
					)
				)
					{ 
					  getUnorderedGroupHelper().leave(grammarAccess.getFutureLemmasAccess().getUnorderedGroup_1_2());
					}
			)
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getFutureLemmasAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRulePastLemmas
entryRulePastLemmas returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPastLemmasRule()); }
	iv_rulePastLemmas=rulePastLemmas
	{ $current=$iv_rulePastLemmas.current; }
	EOF;

// Rule PastLemmas
rulePastLemmas returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPastLemmasAccess().getPastLemmasAction_0(),
					$current);
			}
		)
		(
			otherlv_1='lemmas'
			{
				newLeafNode(otherlv_1, grammarAccess.getPastLemmasAccess().getLemmasKeyword_1_0());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getPastLemmasAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{ 
					  getUnorderedGroupHelper().enter(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
					}
					(
						(
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 0)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 0);
						}
									({true}?=>(otherlv_4='LS4'
									{
										newLeafNode(otherlv_4, grammarAccess.getPastLemmasAccess().getLS4Keyword_1_2_0_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getPastLemmasAccess().getL4LemmaParserRuleCall_1_2_0_1_0());
											}
											lv_L4_5_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getPastLemmasRule());
												}
												set(
													$current,
													"L4",
													lv_L4_5_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 1)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 1);
						}
									({true}?=>(otherlv_6='LS5'
									{
										newLeafNode(otherlv_6, grammarAccess.getPastLemmasAccess().getLS5Keyword_1_2_1_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getPastLemmasAccess().getL5LemmaParserRuleCall_1_2_1_1_0());
											}
											lv_L5_7_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getPastLemmasRule());
												}
												set(
													$current,
													"L5",
													lv_L5_7_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 2)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 2);
						}
									({true}?=>(otherlv_8='LS6'
									{
										newLeafNode(otherlv_8, grammarAccess.getPastLemmasAccess().getLS6Keyword_1_2_2_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getPastLemmasAccess().getL6LemmaParserRuleCall_1_2_2_1_0());
											}
											lv_L6_9_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getPastLemmasRule());
												}
												set(
													$current,
													"L6",
													lv_L6_9_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 3)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2(), 3);
						}
									({true}?=>(otherlv_10='LS7'
									{
										newLeafNode(otherlv_10, grammarAccess.getPastLemmasAccess().getLS7Keyword_1_2_3_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getPastLemmasAccess().getL7LemmaParserRuleCall_1_2_3_1_0());
											}
											lv_L7_11_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getPastLemmasRule());
												}
												set(
													$current,
													"L7",
													lv_L7_11_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)
						)*
					)
				)
					{ 
					  getUnorderedGroupHelper().leave(grammarAccess.getPastLemmasAccess().getUnorderedGroup_1_2());
					}
			)
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getPastLemmasAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleDerivedLemmas
entryRuleDerivedLemmas returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDerivedLemmasRule()); }
	iv_ruleDerivedLemmas=ruleDerivedLemmas
	{ $current=$iv_ruleDerivedLemmas.current; }
	EOF;

// Rule DerivedLemmas
ruleDerivedLemmas returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDerivedLemmasAccess().getDerivedLemmasAction_0(),
					$current);
			}
		)
		(
			otherlv_1='lemmas'
			{
				newLeafNode(otherlv_1, grammarAccess.getDerivedLemmasAccess().getLemmasKeyword_1_0());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getDerivedLemmasAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{ 
					  getUnorderedGroupHelper().enter(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2());
					}
					(
						(
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2(), 0)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2(), 0);
						}
									({true}?=>(otherlv_4='LS8'
									{
										newLeafNode(otherlv_4, grammarAccess.getDerivedLemmasAccess().getLS8Keyword_1_2_0_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getDerivedLemmasAccess().getL8LemmaParserRuleCall_1_2_0_1_0());
											}
											lv_L8_5_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getDerivedLemmasRule());
												}
												set(
													$current,
													"L8",
													lv_L8_5_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2(), 1)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2(), 1);
						}
									({true}?=>(otherlv_6='LS9'
									{
										newLeafNode(otherlv_6, grammarAccess.getDerivedLemmasAccess().getLS9Keyword_1_2_1_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getDerivedLemmasAccess().getL9LemmaParserRuleCall_1_2_1_1_0());
											}
											lv_L9_7_0=ruleLemma
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getDerivedLemmasRule());
												}
												set(
													$current,
													"L9",
													lv_L9_7_0,
													"su.nsk.iae.rpl.RPL.Lemma");
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2());
						}
					)
				)
						)*
					)
				)
					{ 
					  getUnorderedGroupHelper().leave(grammarAccess.getDerivedLemmasAccess().getUnorderedGroup_1_2());
					}
			)
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getDerivedLemmasAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleLemma
entryRuleLemma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLemmaRule()); }
	iv_ruleLemma=ruleLemma
	{ $current=$iv_ruleLemma.current; }
	EOF;

// Rule Lemma
ruleLemma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getLemmaAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='lemma'
							{
								newLeafNode(otherlv_1, grammarAccess.getLemmaAccess().getLemmaKeyword_0_0());
							}
							(
								(
									lv_name_2_0=RULE_ID
									{
										newLeafNode(lv_name_2_0, grammarAccess.getLemmaAccess().getNameIDTerminalRuleCall_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getLemmaRule());
										}
										setWithLastConsumed(
											$current,
											"name",
											lv_name_2_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							otherlv_3='{'
							{
								newLeafNode(otherlv_3, grammarAccess.getLemmaAccess().getLeftCurlyBracketKeyword_0_2());
							}
							(
								otherlv_4='const'
								{
									newLeafNode(otherlv_4, grammarAccess.getLemmaAccess().getConstKeyword_0_3_0());
								}
								otherlv_5=':'
								{
									newLeafNode(otherlv_5, grammarAccess.getLemmaAccess().getColonKeyword_0_3_1());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getLemmaAccess().getCVarsConstantParameterParserRuleCall_0_3_2_0());
										}
										lv_cVars_6_0=ruleConstantParameter
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getLemmaRule());
											}
											add(
												$current,
												"cVars",
												lv_cVars_6_0,
												"su.nsk.iae.rpl.RPL.ConstantParameter");
											afterParserOrEnumRuleCall();
										}
									)
								)
								(
									otherlv_7=','
									{
										newLeafNode(otherlv_7, grammarAccess.getLemmaAccess().getCommaKeyword_0_3_3_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getLemmaAccess().getCVarsConstantParameterParserRuleCall_0_3_3_1_0());
											}
											lv_cVars_8_0=ruleConstantParameter
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getLemmaRule());
												}
												add(
													$current,
													"cVars",
													lv_cVars_8_0,
													"su.nsk.iae.rpl.RPL.ConstantParameter");
												afterParserOrEnumRuleCall();
											}
										)
									)
								)*
							)?
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 1);
				}
							({true}?=>(otherlv_9='fun'
							{
								newLeafNode(otherlv_9, grammarAccess.getLemmaAccess().getFunKeyword_1_0());
							}
							otherlv_10=':'
							{
								newLeafNode(otherlv_10, grammarAccess.getLemmaAccess().getColonKeyword_1_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getFnVarsFunctionalParameterParserRuleCall_1_2_0());
									}
									lv_fnVars_11_0=ruleFunctionalParameter
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										add(
											$current,
											"fnVars",
											lv_fnVars_11_0,
											"su.nsk.iae.rpl.RPL.FunctionalParameter");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_12=','
								{
									newLeafNode(otherlv_12, grammarAccess.getLemmaAccess().getCommaKeyword_1_3_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getLemmaAccess().getFnVarsFunctionalParameterParserRuleCall_1_3_1_0());
										}
										lv_fnVars_13_0=ruleFunctionalParameter
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getLemmaRule());
											}
											add(
												$current,
												"fnVars",
												lv_fnVars_13_0,
												"su.nsk.iae.rpl.RPL.FunctionalParameter");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 2);
				}
							({true}?=>(otherlv_14='extra'
							{
								newLeafNode(otherlv_14, grammarAccess.getLemmaAccess().getExtraKeyword_2_0());
							}
							otherlv_15='invariant'
							{
								newLeafNode(otherlv_15, grammarAccess.getLemmaAccess().getInvariantKeyword_2_1());
							}
							otherlv_16='formulas'
							{
								newLeafNode(otherlv_16, grammarAccess.getLemmaAccess().getFormulasKeyword_2_2());
							}
							otherlv_17=':'
							{
								newLeafNode(otherlv_17, grammarAccess.getLemmaAccess().getColonKeyword_2_3());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getIfmVarsFormulaParameterParserRuleCall_2_4_0());
									}
									lv_ifmVars_18_0=ruleFormulaParameter
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										add(
											$current,
											"ifmVars",
											lv_ifmVars_18_0,
											"su.nsk.iae.rpl.RPL.FormulaParameter");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_19=','
								{
									newLeafNode(otherlv_19, grammarAccess.getLemmaAccess().getCommaKeyword_2_5_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getLemmaAccess().getIfmVarsFormulaParameterParserRuleCall_2_5_1_0());
										}
										lv_ifmVars_20_0=ruleFormulaParameter
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getLemmaRule());
											}
											add(
												$current,
												"ifmVars",
												lv_ifmVars_20_0,
												"su.nsk.iae.rpl.RPL.FormulaParameter");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 3);
				}
							({true}?=>(otherlv_21='requirement'
							{
								newLeafNode(otherlv_21, grammarAccess.getLemmaAccess().getRequirementKeyword_3_0());
							}
							otherlv_22='formulas'
							{
								newLeafNode(otherlv_22, grammarAccess.getLemmaAccess().getFormulasKeyword_3_1());
							}
							otherlv_23=':'
							{
								newLeafNode(otherlv_23, grammarAccess.getLemmaAccess().getColonKeyword_3_2());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getRfmVarsFormulaParameterParserRuleCall_3_3_0());
									}
									lv_rfmVars_24_0=ruleFormulaParameter
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										add(
											$current,
											"rfmVars",
											lv_rfmVars_24_0,
											"su.nsk.iae.rpl.RPL.FormulaParameter");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_25=','
								{
									newLeafNode(otherlv_25, grammarAccess.getLemmaAccess().getCommaKeyword_3_4_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getLemmaAccess().getRfmVarsFormulaParameterParserRuleCall_3_4_1_0());
										}
										lv_rfmVars_26_0=ruleFormulaParameter
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getLemmaRule());
											}
											add(
												$current,
												"rfmVars",
												lv_rfmVars_26_0,
												"su.nsk.iae.rpl.RPL.FormulaParameter");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 4);
				}
							({true}?=>(otherlv_27='init'
							{
								newLeafNode(otherlv_27, grammarAccess.getLemmaAccess().getInitKeyword_4_0());
							}
							otherlv_28='state'
							{
								newLeafNode(otherlv_28, grammarAccess.getLemmaAccess().getStateKeyword_4_1());
							}
							otherlv_29=':'
							{
								newLeafNode(otherlv_29, grammarAccess.getLemmaAccess().getColonKeyword_4_2());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getInitStateUpdateStateVariableParserRuleCall_4_3_0());
									}
									lv_initState_30_0=ruleUpdateStateVariable
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										set(
											$current,
											"initState",
											lv_initState_30_0,
											"su.nsk.iae.rpl.RPL.UpdateStateVariable");
										afterParserOrEnumRuleCall();
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 5)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 5);
				}
							({true}?=>(otherlv_31='final'
							{
								newLeafNode(otherlv_31, grammarAccess.getLemmaAccess().getFinalKeyword_5_0());
							}
							otherlv_32='state'
							{
								newLeafNode(otherlv_32, grammarAccess.getLemmaAccess().getStateKeyword_5_1());
							}
							otherlv_33=':'
							{
								newLeafNode(otherlv_33, grammarAccess.getLemmaAccess().getColonKeyword_5_2());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getFinalStateUpdateStateVariableParserRuleCall_5_3_0());
									}
									lv_finalState_34_0=ruleUpdateStateVariable
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										set(
											$current,
											"finalState",
											lv_finalState_34_0,
											"su.nsk.iae.rpl.RPL.UpdateStateVariable");
										afterParserOrEnumRuleCall();
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getLemmaAccess().getUnorderedGroup(), 6)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getLemmaAccess().getUnorderedGroup(), 6);
				}
							({true}?=>(otherlv_35='premise'
							{
								newLeafNode(otherlv_35, grammarAccess.getLemmaAccess().getPremiseKeyword_6_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getLemmaAccess().getPremLemmaPremiseFormulaParserRuleCall_6_1_0());
									}
									lv_prem_36_0=ruleLemmaPremiseFormula
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getLemmaRule());
										}
										set(
											$current,
											"prem",
											lv_prem_36_0,
											"su.nsk.iae.rpl.RPL.LemmaPremiseFormula");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_37='}'
							{
								newLeafNode(otherlv_37, grammarAccess.getLemmaAccess().getRightCurlyBracketKeyword_6_2());
							}
							otherlv_38=';'
							{
								newLeafNode(otherlv_38, grammarAccess.getLemmaAccess().getSemicolonKeyword_6_3());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLemmaAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getLemmaAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getLemmaAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleLemmaPremiseFormula
entryRuleLemmaPremiseFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLemmaPremiseFormulaRule()); }
	iv_ruleLemmaPremiseFormula=ruleLemmaPremiseFormula
	{ $current=$iv_ruleLemmaPremiseFormula.current; }
	EOF;

// Rule LemmaPremiseFormula
ruleLemmaPremiseFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLemmaPremiseFormulaAccess().getDisjunctionLemmaPremiseFormulaParserRuleCall_0());
		}
		this_DisjunctionLemmaPremiseFormula_0=ruleDisjunctionLemmaPremiseFormula
		{
			$current = $this_DisjunctionLemmaPremiseFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLemmaPremiseFormulaAccess().getLeftFunApplicationParserRuleCall_1_0_0());
					}
					lv_left_1_0=ruleFunApplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLemmaPremiseFormulaRule());
						}
						set(
							$current,
							"left",
							lv_left_1_0,
							"su.nsk.iae.rpl.RPL.FunApplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_IMPLICATION_2=RULE_IMPLICATION
			{
				newLeafNode(this_IMPLICATION_2, grammarAccess.getLemmaPremiseFormulaAccess().getIMPLICATIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLemmaPremiseFormulaAccess().getRightLemmaPremiseFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLemmaPremiseFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLemmaPremiseFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.LemmaPremiseFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDisjunctionLemmaPremiseFormula
entryRuleDisjunctionLemmaPremiseFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionLemmaPremiseFormulaRule()); }
	iv_ruleDisjunctionLemmaPremiseFormula=ruleDisjunctionLemmaPremiseFormula
	{ $current=$iv_ruleDisjunctionLemmaPremiseFormula.current; }
	EOF;

// Rule DisjunctionLemmaPremiseFormula
ruleDisjunctionLemmaPremiseFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDisjunctionLemmaPremiseFormulaAccess().getConjunctionLemmaPremiseFormulaParserRuleCall_0());
		}
		this_ConjunctionLemmaPremiseFormula_0=ruleConjunctionLemmaPremiseFormula
		{
			$current = $this_ConjunctionLemmaPremiseFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDisjunctionLemmaPremiseFormulaAccess().getDisjunctionLemmaPremiseFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_DISJUNCTION_2=RULE_DISJUNCTION
			{
				newLeafNode(this_DISJUNCTION_2, grammarAccess.getDisjunctionLemmaPremiseFormulaAccess().getDISJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDisjunctionLemmaPremiseFormulaAccess().getRightDisjunctionLemmaPremiseFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDisjunctionLemmaPremiseFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDisjunctionLemmaPremiseFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.DisjunctionLemmaPremiseFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionLemmaPremiseFormula
entryRuleConjunctionLemmaPremiseFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionLemmaPremiseFormulaRule()); }
	iv_ruleConjunctionLemmaPremiseFormula=ruleConjunctionLemmaPremiseFormula
	{ $current=$iv_ruleConjunctionLemmaPremiseFormula.current; }
	EOF;

// Rule ConjunctionLemmaPremiseFormula
ruleConjunctionLemmaPremiseFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctionLemmaPremiseFormulaAccess().getPrimaryLemmaPremiseFormulaParserRuleCall_0());
		}
		this_PrimaryLemmaPremiseFormula_0=rulePrimaryLemmaPremiseFormula
		{
			$current = $this_PrimaryLemmaPremiseFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConjunctionLemmaPremiseFormulaAccess().getConjunctionLemmaPremiseFormulaLeftAction_1_0(),
						$current);
				}
			)
			this_CONJUNCTION_2=RULE_CONJUNCTION
			{
				newLeafNode(this_CONJUNCTION_2, grammarAccess.getConjunctionLemmaPremiseFormulaAccess().getCONJUNCTIONTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionLemmaPremiseFormulaAccess().getRightConjunctionLemmaPremiseFormulaParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleConjunctionLemmaPremiseFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionLemmaPremiseFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.rpl.RPL.ConjunctionLemmaPremiseFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryLemmaPremiseFormula
entryRulePrimaryLemmaPremiseFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryLemmaPremiseFormulaRule()); }
	iv_rulePrimaryLemmaPremiseFormula=rulePrimaryLemmaPremiseFormula
	{ $current=$iv_rulePrimaryLemmaPremiseFormula.current; }
	EOF;

// Rule PrimaryLemmaPremiseFormula
rulePrimaryLemmaPremiseFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getAtomicNegationFormulaParserRuleCall_0_0());
				}
				lv_atomic_0_0=ruleNegationFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryLemmaPremiseFormulaRule());
					}
					set(
						$current,
						"atomic",
						lv_atomic_0_0,
						"su.nsk.iae.rpl.RPL.NegationFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getAlwaysImpAlwaysImplicationParserRuleCall_1_0());
				}
				lv_alwaysImp_1_0=ruleAlwaysImplication
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryLemmaPremiseFormulaRule());
					}
					set(
						$current,
						"alwaysImp",
						lv_alwaysImp_1_0,
						"su.nsk.iae.rpl.RPL.AlwaysImplication");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getInstPastExtraInvariantPatternInstanceParserRuleCall_2_0());
				}
				lv_inst_2_0=rulePastExtraInvariantPatternInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryLemmaPremiseFormulaRule());
					}
					set(
						$current,
						"inst",
						lv_inst_2_0,
						"su.nsk.iae.rpl.RPL.PastExtraInvariantPatternInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getNestedFormulaLemmaPremiseFormulaParserRuleCall_3_1_0());
					}
					lv_nestedFormula_4_0=ruleLemmaPremiseFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryLemmaPremiseFormulaRule());
						}
						set(
							$current,
							"nestedFormula",
							lv_nestedFormula_4_0,
							"su.nsk.iae.rpl.RPL.LemmaPremiseFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryLemmaPremiseFormulaAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleAlwaysImplication
entryRuleAlwaysImplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlwaysImplicationRule()); }
	iv_ruleAlwaysImplication=ruleAlwaysImplication
	{ $current=$iv_ruleAlwaysImplication.current; }
	EOF;

// Rule AlwaysImplication
ruleAlwaysImplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='alwaysimp'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlwaysImplicationAccess().getAlwaysimpKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAlwaysImplicationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlwaysImplicationRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAlwaysImplicationAccess().getStateUpdateStateVariableCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAlwaysImplicationAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlwaysImplicationAccess().getLeftAlwaysImplicationParameterValueParserRuleCall_4_0());
				}
				lv_left_4_0=ruleAlwaysImplicationParameterValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlwaysImplicationRule());
					}
					set(
						$current,
						"left",
						lv_left_4_0,
						"su.nsk.iae.rpl.RPL.AlwaysImplicationParameterValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getAlwaysImplicationAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlwaysImplicationAccess().getRightAlwaysImplicationParameterValueParserRuleCall_6_0());
				}
				lv_right_6_0=ruleAlwaysImplicationParameterValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlwaysImplicationRule());
					}
					set(
						$current,
						"right",
						lv_right_6_0,
						"su.nsk.iae.rpl.RPL.AlwaysImplicationParameterValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getAlwaysImplicationAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleAlwaysImplicationParameterValue
entryRuleAlwaysImplicationParameterValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlwaysImplicationParameterValueRule()); }
	iv_ruleAlwaysImplicationParameterValue=ruleAlwaysImplicationParameterValue
	{ $current=$iv_ruleAlwaysImplicationParameterValue.current; }
	EOF;

// Rule AlwaysImplicationParameterValue
ruleAlwaysImplicationParameterValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='lambda'
			{
				newLeafNode(otherlv_0, grammarAccess.getAlwaysImplicationParameterValueAccess().getLambdaKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlwaysImplicationParameterValueAccess().getStateUpdateStateVariableParserRuleCall_0_1_0());
					}
					lv_state_1_0=ruleUpdateStateVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlwaysImplicationParameterValueRule());
						}
						set(
							$current,
							"state",
							lv_state_1_0,
							"su.nsk.iae.rpl.RPL.UpdateStateVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getAlwaysImplicationParameterValueAccess().getFullStopKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlwaysImplicationParameterValueAccess().getFormulaNegationFormulaParserRuleCall_1_0());
				}
				lv_formula_3_0=ruleNegationFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlwaysImplicationParameterValueRule());
					}
					set(
						$current,
						"formula",
						lv_formula_3_0,
						"su.nsk.iae.rpl.RPL.NegationFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePastExtraInvariantPatternInstance
entryRulePastExtraInvariantPatternInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceRule()); }
	iv_rulePastExtraInvariantPatternInstance=rulePastExtraInvariantPatternInstance
	{ $current=$iv_rulePastExtraInvariantPatternInstance.current; }
	EOF;

// Rule PastExtraInvariantPatternInstance
rulePastExtraInvariantPatternInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPastExtraInvariantPatternInstanceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getPatternPastExtraInvariantPatternCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getLeftParenthesisKeyword_1());
		}
		(
			otherlv_2='const'
			{
				newLeafNode(otherlv_2, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getConstKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCParamsConstantParameterParserRuleCall_2_2_0());
					}
					lv_cParams_4_0=ruleConstantParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
						}
						add(
							$current,
							"cParams",
							lv_cParams_4_0,
							"su.nsk.iae.rpl.RPL.ConstantParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCParamsConstantParameterParserRuleCall_2_3_1_0());
						}
						lv_cParams_6_0=ruleConstantParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
							}
							add(
								$current,
								"cParams",
								lv_cParams_6_0,
								"su.nsk.iae.rpl.RPL.ConstantParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='fun'
			{
				newLeafNode(otherlv_7, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFunKeyword_3_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFnParamsFunctionalParameterParserRuleCall_3_2_0());
					}
					lv_fnParams_9_0=ruleFunctionalParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
						}
						add(
							$current,
							"fnParams",
							lv_fnParams_9_0,
							"su.nsk.iae.rpl.RPL.FunctionalParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFnParamsFunctionalParameterParserRuleCall_3_3_1_0());
						}
						lv_fnParams_11_0=ruleFunctionalParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
							}
							add(
								$current,
								"fnParams",
								lv_fnParams_11_0,
								"su.nsk.iae.rpl.RPL.FunctionalParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='formulas'
			{
				newLeafNode(otherlv_12, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFormulasKeyword_4_0());
			}
			otherlv_13=':'
			{
				newLeafNode(otherlv_13, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFmParamsFormulaParameterParserRuleCall_4_2_0());
					}
					lv_fmParams_14_0=ruleFormulaParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
						}
						add(
							$current,
							"fmParams",
							lv_fmParams_14_0,
							"su.nsk.iae.rpl.RPL.FormulaParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPastExtraInvariantPatternInstanceAccess().getFmParamsFormulaParameterParserRuleCall_4_3_1_0());
						}
						lv_fmParams_16_0=ruleFormulaParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPastExtraInvariantPatternInstanceRule());
							}
							add(
								$current,
								"fmParams",
								lv_fmParams_16_0,
								"su.nsk.iae.rpl.RPL.FormulaParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_17='current'
		{
			newLeafNode(otherlv_17, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getCurrentKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPastExtraInvariantPatternInstanceRule());
					}
				}
				otherlv_18=RULE_ID
				{
					newLeafNode(otherlv_18, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getStateUpdateStateVariableCrossReference_6_0());
				}
			)
		)
		otherlv_19=')'
		{
			newLeafNode(otherlv_19, grammarAccess.getPastExtraInvariantPatternInstanceAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Rule EqPredicate
ruleEqPredicate returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEqPredicateAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqPredicateAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='~='
			{
				$current = grammarAccess.getEqPredicateAccess().getNOT_EQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqPredicateAccess().getNOT_EQEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompPredicate
ruleCompPredicate returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getCompPredicateAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompPredicateAccess().getLESSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getCompPredicateAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompPredicateAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getCompPredicateAccess().getLESS_EQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompPredicateAccess().getLESS_EQEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getCompPredicateAccess().getGREATER_EQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompPredicateAccess().getGREATER_EQEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AddOperator
ruleAddOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAddOperatorAccess().getBMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddOperatorAccess().getBMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MulOperator
ruleMulOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='mod'
			{
				$current = grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule UnMinus
ruleUnMinus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='-'
		{
			$current = grammarAccess.getUnMinusAccess().getUNMINUSEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getUnMinusAccess().getUNMINUSEnumLiteralDeclaration());
		}
	)
;

RULE_DISJUNCTION : ('OR'|'||'|'\\/');

RULE_CONJUNCTION : ('AND'|'&'|'&&'|'/\\');

RULE_NEGATION : ('NOT'|'~');

RULE_POWER_OPERATOR : '**';

RULE_BOOLEAN_LITERAL : ('True'|'False');

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_DIGIT : '0'..'9';

RULE_REAL : RULE_INTEGER '.' RULE_INTEGER;

RULE_IMPLICATION : '-->';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
