/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.rpl.rPL.Constant;
import su.nsk.iae.rpl.rPL.FunApplication;
import su.nsk.iae.rpl.rPL.PrimaryTerm;
import su.nsk.iae.rpl.rPL.RPLPackage;
import su.nsk.iae.rpl.rPL.Term;
import su.nsk.iae.rpl.rPL.UpdateStateVariable;
import su.nsk.iae.rpl.rPL.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Primary Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryTermImpl#getConst <em>Const</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryTermImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryTermImpl#getState <em>State</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryTermImpl#getFunApp <em>Fun App</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryTermImpl#getNestedTerm <em>Nested Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PrimaryTermImpl extends UnaryTermImpl implements PrimaryTerm
{
  /**
   * The cached value of the '{@link #getConst() <em>Const</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected Constant const_;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable state;

  /**
   * The cached value of the '{@link #getFunApp() <em>Fun App</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunApp()
   * @generated
   * @ordered
   */
  protected FunApplication funApp;

  /**
   * The cached value of the '{@link #getNestedTerm() <em>Nested Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedTerm()
   * @generated
   * @ordered
   */
  protected Term nestedTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimaryTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.PRIMARY_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant getConst()
  {
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConst(Constant newConst, NotificationChain msgs)
  {
    Constant oldConst = const_;
    const_ = newConst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__CONST, oldConst, newConst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConst(Constant newConst)
  {
    if (newConst != const_)
    {
      NotificationChain msgs = null;
      if (const_ != null)
        msgs = ((InternalEObject)const_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__CONST, null, msgs);
      if (newConst != null)
        msgs = ((InternalEObject)newConst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__CONST, null, msgs);
      msgs = basicSetConst(newConst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__CONST, newConst, newConst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Variable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.PRIMARY_TERM__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getState()
  {
    if (state != null && state.eIsProxy())
    {
      InternalEObject oldState = (InternalEObject)state;
      state = (UpdateStateVariable)eResolveProxy(oldState);
      if (state != oldState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.PRIMARY_TERM__STATE, oldState, state));
      }
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateStateVariable basicGetState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState(UpdateStateVariable newState)
  {
    UpdateStateVariable oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunApplication getFunApp()
  {
    return funApp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunApp(FunApplication newFunApp, NotificationChain msgs)
  {
    FunApplication oldFunApp = funApp;
    funApp = newFunApp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__FUN_APP, oldFunApp, newFunApp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunApp(FunApplication newFunApp)
  {
    if (newFunApp != funApp)
    {
      NotificationChain msgs = null;
      if (funApp != null)
        msgs = ((InternalEObject)funApp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__FUN_APP, null, msgs);
      if (newFunApp != null)
        msgs = ((InternalEObject)newFunApp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__FUN_APP, null, msgs);
      msgs = basicSetFunApp(newFunApp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__FUN_APP, newFunApp, newFunApp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getNestedTerm()
  {
    return nestedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNestedTerm(Term newNestedTerm, NotificationChain msgs)
  {
    Term oldNestedTerm = nestedTerm;
    nestedTerm = newNestedTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__NESTED_TERM, oldNestedTerm, newNestedTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNestedTerm(Term newNestedTerm)
  {
    if (newNestedTerm != nestedTerm)
    {
      NotificationChain msgs = null;
      if (nestedTerm != null)
        msgs = ((InternalEObject)nestedTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__NESTED_TERM, null, msgs);
      if (newNestedTerm != null)
        msgs = ((InternalEObject)newNestedTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_TERM__NESTED_TERM, null, msgs);
      msgs = basicSetNestedTerm(newNestedTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_TERM__NESTED_TERM, newNestedTerm, newNestedTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_TERM__CONST:
        return basicSetConst(null, msgs);
      case RPLPackage.PRIMARY_TERM__FUN_APP:
        return basicSetFunApp(null, msgs);
      case RPLPackage.PRIMARY_TERM__NESTED_TERM:
        return basicSetNestedTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_TERM__CONST:
        return getConst();
      case RPLPackage.PRIMARY_TERM__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case RPLPackage.PRIMARY_TERM__STATE:
        if (resolve) return getState();
        return basicGetState();
      case RPLPackage.PRIMARY_TERM__FUN_APP:
        return getFunApp();
      case RPLPackage.PRIMARY_TERM__NESTED_TERM:
        return getNestedTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_TERM__CONST:
        setConst((Constant)newValue);
        return;
      case RPLPackage.PRIMARY_TERM__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case RPLPackage.PRIMARY_TERM__STATE:
        setState((UpdateStateVariable)newValue);
        return;
      case RPLPackage.PRIMARY_TERM__FUN_APP:
        setFunApp((FunApplication)newValue);
        return;
      case RPLPackage.PRIMARY_TERM__NESTED_TERM:
        setNestedTerm((Term)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_TERM__CONST:
        setConst((Constant)null);
        return;
      case RPLPackage.PRIMARY_TERM__VARIABLE:
        setVariable((Variable)null);
        return;
      case RPLPackage.PRIMARY_TERM__STATE:
        setState((UpdateStateVariable)null);
        return;
      case RPLPackage.PRIMARY_TERM__FUN_APP:
        setFunApp((FunApplication)null);
        return;
      case RPLPackage.PRIMARY_TERM__NESTED_TERM:
        setNestedTerm((Term)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_TERM__CONST:
        return const_ != null;
      case RPLPackage.PRIMARY_TERM__VARIABLE:
        return variable != null;
      case RPLPackage.PRIMARY_TERM__STATE:
        return state != null;
      case RPLPackage.PRIMARY_TERM__FUN_APP:
        return funApp != null;
      case RPLPackage.PRIMARY_TERM__NESTED_TERM:
        return nestedTerm != null;
    }
    return super.eIsSet(featureID);
  }

} //PrimaryTermImpl
