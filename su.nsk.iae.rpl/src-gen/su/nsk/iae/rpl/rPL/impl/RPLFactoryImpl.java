/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import su.nsk.iae.rpl.rPL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RPLFactoryImpl extends EFactoryImpl implements RPLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RPLFactory init()
  {
    try
    {
      RPLFactory theRPLFactory = (RPLFactory)EPackage.Registry.INSTANCE.getEFactory(RPLPackage.eNS_URI);
      if (theRPLFactory != null)
      {
        return theRPLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RPLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RPLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RPLPackage.MODEL: return createModel();
      case RPLPackage.IMPORT: return createImport();
      case RPLPackage.ELEMENT: return createElement();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN: return createBasicRequirementPattern();
      case RPLPackage.DERIVED_REQUIREMENT_PATTERN: return createDerivedRequirementPattern();
      case RPLPackage.VARIABLE: return createVariable();
      case RPLPackage.VAR_DECLARATION: return createVarDeclaration();
      case RPLPackage.PROGRAM_VARIABLE: return createProgramVariable();
      case RPLPackage.UPDATE_STATE_VARIABLE: return createUpdateStateVariable();
      case RPLPackage.CONSTANT_PARAMETER: return createConstantParameter();
      case RPLPackage.FORMULA_PARAMETER: return createFormulaParameter();
      case RPLPackage.SIMPLE_FORMULA_PARAMETER: return createSimpleFormulaParameter();
      case RPLPackage.REGULAR_FORMULA_PARAMETER: return createRegularFormulaParameter();
      case RPLPackage.FUNCTIONAL_PARAMETER: return createFunctionalParameter();
      case RPLPackage.FORMULA: return createFormula();
      case RPLPackage.CONJUNCTION_FORMULA: return createConjunctionFormula();
      case RPLPackage.PRIMARY_FORMULA: return createPrimaryFormula();
      case RPLPackage.OUTER_REQUIREMENT_PATTERN_INSTANCE: return createOuterRequirementPatternInstance();
      case RPLPackage.OUTER_REQUIREMENT_PATTERN: return createOuterRequirementPattern();
      case RPLPackage.FORMULA_PARAMETER_VALUE: return createFormulaParameterValue();
      case RPLPackage.INNER_FORMULA: return createInnerFormula();
      case RPLPackage.CONJUNCTION_INNER_FORMULA: return createConjunctionInnerFormula();
      case RPLPackage.PRIMARY_INNER_FORMULA: return createPrimaryInnerFormula();
      case RPLPackage.NEGATION_FORMULA: return createNegationFormula();
      case RPLPackage.ATOMIC_FORMULA: return createAtomicFormula();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE: return createBasicRequirementPatternInstance();
      case RPLPackage.FUTURE_REQUIREMENT_PATTERN: return createFutureRequirementPattern();
      case RPLPackage.PAST_REQUIREMENT_PATTERN: return createPastRequirementPattern();
      case RPLPackage.FUTURE_EXTRA_INVARIANT_PATTERN: return createFutureExtraInvariantPattern();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN: return createPastExtraInvariantPattern();
      case RPLPackage.DERIVED_EXTRA_INVARIANT_PATTERN: return createDerivedExtraInvariantPattern();
      case RPLPackage.TERM: return createTerm();
      case RPLPackage.CONJUNCTION_TERM: return createConjunctionTerm();
      case RPLPackage.NEGATION_TERM: return createNegationTerm();
      case RPLPackage.EQ_TERM: return createEqTerm();
      case RPLPackage.COMPARE_TERM: return createCompareTerm();
      case RPLPackage.ADD_TERM: return createAddTerm();
      case RPLPackage.MUL_TERM: return createMulTerm();
      case RPLPackage.POWER_TERM: return createPowerTerm();
      case RPLPackage.UNARY_TERM: return createUnaryTerm();
      case RPLPackage.PRIMARY_TERM: return createPrimaryTerm();
      case RPLPackage.FUN_APPLICATION: return createFunApplication();
      case RPLPackage.CONSTANT: return createConstant();
      case RPLPackage.NUMERIC_LITERAL: return createNumericLiteral();
      case RPLPackage.INTEGER_LITERAL: return createIntegerLiteral();
      case RPLPackage.REAL_LITERAL: return createRealLiteral();
      case RPLPackage.PATTERN_FREE_FORMULA: return createPatternFreeFormula();
      case RPLPackage.CONJUNCTION_PATTERN_FREE_FORMULA: return createConjunctionPatternFreeFormula();
      case RPLPackage.PRIMARY_PATTERN_FREE_FORMULA: return createPrimaryPatternFreeFormula();
      case RPLPackage.REQUIREMENT: return createRequirement();
      case RPLPackage.EXTRA_INVARIANT: return createExtraInvariant();
      case RPLPackage.PATTERN_FREE_FORMULA_PARAMETER_VALUE: return createPatternFreeFormulaParameterValue();
      case RPLPackage.FUTURE_LEMMAS: return createFutureLemmas();
      case RPLPackage.PAST_LEMMAS: return createPastLemmas();
      case RPLPackage.DERIVED_LEMMAS: return createDerivedLemmas();
      case RPLPackage.LEMMA: return createLemma();
      case RPLPackage.LEMMA_PREMISE_FORMULA: return createLemmaPremiseFormula();
      case RPLPackage.DISJUNCTION_LEMMA_PREMISE_FORMULA: return createDisjunctionLemmaPremiseFormula();
      case RPLPackage.CONJUNCTION_LEMMA_PREMISE_FORMULA: return createConjunctionLemmaPremiseFormula();
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA: return createPrimaryLemmaPremiseFormula();
      case RPLPackage.ALWAYS_IMPLICATION: return createAlwaysImplication();
      case RPLPackage.ALWAYS_IMPLICATION_PARAMETER_VALUE: return createAlwaysImplicationParameterValue();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE: return createPastExtraInvariantPatternInstance();
      case RPLPackage.CONJUNCTION: return createConjunction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RPLPackage.EQ_PREDICATE:
        return createEqPredicateFromString(eDataType, initialValue);
      case RPLPackage.COMP_PREDICATE:
        return createCompPredicateFromString(eDataType, initialValue);
      case RPLPackage.ADD_OPERATOR:
        return createAddOperatorFromString(eDataType, initialValue);
      case RPLPackage.MUL_OPERATOR:
        return createMulOperatorFromString(eDataType, initialValue);
      case RPLPackage.UN_MINUS:
        return createUnMinusFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RPLPackage.EQ_PREDICATE:
        return convertEqPredicateToString(eDataType, instanceValue);
      case RPLPackage.COMP_PREDICATE:
        return convertCompPredicateToString(eDataType, instanceValue);
      case RPLPackage.ADD_OPERATOR:
        return convertAddOperatorToString(eDataType, instanceValue);
      case RPLPackage.MUL_OPERATOR:
        return convertMulOperatorToString(eDataType, instanceValue);
      case RPLPackage.UN_MINUS:
        return convertUnMinusToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicRequirementPattern createBasicRequirementPattern()
  {
    BasicRequirementPatternImpl basicRequirementPattern = new BasicRequirementPatternImpl();
    return basicRequirementPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedRequirementPattern createDerivedRequirementPattern()
  {
    DerivedRequirementPatternImpl derivedRequirementPattern = new DerivedRequirementPatternImpl();
    return derivedRequirementPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgramVariable createProgramVariable()
  {
    ProgramVariableImpl programVariable = new ProgramVariableImpl();
    return programVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable createUpdateStateVariable()
  {
    UpdateStateVariableImpl updateStateVariable = new UpdateStateVariableImpl();
    return updateStateVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantParameter createConstantParameter()
  {
    ConstantParameterImpl constantParameter = new ConstantParameterImpl();
    return constantParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormulaParameter createFormulaParameter()
  {
    FormulaParameterImpl formulaParameter = new FormulaParameterImpl();
    return formulaParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleFormulaParameter createSimpleFormulaParameter()
  {
    SimpleFormulaParameterImpl simpleFormulaParameter = new SimpleFormulaParameterImpl();
    return simpleFormulaParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularFormulaParameter createRegularFormulaParameter()
  {
    RegularFormulaParameterImpl regularFormulaParameter = new RegularFormulaParameterImpl();
    return regularFormulaParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalParameter createFunctionalParameter()
  {
    FunctionalParameterImpl functionalParameter = new FunctionalParameterImpl();
    return functionalParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formula createFormula()
  {
    FormulaImpl formula = new FormulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctionFormula createConjunctionFormula()
  {
    ConjunctionFormulaImpl conjunctionFormula = new ConjunctionFormulaImpl();
    return conjunctionFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryFormula createPrimaryFormula()
  {
    PrimaryFormulaImpl primaryFormula = new PrimaryFormulaImpl();
    return primaryFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OuterRequirementPatternInstance createOuterRequirementPatternInstance()
  {
    OuterRequirementPatternInstanceImpl outerRequirementPatternInstance = new OuterRequirementPatternInstanceImpl();
    return outerRequirementPatternInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OuterRequirementPattern createOuterRequirementPattern()
  {
    OuterRequirementPatternImpl outerRequirementPattern = new OuterRequirementPatternImpl();
    return outerRequirementPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormulaParameterValue createFormulaParameterValue()
  {
    FormulaParameterValueImpl formulaParameterValue = new FormulaParameterValueImpl();
    return formulaParameterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerFormula createInnerFormula()
  {
    InnerFormulaImpl innerFormula = new InnerFormulaImpl();
    return innerFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctionInnerFormula createConjunctionInnerFormula()
  {
    ConjunctionInnerFormulaImpl conjunctionInnerFormula = new ConjunctionInnerFormulaImpl();
    return conjunctionInnerFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryInnerFormula createPrimaryInnerFormula()
  {
    PrimaryInnerFormulaImpl primaryInnerFormula = new PrimaryInnerFormulaImpl();
    return primaryInnerFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegationFormula createNegationFormula()
  {
    NegationFormulaImpl negationFormula = new NegationFormulaImpl();
    return negationFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicFormula createAtomicFormula()
  {
    AtomicFormulaImpl atomicFormula = new AtomicFormulaImpl();
    return atomicFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicRequirementPatternInstance createBasicRequirementPatternInstance()
  {
    BasicRequirementPatternInstanceImpl basicRequirementPatternInstance = new BasicRequirementPatternInstanceImpl();
    return basicRequirementPatternInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FutureRequirementPattern createFutureRequirementPattern()
  {
    FutureRequirementPatternImpl futureRequirementPattern = new FutureRequirementPatternImpl();
    return futureRequirementPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastRequirementPattern createPastRequirementPattern()
  {
    PastRequirementPatternImpl pastRequirementPattern = new PastRequirementPatternImpl();
    return pastRequirementPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FutureExtraInvariantPattern createFutureExtraInvariantPattern()
  {
    FutureExtraInvariantPatternImpl futureExtraInvariantPattern = new FutureExtraInvariantPatternImpl();
    return futureExtraInvariantPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastExtraInvariantPattern createPastExtraInvariantPattern()
  {
    PastExtraInvariantPatternImpl pastExtraInvariantPattern = new PastExtraInvariantPatternImpl();
    return pastExtraInvariantPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedExtraInvariantPattern createDerivedExtraInvariantPattern()
  {
    DerivedExtraInvariantPatternImpl derivedExtraInvariantPattern = new DerivedExtraInvariantPatternImpl();
    return derivedExtraInvariantPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctionTerm createConjunctionTerm()
  {
    ConjunctionTermImpl conjunctionTerm = new ConjunctionTermImpl();
    return conjunctionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegationTerm createNegationTerm()
  {
    NegationTermImpl negationTerm = new NegationTermImpl();
    return negationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqTerm createEqTerm()
  {
    EqTermImpl eqTerm = new EqTermImpl();
    return eqTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompareTerm createCompareTerm()
  {
    CompareTermImpl compareTerm = new CompareTermImpl();
    return compareTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddTerm createAddTerm()
  {
    AddTermImpl addTerm = new AddTermImpl();
    return addTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulTerm createMulTerm()
  {
    MulTermImpl mulTerm = new MulTermImpl();
    return mulTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PowerTerm createPowerTerm()
  {
    PowerTermImpl powerTerm = new PowerTermImpl();
    return powerTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryTerm createUnaryTerm()
  {
    UnaryTermImpl unaryTerm = new UnaryTermImpl();
    return unaryTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryTerm createPrimaryTerm()
  {
    PrimaryTermImpl primaryTerm = new PrimaryTermImpl();
    return primaryTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunApplication createFunApplication()
  {
    FunApplicationImpl funApplication = new FunApplicationImpl();
    return funApplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericLiteral createNumericLiteral()
  {
    NumericLiteralImpl numericLiteral = new NumericLiteralImpl();
    return numericLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerLiteral createIntegerLiteral()
  {
    IntegerLiteralImpl integerLiteral = new IntegerLiteralImpl();
    return integerLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternFreeFormula createPatternFreeFormula()
  {
    PatternFreeFormulaImpl patternFreeFormula = new PatternFreeFormulaImpl();
    return patternFreeFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctionPatternFreeFormula createConjunctionPatternFreeFormula()
  {
    ConjunctionPatternFreeFormulaImpl conjunctionPatternFreeFormula = new ConjunctionPatternFreeFormulaImpl();
    return conjunctionPatternFreeFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryPatternFreeFormula createPrimaryPatternFreeFormula()
  {
    PrimaryPatternFreeFormulaImpl primaryPatternFreeFormula = new PrimaryPatternFreeFormulaImpl();
    return primaryPatternFreeFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtraInvariant createExtraInvariant()
  {
    ExtraInvariantImpl extraInvariant = new ExtraInvariantImpl();
    return extraInvariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternFreeFormulaParameterValue createPatternFreeFormulaParameterValue()
  {
    PatternFreeFormulaParameterValueImpl patternFreeFormulaParameterValue = new PatternFreeFormulaParameterValueImpl();
    return patternFreeFormulaParameterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FutureLemmas createFutureLemmas()
  {
    FutureLemmasImpl futureLemmas = new FutureLemmasImpl();
    return futureLemmas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastLemmas createPastLemmas()
  {
    PastLemmasImpl pastLemmas = new PastLemmasImpl();
    return pastLemmas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedLemmas createDerivedLemmas()
  {
    DerivedLemmasImpl derivedLemmas = new DerivedLemmasImpl();
    return derivedLemmas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma createLemma()
  {
    LemmaImpl lemma = new LemmaImpl();
    return lemma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LemmaPremiseFormula createLemmaPremiseFormula()
  {
    LemmaPremiseFormulaImpl lemmaPremiseFormula = new LemmaPremiseFormulaImpl();
    return lemmaPremiseFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DisjunctionLemmaPremiseFormula createDisjunctionLemmaPremiseFormula()
  {
    DisjunctionLemmaPremiseFormulaImpl disjunctionLemmaPremiseFormula = new DisjunctionLemmaPremiseFormulaImpl();
    return disjunctionLemmaPremiseFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctionLemmaPremiseFormula createConjunctionLemmaPremiseFormula()
  {
    ConjunctionLemmaPremiseFormulaImpl conjunctionLemmaPremiseFormula = new ConjunctionLemmaPremiseFormulaImpl();
    return conjunctionLemmaPremiseFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryLemmaPremiseFormula createPrimaryLemmaPremiseFormula()
  {
    PrimaryLemmaPremiseFormulaImpl primaryLemmaPremiseFormula = new PrimaryLemmaPremiseFormulaImpl();
    return primaryLemmaPremiseFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlwaysImplication createAlwaysImplication()
  {
    AlwaysImplicationImpl alwaysImplication = new AlwaysImplicationImpl();
    return alwaysImplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlwaysImplicationParameterValue createAlwaysImplicationParameterValue()
  {
    AlwaysImplicationParameterValueImpl alwaysImplicationParameterValue = new AlwaysImplicationParameterValueImpl();
    return alwaysImplicationParameterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastExtraInvariantPatternInstance createPastExtraInvariantPatternInstance()
  {
    PastExtraInvariantPatternInstanceImpl pastExtraInvariantPatternInstance = new PastExtraInvariantPatternInstanceImpl();
    return pastExtraInvariantPatternInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conjunction createConjunction()
  {
    ConjunctionImpl conjunction = new ConjunctionImpl();
    return conjunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EqPredicate createEqPredicateFromString(EDataType eDataType, String initialValue)
  {
    EqPredicate result = EqPredicate.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEqPredicateToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompPredicate createCompPredicateFromString(EDataType eDataType, String initialValue)
  {
    CompPredicate result = CompPredicate.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCompPredicateToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AddOperator createAddOperatorFromString(EDataType eDataType, String initialValue)
  {
    AddOperator result = AddOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAddOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulOperator createMulOperatorFromString(EDataType eDataType, String initialValue)
  {
    MulOperator result = MulOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMulOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnMinus createUnMinusFromString(EDataType eDataType, String initialValue)
  {
    UnMinus result = UnMinus.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnMinusToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RPLPackage getRPLPackage()
  {
    return (RPLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RPLPackage getPackage()
  {
    return RPLPackage.eINSTANCE;
  }

} //RPLFactoryImpl
