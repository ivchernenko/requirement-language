/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import su.nsk.iae.rpl.rPL.Lemma;
import su.nsk.iae.rpl.rPL.PastLemmas;
import su.nsk.iae.rpl.rPL.RPLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Past Lemmas</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastLemmasImpl#getL4 <em>L4</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastLemmasImpl#getL5 <em>L5</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastLemmasImpl#getL6 <em>L6</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastLemmasImpl#getL7 <em>L7</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PastLemmasImpl extends MinimalEObjectImpl.Container implements PastLemmas
{
  /**
   * The cached value of the '{@link #getL4() <em>L4</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL4()
   * @generated
   * @ordered
   */
  protected Lemma l4;

  /**
   * The cached value of the '{@link #getL5() <em>L5</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL5()
   * @generated
   * @ordered
   */
  protected Lemma l5;

  /**
   * The cached value of the '{@link #getL6() <em>L6</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL6()
   * @generated
   * @ordered
   */
  protected Lemma l6;

  /**
   * The cached value of the '{@link #getL7() <em>L7</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL7()
   * @generated
   * @ordered
   */
  protected Lemma l7;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PastLemmasImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.PAST_LEMMAS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL4()
  {
    return l4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL4(Lemma newL4, NotificationChain msgs)
  {
    Lemma oldL4 = l4;
    l4 = newL4;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L4, oldL4, newL4);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL4(Lemma newL4)
  {
    if (newL4 != l4)
    {
      NotificationChain msgs = null;
      if (l4 != null)
        msgs = ((InternalEObject)l4).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L4, null, msgs);
      if (newL4 != null)
        msgs = ((InternalEObject)newL4).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L4, null, msgs);
      msgs = basicSetL4(newL4, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L4, newL4, newL4));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL5()
  {
    return l5;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL5(Lemma newL5, NotificationChain msgs)
  {
    Lemma oldL5 = l5;
    l5 = newL5;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L5, oldL5, newL5);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL5(Lemma newL5)
  {
    if (newL5 != l5)
    {
      NotificationChain msgs = null;
      if (l5 != null)
        msgs = ((InternalEObject)l5).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L5, null, msgs);
      if (newL5 != null)
        msgs = ((InternalEObject)newL5).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L5, null, msgs);
      msgs = basicSetL5(newL5, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L5, newL5, newL5));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL6()
  {
    return l6;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL6(Lemma newL6, NotificationChain msgs)
  {
    Lemma oldL6 = l6;
    l6 = newL6;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L6, oldL6, newL6);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL6(Lemma newL6)
  {
    if (newL6 != l6)
    {
      NotificationChain msgs = null;
      if (l6 != null)
        msgs = ((InternalEObject)l6).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L6, null, msgs);
      if (newL6 != null)
        msgs = ((InternalEObject)newL6).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L6, null, msgs);
      msgs = basicSetL6(newL6, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L6, newL6, newL6));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL7()
  {
    return l7;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL7(Lemma newL7, NotificationChain msgs)
  {
    Lemma oldL7 = l7;
    l7 = newL7;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L7, oldL7, newL7);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL7(Lemma newL7)
  {
    if (newL7 != l7)
    {
      NotificationChain msgs = null;
      if (l7 != null)
        msgs = ((InternalEObject)l7).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L7, null, msgs);
      if (newL7 != null)
        msgs = ((InternalEObject)newL7).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PAST_LEMMAS__L7, null, msgs);
      msgs = basicSetL7(newL7, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_LEMMAS__L7, newL7, newL7));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_LEMMAS__L4:
        return basicSetL4(null, msgs);
      case RPLPackage.PAST_LEMMAS__L5:
        return basicSetL5(null, msgs);
      case RPLPackage.PAST_LEMMAS__L6:
        return basicSetL6(null, msgs);
      case RPLPackage.PAST_LEMMAS__L7:
        return basicSetL7(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_LEMMAS__L4:
        return getL4();
      case RPLPackage.PAST_LEMMAS__L5:
        return getL5();
      case RPLPackage.PAST_LEMMAS__L6:
        return getL6();
      case RPLPackage.PAST_LEMMAS__L7:
        return getL7();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_LEMMAS__L4:
        setL4((Lemma)newValue);
        return;
      case RPLPackage.PAST_LEMMAS__L5:
        setL5((Lemma)newValue);
        return;
      case RPLPackage.PAST_LEMMAS__L6:
        setL6((Lemma)newValue);
        return;
      case RPLPackage.PAST_LEMMAS__L7:
        setL7((Lemma)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_LEMMAS__L4:
        setL4((Lemma)null);
        return;
      case RPLPackage.PAST_LEMMAS__L5:
        setL5((Lemma)null);
        return;
      case RPLPackage.PAST_LEMMAS__L6:
        setL6((Lemma)null);
        return;
      case RPLPackage.PAST_LEMMAS__L7:
        setL7((Lemma)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_LEMMAS__L4:
        return l4 != null;
      case RPLPackage.PAST_LEMMAS__L5:
        return l5 != null;
      case RPLPackage.PAST_LEMMAS__L6:
        return l6 != null;
      case RPLPackage.PAST_LEMMAS__L7:
        return l7 != null;
    }
    return super.eIsSet(featureID);
  }

} //PastLemmasImpl
