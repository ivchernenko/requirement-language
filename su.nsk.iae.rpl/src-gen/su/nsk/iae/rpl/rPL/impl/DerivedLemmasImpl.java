/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import su.nsk.iae.rpl.rPL.DerivedLemmas;
import su.nsk.iae.rpl.rPL.Lemma;
import su.nsk.iae.rpl.rPL.RPLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Derived Lemmas</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.DerivedLemmasImpl#getL8 <em>L8</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.DerivedLemmasImpl#getL9 <em>L9</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DerivedLemmasImpl extends MinimalEObjectImpl.Container implements DerivedLemmas
{
  /**
   * The cached value of the '{@link #getL8() <em>L8</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL8()
   * @generated
   * @ordered
   */
  protected Lemma l8;

  /**
   * The cached value of the '{@link #getL9() <em>L9</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL9()
   * @generated
   * @ordered
   */
  protected Lemma l9;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DerivedLemmasImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.DERIVED_LEMMAS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL8()
  {
    return l8;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL8(Lemma newL8, NotificationChain msgs)
  {
    Lemma oldL8 = l8;
    l8 = newL8;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.DERIVED_LEMMAS__L8, oldL8, newL8);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL8(Lemma newL8)
  {
    if (newL8 != l8)
    {
      NotificationChain msgs = null;
      if (l8 != null)
        msgs = ((InternalEObject)l8).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.DERIVED_LEMMAS__L8, null, msgs);
      if (newL8 != null)
        msgs = ((InternalEObject)newL8).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.DERIVED_LEMMAS__L8, null, msgs);
      msgs = basicSetL8(newL8, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.DERIVED_LEMMAS__L8, newL8, newL8));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lemma getL9()
  {
    return l9;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL9(Lemma newL9, NotificationChain msgs)
  {
    Lemma oldL9 = l9;
    l9 = newL9;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.DERIVED_LEMMAS__L9, oldL9, newL9);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL9(Lemma newL9)
  {
    if (newL9 != l9)
    {
      NotificationChain msgs = null;
      if (l9 != null)
        msgs = ((InternalEObject)l9).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.DERIVED_LEMMAS__L9, null, msgs);
      if (newL9 != null)
        msgs = ((InternalEObject)newL9).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.DERIVED_LEMMAS__L9, null, msgs);
      msgs = basicSetL9(newL9, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.DERIVED_LEMMAS__L9, newL9, newL9));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.DERIVED_LEMMAS__L8:
        return basicSetL8(null, msgs);
      case RPLPackage.DERIVED_LEMMAS__L9:
        return basicSetL9(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.DERIVED_LEMMAS__L8:
        return getL8();
      case RPLPackage.DERIVED_LEMMAS__L9:
        return getL9();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.DERIVED_LEMMAS__L8:
        setL8((Lemma)newValue);
        return;
      case RPLPackage.DERIVED_LEMMAS__L9:
        setL9((Lemma)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.DERIVED_LEMMAS__L8:
        setL8((Lemma)null);
        return;
      case RPLPackage.DERIVED_LEMMAS__L9:
        setL9((Lemma)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.DERIVED_LEMMAS__L8:
        return l8 != null;
      case RPLPackage.DERIVED_LEMMAS__L9:
        return l9 != null;
    }
    return super.eIsSet(featureID);
  }

} //DerivedLemmasImpl
