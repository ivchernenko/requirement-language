/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import su.nsk.iae.rpl.rPL.ConstantParameter;
import su.nsk.iae.rpl.rPL.FormulaParameter;
import su.nsk.iae.rpl.rPL.FunctionalParameter;
import su.nsk.iae.rpl.rPL.Lemma;
import su.nsk.iae.rpl.rPL.LemmaPremiseFormula;
import su.nsk.iae.rpl.rPL.RPLPackage;
import su.nsk.iae.rpl.rPL.UpdateStateVariable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Lemma</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getName <em>Name</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getCVars <em>CVars</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getFnVars <em>Fn Vars</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getIfmVars <em>Ifm Vars</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getRfmVars <em>Rfm Vars</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getInitState <em>Init State</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getFinalState <em>Final State</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.LemmaImpl#getPrem <em>Prem</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LemmaImpl extends MinimalEObjectImpl.Container implements Lemma
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCVars() <em>CVars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCVars()
   * @generated
   * @ordered
   */
  protected EList<ConstantParameter> cVars;

  /**
   * The cached value of the '{@link #getFnVars() <em>Fn Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFnVars()
   * @generated
   * @ordered
   */
  protected EList<FunctionalParameter> fnVars;

  /**
   * The cached value of the '{@link #getIfmVars() <em>Ifm Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfmVars()
   * @generated
   * @ordered
   */
  protected EList<FormulaParameter> ifmVars;

  /**
   * The cached value of the '{@link #getRfmVars() <em>Rfm Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRfmVars()
   * @generated
   * @ordered
   */
  protected EList<FormulaParameter> rfmVars;

  /**
   * The cached value of the '{@link #getInitState() <em>Init State</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable initState;

  /**
   * The cached value of the '{@link #getFinalState() <em>Final State</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinalState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable finalState;

  /**
   * The cached value of the '{@link #getPrem() <em>Prem</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrem()
   * @generated
   * @ordered
   */
  protected LemmaPremiseFormula prem;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LemmaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.LEMMA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstantParameter> getCVars()
  {
    if (cVars == null)
    {
      cVars = new EObjectContainmentEList<ConstantParameter>(ConstantParameter.class, this, RPLPackage.LEMMA__CVARS);
    }
    return cVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionalParameter> getFnVars()
  {
    if (fnVars == null)
    {
      fnVars = new EObjectContainmentEList<FunctionalParameter>(FunctionalParameter.class, this, RPLPackage.LEMMA__FN_VARS);
    }
    return fnVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FormulaParameter> getIfmVars()
  {
    if (ifmVars == null)
    {
      ifmVars = new EObjectContainmentEList<FormulaParameter>(FormulaParameter.class, this, RPLPackage.LEMMA__IFM_VARS);
    }
    return ifmVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FormulaParameter> getRfmVars()
  {
    if (rfmVars == null)
    {
      rfmVars = new EObjectContainmentEList<FormulaParameter>(FormulaParameter.class, this, RPLPackage.LEMMA__RFM_VARS);
    }
    return rfmVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getInitState()
  {
    return initState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitState(UpdateStateVariable newInitState, NotificationChain msgs)
  {
    UpdateStateVariable oldInitState = initState;
    initState = newInitState;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__INIT_STATE, oldInitState, newInitState);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitState(UpdateStateVariable newInitState)
  {
    if (newInitState != initState)
    {
      NotificationChain msgs = null;
      if (initState != null)
        msgs = ((InternalEObject)initState).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__INIT_STATE, null, msgs);
      if (newInitState != null)
        msgs = ((InternalEObject)newInitState).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__INIT_STATE, null, msgs);
      msgs = basicSetInitState(newInitState, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__INIT_STATE, newInitState, newInitState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getFinalState()
  {
    return finalState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFinalState(UpdateStateVariable newFinalState, NotificationChain msgs)
  {
    UpdateStateVariable oldFinalState = finalState;
    finalState = newFinalState;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__FINAL_STATE, oldFinalState, newFinalState);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFinalState(UpdateStateVariable newFinalState)
  {
    if (newFinalState != finalState)
    {
      NotificationChain msgs = null;
      if (finalState != null)
        msgs = ((InternalEObject)finalState).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__FINAL_STATE, null, msgs);
      if (newFinalState != null)
        msgs = ((InternalEObject)newFinalState).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__FINAL_STATE, null, msgs);
      msgs = basicSetFinalState(newFinalState, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__FINAL_STATE, newFinalState, newFinalState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LemmaPremiseFormula getPrem()
  {
    return prem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrem(LemmaPremiseFormula newPrem, NotificationChain msgs)
  {
    LemmaPremiseFormula oldPrem = prem;
    prem = newPrem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__PREM, oldPrem, newPrem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrem(LemmaPremiseFormula newPrem)
  {
    if (newPrem != prem)
    {
      NotificationChain msgs = null;
      if (prem != null)
        msgs = ((InternalEObject)prem).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__PREM, null, msgs);
      if (newPrem != null)
        msgs = ((InternalEObject)newPrem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.LEMMA__PREM, null, msgs);
      msgs = basicSetPrem(newPrem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.LEMMA__PREM, newPrem, newPrem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.LEMMA__CVARS:
        return ((InternalEList<?>)getCVars()).basicRemove(otherEnd, msgs);
      case RPLPackage.LEMMA__FN_VARS:
        return ((InternalEList<?>)getFnVars()).basicRemove(otherEnd, msgs);
      case RPLPackage.LEMMA__IFM_VARS:
        return ((InternalEList<?>)getIfmVars()).basicRemove(otherEnd, msgs);
      case RPLPackage.LEMMA__RFM_VARS:
        return ((InternalEList<?>)getRfmVars()).basicRemove(otherEnd, msgs);
      case RPLPackage.LEMMA__INIT_STATE:
        return basicSetInitState(null, msgs);
      case RPLPackage.LEMMA__FINAL_STATE:
        return basicSetFinalState(null, msgs);
      case RPLPackage.LEMMA__PREM:
        return basicSetPrem(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.LEMMA__NAME:
        return getName();
      case RPLPackage.LEMMA__CVARS:
        return getCVars();
      case RPLPackage.LEMMA__FN_VARS:
        return getFnVars();
      case RPLPackage.LEMMA__IFM_VARS:
        return getIfmVars();
      case RPLPackage.LEMMA__RFM_VARS:
        return getRfmVars();
      case RPLPackage.LEMMA__INIT_STATE:
        return getInitState();
      case RPLPackage.LEMMA__FINAL_STATE:
        return getFinalState();
      case RPLPackage.LEMMA__PREM:
        return getPrem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.LEMMA__NAME:
        setName((String)newValue);
        return;
      case RPLPackage.LEMMA__CVARS:
        getCVars().clear();
        getCVars().addAll((Collection<? extends ConstantParameter>)newValue);
        return;
      case RPLPackage.LEMMA__FN_VARS:
        getFnVars().clear();
        getFnVars().addAll((Collection<? extends FunctionalParameter>)newValue);
        return;
      case RPLPackage.LEMMA__IFM_VARS:
        getIfmVars().clear();
        getIfmVars().addAll((Collection<? extends FormulaParameter>)newValue);
        return;
      case RPLPackage.LEMMA__RFM_VARS:
        getRfmVars().clear();
        getRfmVars().addAll((Collection<? extends FormulaParameter>)newValue);
        return;
      case RPLPackage.LEMMA__INIT_STATE:
        setInitState((UpdateStateVariable)newValue);
        return;
      case RPLPackage.LEMMA__FINAL_STATE:
        setFinalState((UpdateStateVariable)newValue);
        return;
      case RPLPackage.LEMMA__PREM:
        setPrem((LemmaPremiseFormula)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.LEMMA__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RPLPackage.LEMMA__CVARS:
        getCVars().clear();
        return;
      case RPLPackage.LEMMA__FN_VARS:
        getFnVars().clear();
        return;
      case RPLPackage.LEMMA__IFM_VARS:
        getIfmVars().clear();
        return;
      case RPLPackage.LEMMA__RFM_VARS:
        getRfmVars().clear();
        return;
      case RPLPackage.LEMMA__INIT_STATE:
        setInitState((UpdateStateVariable)null);
        return;
      case RPLPackage.LEMMA__FINAL_STATE:
        setFinalState((UpdateStateVariable)null);
        return;
      case RPLPackage.LEMMA__PREM:
        setPrem((LemmaPremiseFormula)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.LEMMA__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RPLPackage.LEMMA__CVARS:
        return cVars != null && !cVars.isEmpty();
      case RPLPackage.LEMMA__FN_VARS:
        return fnVars != null && !fnVars.isEmpty();
      case RPLPackage.LEMMA__IFM_VARS:
        return ifmVars != null && !ifmVars.isEmpty();
      case RPLPackage.LEMMA__RFM_VARS:
        return rfmVars != null && !rfmVars.isEmpty();
      case RPLPackage.LEMMA__INIT_STATE:
        return initState != null;
      case RPLPackage.LEMMA__FINAL_STATE:
        return finalState != null;
      case RPLPackage.LEMMA__PREM:
        return prem != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //LemmaImpl
