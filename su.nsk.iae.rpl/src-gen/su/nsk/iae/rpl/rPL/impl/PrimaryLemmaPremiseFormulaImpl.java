/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.rpl.invpatterngenerator.LemmaPremise;
import su.nsk.iae.rpl.invpatterngenerator.LemmaPremiseInstanceCreator;
import su.nsk.iae.rpl.invpatterngenerator.ParameterValueMap;
import su.nsk.iae.rpl.rPL.AlwaysImplication;
import su.nsk.iae.rpl.rPL.LemmaPremiseFormula;
import su.nsk.iae.rpl.rPL.NegationFormula;
import su.nsk.iae.rpl.rPL.PastExtraInvariantPatternInstance;
import su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula;
import su.nsk.iae.rpl.rPL.RPLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Primary Lemma Premise Formula</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryLemmaPremiseFormulaImpl#getAtomic <em>Atomic</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryLemmaPremiseFormulaImpl#getAlwaysImp <em>Always Imp</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryLemmaPremiseFormulaImpl#getInst <em>Inst</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PrimaryLemmaPremiseFormulaImpl#getNestedFormula <em>Nested Formula</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PrimaryLemmaPremiseFormulaImpl extends ConjunctionLemmaPremiseFormulaImpl implements PrimaryLemmaPremiseFormula
{
  /**
   * The cached value of the '{@link #getAtomic() <em>Atomic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtomic()
   * @generated
   * @ordered
   */
  protected NegationFormula atomic;

  /**
   * The cached value of the '{@link #getAlwaysImp() <em>Always Imp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlwaysImp()
   * @generated
   * @ordered
   */
  protected AlwaysImplication alwaysImp;

  /**
   * The cached value of the '{@link #getInst() <em>Inst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInst()
   * @generated
   * @ordered
   */
  protected PastExtraInvariantPatternInstance inst;

  /**
   * The cached value of the '{@link #getNestedFormula() <em>Nested Formula</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedFormula()
   * @generated
   * @ordered
   */
  protected LemmaPremiseFormula nestedFormula;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimaryLemmaPremiseFormulaImpl()
  {
    super();
  }

  @Override
public LemmaPremise substitiuteParams(LemmaPremiseInstanceCreator instCreator, ParameterValueMap params) {
	return instCreator.substituteParams(this, params);
}

/**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.PRIMARY_LEMMA_PREMISE_FORMULA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegationFormula getAtomic()
  {
    return atomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtomic(NegationFormula newAtomic, NotificationChain msgs)
  {
    NegationFormula oldAtomic = atomic;
    atomic = newAtomic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC, oldAtomic, newAtomic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAtomic(NegationFormula newAtomic)
  {
    if (newAtomic != atomic)
    {
      NotificationChain msgs = null;
      if (atomic != null)
        msgs = ((InternalEObject)atomic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC, null, msgs);
      if (newAtomic != null)
        msgs = ((InternalEObject)newAtomic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC, null, msgs);
      msgs = basicSetAtomic(newAtomic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC, newAtomic, newAtomic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlwaysImplication getAlwaysImp()
  {
    return alwaysImp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlwaysImp(AlwaysImplication newAlwaysImp, NotificationChain msgs)
  {
    AlwaysImplication oldAlwaysImp = alwaysImp;
    alwaysImp = newAlwaysImp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP, oldAlwaysImp, newAlwaysImp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlwaysImp(AlwaysImplication newAlwaysImp)
  {
    if (newAlwaysImp != alwaysImp)
    {
      NotificationChain msgs = null;
      if (alwaysImp != null)
        msgs = ((InternalEObject)alwaysImp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP, null, msgs);
      if (newAlwaysImp != null)
        msgs = ((InternalEObject)newAlwaysImp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP, null, msgs);
      msgs = basicSetAlwaysImp(newAlwaysImp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP, newAlwaysImp, newAlwaysImp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastExtraInvariantPatternInstance getInst()
  {
    return inst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInst(PastExtraInvariantPatternInstance newInst, NotificationChain msgs)
  {
    PastExtraInvariantPatternInstance oldInst = inst;
    inst = newInst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST, oldInst, newInst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInst(PastExtraInvariantPatternInstance newInst)
  {
    if (newInst != inst)
    {
      NotificationChain msgs = null;
      if (inst != null)
        msgs = ((InternalEObject)inst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST, null, msgs);
      if (newInst != null)
        msgs = ((InternalEObject)newInst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST, null, msgs);
      msgs = basicSetInst(newInst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST, newInst, newInst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LemmaPremiseFormula getNestedFormula()
  {
    return nestedFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNestedFormula(LemmaPremiseFormula newNestedFormula, NotificationChain msgs)
  {
    LemmaPremiseFormula oldNestedFormula = nestedFormula;
    nestedFormula = newNestedFormula;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA, oldNestedFormula, newNestedFormula);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNestedFormula(LemmaPremiseFormula newNestedFormula)
  {
    if (newNestedFormula != nestedFormula)
    {
      NotificationChain msgs = null;
      if (nestedFormula != null)
        msgs = ((InternalEObject)nestedFormula).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA, null, msgs);
      if (newNestedFormula != null)
        msgs = ((InternalEObject)newNestedFormula).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA, null, msgs);
      msgs = basicSetNestedFormula(newNestedFormula, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA, newNestedFormula, newNestedFormula));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC:
        return basicSetAtomic(null, msgs);
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP:
        return basicSetAlwaysImp(null, msgs);
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST:
        return basicSetInst(null, msgs);
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA:
        return basicSetNestedFormula(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC:
        return getAtomic();
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP:
        return getAlwaysImp();
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST:
        return getInst();
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA:
        return getNestedFormula();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC:
        setAtomic((NegationFormula)newValue);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP:
        setAlwaysImp((AlwaysImplication)newValue);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST:
        setInst((PastExtraInvariantPatternInstance)newValue);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA:
        setNestedFormula((LemmaPremiseFormula)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC:
        setAtomic((NegationFormula)null);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP:
        setAlwaysImp((AlwaysImplication)null);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST:
        setInst((PastExtraInvariantPatternInstance)null);
        return;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA:
        setNestedFormula((LemmaPremiseFormula)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ATOMIC:
        return atomic != null;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__ALWAYS_IMP:
        return alwaysImp != null;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__INST:
        return inst != null;
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA__NESTED_FORMULA:
        return nestedFormula != null;
    }
    return super.eIsSet(featureID);
  }

} //PrimaryLemmaPremiseFormulaImpl
