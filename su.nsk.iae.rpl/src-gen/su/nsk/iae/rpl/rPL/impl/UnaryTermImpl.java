/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.rpl.invpatterngenerator.Term;
import su.nsk.iae.rpl.invpatterngenerator.TermConverter;
import su.nsk.iae.rpl.rPL.RPLPackage;
import su.nsk.iae.rpl.rPL.UnMinus;
import su.nsk.iae.rpl.rPL.UnaryTerm;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Unary Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.UnaryTermImpl#getUnOp <em>Un Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnaryTermImpl extends PowerTermImpl implements UnaryTerm
{
  /**
   * The default value of the '{@link #getUnOp() <em>Un Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnOp()
   * @generated
   * @ordered
   */
  protected static final UnMinus UN_OP_EDEFAULT = UnMinus.UNMINUS;

  /**
   * The cached value of the '{@link #getUnOp() <em>Un Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnOp()
   * @generated
   * @ordered
   */
  protected UnMinus unOp = UN_OP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnaryTermImpl()
  {
    super();
  }

  @Override
public Term convert(TermConverter converter) {
	return converter.convertTerm(this);
}

/**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.UNARY_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnMinus getUnOp()
  {
    return unOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnOp(UnMinus newUnOp)
  {
    UnMinus oldUnOp = unOp;
    unOp = newUnOp == null ? UN_OP_EDEFAULT : newUnOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.UNARY_TERM__UN_OP, oldUnOp, unOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.UNARY_TERM__UN_OP:
        return getUnOp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.UNARY_TERM__UN_OP:
        setUnOp((UnMinus)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.UNARY_TERM__UN_OP:
        setUnOp(UN_OP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.UNARY_TERM__UN_OP:
        return unOp != UN_OP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (unOp: ");
    result.append(unOp);
    result.append(')');
    return result.toString();
  }

} //UnaryTermImpl
