/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import su.nsk.iae.rpl.rPL.BasicRequirementPattern;
import su.nsk.iae.rpl.rPL.BasicRequirementPatternInstance;
import su.nsk.iae.rpl.rPL.FormulaParameterValue;
import su.nsk.iae.rpl.rPL.PatternFreeFormula;
import su.nsk.iae.rpl.rPL.RPLPackage;
import su.nsk.iae.rpl.rPL.Term;
import su.nsk.iae.rpl.rPL.UpdateStateVariable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Basic Requirement Pattern Instance</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getPattern <em>Pattern</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getCParams <em>CParams</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getSimpleFmParams <em>Simple Fm Params</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getFmParams <em>Fm Params</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getFinState <em>Fin State</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.BasicRequirementPatternInstanceImpl#getCurState <em>Cur State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BasicRequirementPatternInstanceImpl extends MinimalEObjectImpl.Container implements BasicRequirementPatternInstance
{
  /**
   * The cached value of the '{@link #getPattern() <em>Pattern</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected BasicRequirementPattern pattern;

  /**
   * The cached value of the '{@link #getCParams() <em>CParams</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCParams()
   * @generated
   * @ordered
   */
  protected EList<Term> cParams;

  /**
   * The cached value of the '{@link #getSimpleFmParams() <em>Simple Fm Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleFmParams()
   * @generated
   * @ordered
   */
  protected EList<PatternFreeFormula> simpleFmParams;

  /**
   * The cached value of the '{@link #getFmParams() <em>Fm Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFmParams()
   * @generated
   * @ordered
   */
  protected EList<FormulaParameterValue> fmParams;

  /**
   * The cached value of the '{@link #getFinState() <em>Fin State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable finState;

  /**
   * The cached value of the '{@link #getCurState() <em>Cur State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCurState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable curState;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BasicRequirementPatternInstanceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.BASIC_REQUIREMENT_PATTERN_INSTANCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicRequirementPattern getPattern()
  {
    if (pattern != null && pattern.eIsProxy())
    {
      InternalEObject oldPattern = (InternalEObject)pattern;
      pattern = (BasicRequirementPattern)eResolveProxy(oldPattern);
      if (pattern != oldPattern)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN, oldPattern, pattern));
      }
    }
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicRequirementPattern basicGetPattern()
  {
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPattern(BasicRequirementPattern newPattern)
  {
    BasicRequirementPattern oldPattern = pattern;
    pattern = newPattern;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN, oldPattern, pattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getCParams()
  {
    if (cParams == null)
    {
      cParams = new EObjectContainmentEList<Term>(Term.class, this, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS);
    }
    return cParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PatternFreeFormula> getSimpleFmParams()
  {
    if (simpleFmParams == null)
    {
      simpleFmParams = new EObjectContainmentEList<PatternFreeFormula>(PatternFreeFormula.class, this, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS);
    }
    return simpleFmParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FormulaParameterValue> getFmParams()
  {
    if (fmParams == null)
    {
      fmParams = new EObjectContainmentEList<FormulaParameterValue>(FormulaParameterValue.class, this, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS);
    }
    return fmParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getFinState()
  {
    if (finState != null && finState.eIsProxy())
    {
      InternalEObject oldFinState = (InternalEObject)finState;
      finState = (UpdateStateVariable)eResolveProxy(oldFinState);
      if (finState != oldFinState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE, oldFinState, finState));
      }
    }
    return finState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateStateVariable basicGetFinState()
  {
    return finState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFinState(UpdateStateVariable newFinState)
  {
    UpdateStateVariable oldFinState = finState;
    finState = newFinState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE, oldFinState, finState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getCurState()
  {
    if (curState != null && curState.eIsProxy())
    {
      InternalEObject oldCurState = (InternalEObject)curState;
      curState = (UpdateStateVariable)eResolveProxy(oldCurState);
      if (curState != oldCurState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE, oldCurState, curState));
      }
    }
    return curState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateStateVariable basicGetCurState()
  {
    return curState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCurState(UpdateStateVariable newCurState)
  {
    UpdateStateVariable oldCurState = curState;
    curState = newCurState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE, oldCurState, curState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS:
        return ((InternalEList<?>)getCParams()).basicRemove(otherEnd, msgs);
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS:
        return ((InternalEList<?>)getSimpleFmParams()).basicRemove(otherEnd, msgs);
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS:
        return ((InternalEList<?>)getFmParams()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN:
        if (resolve) return getPattern();
        return basicGetPattern();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS:
        return getCParams();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS:
        return getSimpleFmParams();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS:
        return getFmParams();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE:
        if (resolve) return getFinState();
        return basicGetFinState();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE:
        if (resolve) return getCurState();
        return basicGetCurState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN:
        setPattern((BasicRequirementPattern)newValue);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS:
        getCParams().clear();
        getCParams().addAll((Collection<? extends Term>)newValue);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS:
        getSimpleFmParams().clear();
        getSimpleFmParams().addAll((Collection<? extends PatternFreeFormula>)newValue);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS:
        getFmParams().clear();
        getFmParams().addAll((Collection<? extends FormulaParameterValue>)newValue);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE:
        setFinState((UpdateStateVariable)newValue);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE:
        setCurState((UpdateStateVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN:
        setPattern((BasicRequirementPattern)null);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS:
        getCParams().clear();
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS:
        getSimpleFmParams().clear();
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS:
        getFmParams().clear();
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE:
        setFinState((UpdateStateVariable)null);
        return;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE:
        setCurState((UpdateStateVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__PATTERN:
        return pattern != null;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CPARAMS:
        return cParams != null && !cParams.isEmpty();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__SIMPLE_FM_PARAMS:
        return simpleFmParams != null && !simpleFmParams.isEmpty();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FM_PARAMS:
        return fmParams != null && !fmParams.isEmpty();
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__FIN_STATE:
        return finState != null;
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE__CUR_STATE:
        return curState != null;
    }
    return super.eIsSet(featureID);
  }

} //BasicRequirementPatternInstanceImpl
