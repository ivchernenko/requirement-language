/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import su.nsk.iae.rpl.rPL.ConstantParameter;
import su.nsk.iae.rpl.rPL.FormulaParameter;
import su.nsk.iae.rpl.rPL.FunctionalParameter;
import su.nsk.iae.rpl.rPL.PastExtraInvariantPattern;
import su.nsk.iae.rpl.rPL.PastExtraInvariantPatternInstance;
import su.nsk.iae.rpl.rPL.RPLPackage;
import su.nsk.iae.rpl.rPL.UpdateStateVariable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Past Extra Invariant Pattern Instance</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastExtraInvariantPatternInstanceImpl#getPattern <em>Pattern</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastExtraInvariantPatternInstanceImpl#getCParams <em>CParams</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastExtraInvariantPatternInstanceImpl#getFnParams <em>Fn Params</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastExtraInvariantPatternInstanceImpl#getFmParams <em>Fm Params</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.impl.PastExtraInvariantPatternInstanceImpl#getState <em>State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PastExtraInvariantPatternInstanceImpl extends MinimalEObjectImpl.Container implements PastExtraInvariantPatternInstance
{
  /**
   * The cached value of the '{@link #getPattern() <em>Pattern</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected PastExtraInvariantPattern pattern;

  /**
   * The cached value of the '{@link #getCParams() <em>CParams</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCParams()
   * @generated
   * @ordered
   */
  protected EList<ConstantParameter> cParams;

  /**
   * The cached value of the '{@link #getFnParams() <em>Fn Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFnParams()
   * @generated
   * @ordered
   */
  protected EList<FunctionalParameter> fnParams;

  /**
   * The cached value of the '{@link #getFmParams() <em>Fm Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFmParams()
   * @generated
   * @ordered
   */
  protected EList<FormulaParameter> fmParams;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected UpdateStateVariable state;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PastExtraInvariantPatternInstanceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPLPackage.Literals.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PastExtraInvariantPattern getPattern()
  {
    if (pattern != null && pattern.eIsProxy())
    {
      InternalEObject oldPattern = (InternalEObject)pattern;
      pattern = (PastExtraInvariantPattern)eResolveProxy(oldPattern);
      if (pattern != oldPattern)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN, oldPattern, pattern));
      }
    }
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PastExtraInvariantPattern basicGetPattern()
  {
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPattern(PastExtraInvariantPattern newPattern)
  {
    PastExtraInvariantPattern oldPattern = pattern;
    pattern = newPattern;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN, oldPattern, pattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstantParameter> getCParams()
  {
    if (cParams == null)
    {
      cParams = new EObjectContainmentEList<ConstantParameter>(ConstantParameter.class, this, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS);
    }
    return cParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionalParameter> getFnParams()
  {
    if (fnParams == null)
    {
      fnParams = new EObjectContainmentEList<FunctionalParameter>(FunctionalParameter.class, this, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS);
    }
    return fnParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FormulaParameter> getFmParams()
  {
    if (fmParams == null)
    {
      fmParams = new EObjectContainmentEList<FormulaParameter>(FormulaParameter.class, this, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS);
    }
    return fmParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStateVariable getState()
  {
    if (state != null && state.eIsProxy())
    {
      InternalEObject oldState = (InternalEObject)state;
      state = (UpdateStateVariable)eResolveProxy(oldState);
      if (state != oldState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE, oldState, state));
      }
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateStateVariable basicGetState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState(UpdateStateVariable newState)
  {
    UpdateStateVariable oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS:
        return ((InternalEList<?>)getCParams()).basicRemove(otherEnd, msgs);
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS:
        return ((InternalEList<?>)getFnParams()).basicRemove(otherEnd, msgs);
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS:
        return ((InternalEList<?>)getFmParams()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN:
        if (resolve) return getPattern();
        return basicGetPattern();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS:
        return getCParams();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS:
        return getFnParams();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS:
        return getFmParams();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE:
        if (resolve) return getState();
        return basicGetState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN:
        setPattern((PastExtraInvariantPattern)newValue);
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS:
        getCParams().clear();
        getCParams().addAll((Collection<? extends ConstantParameter>)newValue);
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS:
        getFnParams().clear();
        getFnParams().addAll((Collection<? extends FunctionalParameter>)newValue);
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS:
        getFmParams().clear();
        getFmParams().addAll((Collection<? extends FormulaParameter>)newValue);
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE:
        setState((UpdateStateVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN:
        setPattern((PastExtraInvariantPattern)null);
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS:
        getCParams().clear();
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS:
        getFnParams().clear();
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS:
        getFmParams().clear();
        return;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE:
        setState((UpdateStateVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__PATTERN:
        return pattern != null;
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__CPARAMS:
        return cParams != null && !cParams.isEmpty();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FN_PARAMS:
        return fnParams != null && !fnParams.isEmpty();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__FM_PARAMS:
        return fmParams != null && !fmParams.isEmpty();
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE__STATE:
        return state != null;
    }
    return super.eIsSet(featureID);
  }

} //PastExtraInvariantPatternInstanceImpl
