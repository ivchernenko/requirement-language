/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import su.nsk.iae.rpl.rPL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see su.nsk.iae.rpl.rPL.RPLPackage
 * @generated
 */
public class RPLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RPLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RPLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = RPLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case RPLPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.BASIC_REQUIREMENT_PATTERN:
      {
        BasicRequirementPattern basicRequirementPattern = (BasicRequirementPattern)theEObject;
        T result = caseBasicRequirementPattern(basicRequirementPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.DERIVED_REQUIREMENT_PATTERN:
      {
        DerivedRequirementPattern derivedRequirementPattern = (DerivedRequirementPattern)theEObject;
        T result = caseDerivedRequirementPattern(derivedRequirementPattern);
        if (result == null) result = caseElement(derivedRequirementPattern);
        if (result == null) result = caseBasicRequirementPattern(derivedRequirementPattern);
        if (result == null) result = caseOuterRequirementPattern(derivedRequirementPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.VAR_DECLARATION:
      {
        VarDeclaration varDeclaration = (VarDeclaration)theEObject;
        T result = caseVarDeclaration(varDeclaration);
        if (result == null) result = caseElement(varDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PROGRAM_VARIABLE:
      {
        ProgramVariable programVariable = (ProgramVariable)theEObject;
        T result = caseProgramVariable(programVariable);
        if (result == null) result = caseVariable(programVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.UPDATE_STATE_VARIABLE:
      {
        UpdateStateVariable updateStateVariable = (UpdateStateVariable)theEObject;
        T result = caseUpdateStateVariable(updateStateVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONSTANT_PARAMETER:
      {
        ConstantParameter constantParameter = (ConstantParameter)theEObject;
        T result = caseConstantParameter(constantParameter);
        if (result == null) result = caseVariable(constantParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FORMULA_PARAMETER:
      {
        FormulaParameter formulaParameter = (FormulaParameter)theEObject;
        T result = caseFormulaParameter(formulaParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.SIMPLE_FORMULA_PARAMETER:
      {
        SimpleFormulaParameter simpleFormulaParameter = (SimpleFormulaParameter)theEObject;
        T result = caseSimpleFormulaParameter(simpleFormulaParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FUNCTIONAL_PARAMETER:
      {
        FunctionalParameter functionalParameter = (FunctionalParameter)theEObject;
        T result = caseFunctionalParameter(functionalParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FORMULA:
      {
        Formula formula = (Formula)theEObject;
        T result = caseFormula(formula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION_FORMULA:
      {
        ConjunctionFormula conjunctionFormula = (ConjunctionFormula)theEObject;
        T result = caseConjunctionFormula(conjunctionFormula);
        if (result == null) result = caseFormula(conjunctionFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PRIMARY_FORMULA:
      {
        PrimaryFormula primaryFormula = (PrimaryFormula)theEObject;
        T result = casePrimaryFormula(primaryFormula);
        if (result == null) result = caseConjunctionFormula(primaryFormula);
        if (result == null) result = caseFormula(primaryFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.OUTER_REQUIREMENT_PATTERN_INSTANCE:
      {
        OuterRequirementPatternInstance outerRequirementPatternInstance = (OuterRequirementPatternInstance)theEObject;
        T result = caseOuterRequirementPatternInstance(outerRequirementPatternInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.OUTER_REQUIREMENT_PATTERN:
      {
        OuterRequirementPattern outerRequirementPattern = (OuterRequirementPattern)theEObject;
        T result = caseOuterRequirementPattern(outerRequirementPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FORMULA_PARAMETER_VALUE:
      {
        FormulaParameterValue formulaParameterValue = (FormulaParameterValue)theEObject;
        T result = caseFormulaParameterValue(formulaParameterValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.INNER_FORMULA:
      {
        InnerFormula innerFormula = (InnerFormula)theEObject;
        T result = caseInnerFormula(innerFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION_INNER_FORMULA:
      {
        ConjunctionInnerFormula conjunctionInnerFormula = (ConjunctionInnerFormula)theEObject;
        T result = caseConjunctionInnerFormula(conjunctionInnerFormula);
        if (result == null) result = caseInnerFormula(conjunctionInnerFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PRIMARY_INNER_FORMULA:
      {
        PrimaryInnerFormula primaryInnerFormula = (PrimaryInnerFormula)theEObject;
        T result = casePrimaryInnerFormula(primaryInnerFormula);
        if (result == null) result = caseConjunctionInnerFormula(primaryInnerFormula);
        if (result == null) result = caseInnerFormula(primaryInnerFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.NEGATION_FORMULA:
      {
        NegationFormula negationFormula = (NegationFormula)theEObject;
        T result = caseNegationFormula(negationFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.ATOMIC_FORMULA:
      {
        AtomicFormula atomicFormula = (AtomicFormula)theEObject;
        T result = caseAtomicFormula(atomicFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.BASIC_REQUIREMENT_PATTERN_INSTANCE:
      {
        BasicRequirementPatternInstance basicRequirementPatternInstance = (BasicRequirementPatternInstance)theEObject;
        T result = caseBasicRequirementPatternInstance(basicRequirementPatternInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FUTURE_REQUIREMENT_PATTERN:
      {
        FutureRequirementPattern futureRequirementPattern = (FutureRequirementPattern)theEObject;
        T result = caseFutureRequirementPattern(futureRequirementPattern);
        if (result == null) result = caseElement(futureRequirementPattern);
        if (result == null) result = caseBasicRequirementPattern(futureRequirementPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PAST_REQUIREMENT_PATTERN:
      {
        PastRequirementPattern pastRequirementPattern = (PastRequirementPattern)theEObject;
        T result = casePastRequirementPattern(pastRequirementPattern);
        if (result == null) result = caseElement(pastRequirementPattern);
        if (result == null) result = caseBasicRequirementPattern(pastRequirementPattern);
        if (result == null) result = caseOuterRequirementPattern(pastRequirementPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FUTURE_EXTRA_INVARIANT_PATTERN:
      {
        FutureExtraInvariantPattern futureExtraInvariantPattern = (FutureExtraInvariantPattern)theEObject;
        T result = caseFutureExtraInvariantPattern(futureExtraInvariantPattern);
        if (result == null) result = caseElement(futureExtraInvariantPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN:
      {
        PastExtraInvariantPattern pastExtraInvariantPattern = (PastExtraInvariantPattern)theEObject;
        T result = casePastExtraInvariantPattern(pastExtraInvariantPattern);
        if (result == null) result = caseElement(pastExtraInvariantPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.DERIVED_EXTRA_INVARIANT_PATTERN:
      {
        DerivedExtraInvariantPattern derivedExtraInvariantPattern = (DerivedExtraInvariantPattern)theEObject;
        T result = caseDerivedExtraInvariantPattern(derivedExtraInvariantPattern);
        if (result == null) result = caseElement(derivedExtraInvariantPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.TERM:
      {
        Term term = (Term)theEObject;
        T result = caseTerm(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION_TERM:
      {
        ConjunctionTerm conjunctionTerm = (ConjunctionTerm)theEObject;
        T result = caseConjunctionTerm(conjunctionTerm);
        if (result == null) result = caseTerm(conjunctionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.NEGATION_TERM:
      {
        NegationTerm negationTerm = (NegationTerm)theEObject;
        T result = caseNegationTerm(negationTerm);
        if (result == null) result = caseConjunctionTerm(negationTerm);
        if (result == null) result = caseTerm(negationTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.EQ_TERM:
      {
        EqTerm eqTerm = (EqTerm)theEObject;
        T result = caseEqTerm(eqTerm);
        if (result == null) result = caseNegationTerm(eqTerm);
        if (result == null) result = caseConjunctionTerm(eqTerm);
        if (result == null) result = caseTerm(eqTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.COMPARE_TERM:
      {
        CompareTerm compareTerm = (CompareTerm)theEObject;
        T result = caseCompareTerm(compareTerm);
        if (result == null) result = caseEqTerm(compareTerm);
        if (result == null) result = caseNegationTerm(compareTerm);
        if (result == null) result = caseConjunctionTerm(compareTerm);
        if (result == null) result = caseTerm(compareTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.ADD_TERM:
      {
        AddTerm addTerm = (AddTerm)theEObject;
        T result = caseAddTerm(addTerm);
        if (result == null) result = caseCompareTerm(addTerm);
        if (result == null) result = caseEqTerm(addTerm);
        if (result == null) result = caseNegationTerm(addTerm);
        if (result == null) result = caseConjunctionTerm(addTerm);
        if (result == null) result = caseTerm(addTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.MUL_TERM:
      {
        MulTerm mulTerm = (MulTerm)theEObject;
        T result = caseMulTerm(mulTerm);
        if (result == null) result = caseAddTerm(mulTerm);
        if (result == null) result = caseCompareTerm(mulTerm);
        if (result == null) result = caseEqTerm(mulTerm);
        if (result == null) result = caseNegationTerm(mulTerm);
        if (result == null) result = caseConjunctionTerm(mulTerm);
        if (result == null) result = caseTerm(mulTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.POWER_TERM:
      {
        PowerTerm powerTerm = (PowerTerm)theEObject;
        T result = casePowerTerm(powerTerm);
        if (result == null) result = caseMulTerm(powerTerm);
        if (result == null) result = caseAddTerm(powerTerm);
        if (result == null) result = caseCompareTerm(powerTerm);
        if (result == null) result = caseEqTerm(powerTerm);
        if (result == null) result = caseNegationTerm(powerTerm);
        if (result == null) result = caseConjunctionTerm(powerTerm);
        if (result == null) result = caseTerm(powerTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.UNARY_TERM:
      {
        UnaryTerm unaryTerm = (UnaryTerm)theEObject;
        T result = caseUnaryTerm(unaryTerm);
        if (result == null) result = casePowerTerm(unaryTerm);
        if (result == null) result = caseMulTerm(unaryTerm);
        if (result == null) result = caseAddTerm(unaryTerm);
        if (result == null) result = caseCompareTerm(unaryTerm);
        if (result == null) result = caseEqTerm(unaryTerm);
        if (result == null) result = caseNegationTerm(unaryTerm);
        if (result == null) result = caseConjunctionTerm(unaryTerm);
        if (result == null) result = caseTerm(unaryTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PRIMARY_TERM:
      {
        PrimaryTerm primaryTerm = (PrimaryTerm)theEObject;
        T result = casePrimaryTerm(primaryTerm);
        if (result == null) result = caseUnaryTerm(primaryTerm);
        if (result == null) result = casePowerTerm(primaryTerm);
        if (result == null) result = caseMulTerm(primaryTerm);
        if (result == null) result = caseAddTerm(primaryTerm);
        if (result == null) result = caseCompareTerm(primaryTerm);
        if (result == null) result = caseEqTerm(primaryTerm);
        if (result == null) result = caseNegationTerm(primaryTerm);
        if (result == null) result = caseConjunctionTerm(primaryTerm);
        if (result == null) result = caseTerm(primaryTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FUN_APPLICATION:
      {
        FunApplication funApplication = (FunApplication)theEObject;
        T result = caseFunApplication(funApplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONSTANT:
      {
        Constant constant = (Constant)theEObject;
        T result = caseConstant(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.NUMERIC_LITERAL:
      {
        NumericLiteral numericLiteral = (NumericLiteral)theEObject;
        T result = caseNumericLiteral(numericLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.INTEGER_LITERAL:
      {
        IntegerLiteral integerLiteral = (IntegerLiteral)theEObject;
        T result = caseIntegerLiteral(integerLiteral);
        if (result == null) result = caseNumericLiteral(integerLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.REAL_LITERAL:
      {
        RealLiteral realLiteral = (RealLiteral)theEObject;
        T result = caseRealLiteral(realLiteral);
        if (result == null) result = caseNumericLiteral(realLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PATTERN_FREE_FORMULA:
      {
        PatternFreeFormula patternFreeFormula = (PatternFreeFormula)theEObject;
        T result = casePatternFreeFormula(patternFreeFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION_PATTERN_FREE_FORMULA:
      {
        ConjunctionPatternFreeFormula conjunctionPatternFreeFormula = (ConjunctionPatternFreeFormula)theEObject;
        T result = caseConjunctionPatternFreeFormula(conjunctionPatternFreeFormula);
        if (result == null) result = casePatternFreeFormula(conjunctionPatternFreeFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PRIMARY_PATTERN_FREE_FORMULA:
      {
        PrimaryPatternFreeFormula primaryPatternFreeFormula = (PrimaryPatternFreeFormula)theEObject;
        T result = casePrimaryPatternFreeFormula(primaryPatternFreeFormula);
        if (result == null) result = caseConjunctionPatternFreeFormula(primaryPatternFreeFormula);
        if (result == null) result = casePatternFreeFormula(primaryPatternFreeFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.REQUIREMENT:
      {
        Requirement requirement = (Requirement)theEObject;
        T result = caseRequirement(requirement);
        if (result == null) result = caseElement(requirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.EXTRA_INVARIANT:
      {
        ExtraInvariant extraInvariant = (ExtraInvariant)theEObject;
        T result = caseExtraInvariant(extraInvariant);
        if (result == null) result = caseElement(extraInvariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PATTERN_FREE_FORMULA_PARAMETER_VALUE:
      {
        PatternFreeFormulaParameterValue patternFreeFormulaParameterValue = (PatternFreeFormulaParameterValue)theEObject;
        T result = casePatternFreeFormulaParameterValue(patternFreeFormulaParameterValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.FUTURE_LEMMAS:
      {
        FutureLemmas futureLemmas = (FutureLemmas)theEObject;
        T result = caseFutureLemmas(futureLemmas);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PAST_LEMMAS:
      {
        PastLemmas pastLemmas = (PastLemmas)theEObject;
        T result = casePastLemmas(pastLemmas);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.DERIVED_LEMMAS:
      {
        DerivedLemmas derivedLemmas = (DerivedLemmas)theEObject;
        T result = caseDerivedLemmas(derivedLemmas);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.LEMMA:
      {
        Lemma lemma = (Lemma)theEObject;
        T result = caseLemma(lemma);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.LEMMA_PREMISE_FORMULA:
      {
        LemmaPremiseFormula lemmaPremiseFormula = (LemmaPremiseFormula)theEObject;
        T result = caseLemmaPremiseFormula(lemmaPremiseFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.DISJUNCTION_LEMMA_PREMISE_FORMULA:
      {
        DisjunctionLemmaPremiseFormula disjunctionLemmaPremiseFormula = (DisjunctionLemmaPremiseFormula)theEObject;
        T result = caseDisjunctionLemmaPremiseFormula(disjunctionLemmaPremiseFormula);
        if (result == null) result = caseLemmaPremiseFormula(disjunctionLemmaPremiseFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION_LEMMA_PREMISE_FORMULA:
      {
        ConjunctionLemmaPremiseFormula conjunctionLemmaPremiseFormula = (ConjunctionLemmaPremiseFormula)theEObject;
        T result = caseConjunctionLemmaPremiseFormula(conjunctionLemmaPremiseFormula);
        if (result == null) result = caseDisjunctionLemmaPremiseFormula(conjunctionLemmaPremiseFormula);
        if (result == null) result = caseLemmaPremiseFormula(conjunctionLemmaPremiseFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PRIMARY_LEMMA_PREMISE_FORMULA:
      {
        PrimaryLemmaPremiseFormula primaryLemmaPremiseFormula = (PrimaryLemmaPremiseFormula)theEObject;
        T result = casePrimaryLemmaPremiseFormula(primaryLemmaPremiseFormula);
        if (result == null) result = caseConjunctionLemmaPremiseFormula(primaryLemmaPremiseFormula);
        if (result == null) result = caseDisjunctionLemmaPremiseFormula(primaryLemmaPremiseFormula);
        if (result == null) result = caseLemmaPremiseFormula(primaryLemmaPremiseFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.ALWAYS_IMPLICATION:
      {
        AlwaysImplication alwaysImplication = (AlwaysImplication)theEObject;
        T result = caseAlwaysImplication(alwaysImplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.ALWAYS_IMPLICATION_PARAMETER_VALUE:
      {
        AlwaysImplicationParameterValue alwaysImplicationParameterValue = (AlwaysImplicationParameterValue)theEObject;
        T result = caseAlwaysImplicationParameterValue(alwaysImplicationParameterValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.PAST_EXTRA_INVARIANT_PATTERN_INSTANCE:
      {
        PastExtraInvariantPatternInstance pastExtraInvariantPatternInstance = (PastExtraInvariantPatternInstance)theEObject;
        T result = casePastExtraInvariantPatternInstance(pastExtraInvariantPatternInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RPLPackage.CONJUNCTION:
      {
        Conjunction conjunction = (Conjunction)theEObject;
        T result = caseConjunction(conjunction);
        if (result == null) result = caseConjunctionFormula(conjunction);
        if (result == null) result = caseFormula(conjunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Requirement Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Requirement Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicRequirementPattern(BasicRequirementPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Requirement Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Requirement Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedRequirementPattern(DerivedRequirementPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDeclaration(VarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgramVariable(ProgramVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update State Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update State Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateStateVariable(UpdateStateVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantParameter(ConstantParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formula Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formula Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormulaParameter(FormulaParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Formula Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Formula Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleFormulaParameter(SimpleFormulaParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalParameter(FunctionalParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormula(Formula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionFormula(ConjunctionFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryFormula(PrimaryFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outer Requirement Pattern Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outer Requirement Pattern Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOuterRequirementPatternInstance(OuterRequirementPatternInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outer Requirement Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outer Requirement Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOuterRequirementPattern(OuterRequirementPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formula Parameter Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formula Parameter Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormulaParameterValue(FormulaParameterValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inner Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inner Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInnerFormula(InnerFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Inner Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Inner Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionInnerFormula(ConjunctionInnerFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Inner Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Inner Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryInnerFormula(PrimaryInnerFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negation Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negation Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegationFormula(NegationFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicFormula(AtomicFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Requirement Pattern Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Requirement Pattern Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicRequirementPatternInstance(BasicRequirementPatternInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Future Requirement Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Future Requirement Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFutureRequirementPattern(FutureRequirementPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Past Requirement Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Past Requirement Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePastRequirementPattern(PastRequirementPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Future Extra Invariant Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Future Extra Invariant Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFutureExtraInvariantPattern(FutureExtraInvariantPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Past Extra Invariant Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Past Extra Invariant Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePastExtraInvariantPattern(PastExtraInvariantPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Extra Invariant Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Extra Invariant Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedExtraInvariantPattern(DerivedExtraInvariantPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerm(Term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionTerm(ConjunctionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negation Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negation Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegationTerm(NegationTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eq Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eq Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqTerm(EqTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareTerm(CompareTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddTerm(AddTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulTerm(MulTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerTerm(PowerTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryTerm(UnaryTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryTerm(PrimaryTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fun Application</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fun Application</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunApplication(FunApplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstant(Constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericLiteral(NumericLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerLiteral(IntegerLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealLiteral(RealLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Free Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Free Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternFreeFormula(PatternFreeFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Pattern Free Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Pattern Free Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionPatternFreeFormula(ConjunctionPatternFreeFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Pattern Free Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Pattern Free Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryPatternFreeFormula(PrimaryPatternFreeFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirement(Requirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extra Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extra Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtraInvariant(ExtraInvariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Free Formula Parameter Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Free Formula Parameter Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternFreeFormulaParameterValue(PatternFreeFormulaParameterValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Future Lemmas</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Future Lemmas</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFutureLemmas(FutureLemmas object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Past Lemmas</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Past Lemmas</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePastLemmas(PastLemmas object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Lemmas</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Lemmas</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedLemmas(DerivedLemmas object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lemma</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lemma</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLemma(Lemma object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lemma Premise Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lemma Premise Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLemmaPremiseFormula(LemmaPremiseFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Disjunction Lemma Premise Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Disjunction Lemma Premise Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisjunctionLemmaPremiseFormula(DisjunctionLemmaPremiseFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction Lemma Premise Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction Lemma Premise Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunctionLemmaPremiseFormula(ConjunctionLemmaPremiseFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Lemma Premise Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Lemma Premise Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryLemmaPremiseFormula(PrimaryLemmaPremiseFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Always Implication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Always Implication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlwaysImplication(AlwaysImplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Always Implication Parameter Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Always Implication Parameter Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlwaysImplicationParameterValue(AlwaysImplicationParameterValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Past Extra Invariant Pattern Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Past Extra Invariant Pattern Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePastExtraInvariantPatternInstance(PastExtraInvariantPatternInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunction(Conjunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //RPLSwitch
