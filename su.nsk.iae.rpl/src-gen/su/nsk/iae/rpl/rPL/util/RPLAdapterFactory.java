/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import su.nsk.iae.rpl.rPL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see su.nsk.iae.rpl.rPL.RPLPackage
 * @generated
 */
public class RPLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RPLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RPLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RPLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RPLSwitch<Adapter> modelSwitch =
    new RPLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseRequirementPattern(RequirementPattern object)
      {
        return createRequirementPatternAdapter();
      }
      @Override
      public Adapter caseDerivedRequirementPattern(DerivedRequirementPattern object)
      {
        return createDerivedRequirementPatternAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVarDeclaration(VarDeclaration object)
      {
        return createVarDeclarationAdapter();
      }
      @Override
      public Adapter caseProgramVariable(ProgramVariable object)
      {
        return createProgramVariableAdapter();
      }
      @Override
      public Adapter caseUpdateStateVariable(UpdateStateVariable object)
      {
        return createUpdateStateVariableAdapter();
      }
      @Override
      public Adapter caseConstantParameter(ConstantParameter object)
      {
        return createConstantParameterAdapter();
      }
      @Override
      public Adapter caseFormulaParameter(FormulaParameter object)
      {
        return createFormulaParameterAdapter();
      }
      @Override
      public Adapter caseFunctionalParameter(FunctionalParameter object)
      {
        return createFunctionalParameterAdapter();
      }
      @Override
      public Adapter caseFormula(Formula object)
      {
        return createFormulaAdapter();
      }
      @Override
      public Adapter caseConjunctionFormula(ConjunctionFormula object)
      {
        return createConjunctionFormulaAdapter();
      }
      @Override
      public Adapter casePrimaryFormula(PrimaryFormula object)
      {
        return createPrimaryFormulaAdapter();
      }
      @Override
      public Adapter caseFormulaParameterValue(FormulaParameterValue object)
      {
        return createFormulaParameterValueAdapter();
      }
      @Override
      public Adapter caseInnerFormula(InnerFormula object)
      {
        return createInnerFormulaAdapter();
      }
      @Override
      public Adapter caseConjunctionInnerFormula(ConjunctionInnerFormula object)
      {
        return createConjunctionInnerFormulaAdapter();
      }
      @Override
      public Adapter casePrimaryInnerFormula(PrimaryInnerFormula object)
      {
        return createPrimaryInnerFormulaAdapter();
      }
      @Override
      public Adapter caseNegationFormula(NegationFormula object)
      {
        return createNegationFormulaAdapter();
      }
      @Override
      public Adapter caseAtomicFormula(AtomicFormula object)
      {
        return createAtomicFormulaAdapter();
      }
      @Override
      public Adapter caseRequirementPatternInstance(RequirementPatternInstance object)
      {
        return createRequirementPatternInstanceAdapter();
      }
      @Override
      public Adapter caseFutureRequirementPattern(FutureRequirementPattern object)
      {
        return createFutureRequirementPatternAdapter();
      }
      @Override
      public Adapter casePastRequirementPattern(PastRequirementPattern object)
      {
        return createPastRequirementPatternAdapter();
      }
      @Override
      public Adapter caseFutureExtraInvariantPattern(FutureExtraInvariantPattern object)
      {
        return createFutureExtraInvariantPatternAdapter();
      }
      @Override
      public Adapter casePastExtraInvariantPattern(PastExtraInvariantPattern object)
      {
        return createPastExtraInvariantPatternAdapter();
      }
      @Override
      public Adapter caseDerivedExtraInvariantPattern(DerivedExtraInvariantPattern object)
      {
        return createDerivedExtraInvariantPatternAdapter();
      }
      @Override
      public Adapter caseTerm(Term object)
      {
        return createTermAdapter();
      }
      @Override
      public Adapter caseConjunctionTerm(ConjunctionTerm object)
      {
        return createConjunctionTermAdapter();
      }
      @Override
      public Adapter caseNegationTerm(NegationTerm object)
      {
        return createNegationTermAdapter();
      }
      @Override
      public Adapter caseEqTerm(EqTerm object)
      {
        return createEqTermAdapter();
      }
      @Override
      public Adapter caseCompareTerm(CompareTerm object)
      {
        return createCompareTermAdapter();
      }
      @Override
      public Adapter caseAddTerm(AddTerm object)
      {
        return createAddTermAdapter();
      }
      @Override
      public Adapter caseMulTerm(MulTerm object)
      {
        return createMulTermAdapter();
      }
      @Override
      public Adapter casePowerTerm(PowerTerm object)
      {
        return createPowerTermAdapter();
      }
      @Override
      public Adapter caseUnaryTerm(UnaryTerm object)
      {
        return createUnaryTermAdapter();
      }
      @Override
      public Adapter casePrimaryTerm(PrimaryTerm object)
      {
        return createPrimaryTermAdapter();
      }
      @Override
      public Adapter caseFunApplication(FunApplication object)
      {
        return createFunApplicationAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseNumericLiteral(NumericLiteral object)
      {
        return createNumericLiteralAdapter();
      }
      @Override
      public Adapter caseIntegerLiteral(IntegerLiteral object)
      {
        return createIntegerLiteralAdapter();
      }
      @Override
      public Adapter caseRealLiteral(RealLiteral object)
      {
        return createRealLiteralAdapter();
      }
      @Override
      public Adapter casePatternFreeFormula(PatternFreeFormula object)
      {
        return createPatternFreeFormulaAdapter();
      }
      @Override
      public Adapter caseConjunctionPatternFreeFormula(ConjunctionPatternFreeFormula object)
      {
        return createConjunctionPatternFreeFormulaAdapter();
      }
      @Override
      public Adapter casePrimaryPatternFreeFormula(PrimaryPatternFreeFormula object)
      {
        return createPrimaryPatternFreeFormulaAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseExtraInvariant(ExtraInvariant object)
      {
        return createExtraInvariantAdapter();
      }
      @Override
      public Adapter casePatternFreeFormulaParameterValue(PatternFreeFormulaParameterValue object)
      {
        return createPatternFreeFormulaParameterValueAdapter();
      }
      @Override
      public Adapter caseFutureLemmas(FutureLemmas object)
      {
        return createFutureLemmasAdapter();
      }
      @Override
      public Adapter casePastLemmas(PastLemmas object)
      {
        return createPastLemmasAdapter();
      }
      @Override
      public Adapter caseDerivedLemmas(DerivedLemmas object)
      {
        return createDerivedLemmasAdapter();
      }
      @Override
      public Adapter caseLemma(Lemma object)
      {
        return createLemmaAdapter();
      }
      @Override
      public Adapter caseLemmaPremiseFormula(LemmaPremiseFormula object)
      {
        return createLemmaPremiseFormulaAdapter();
      }
      @Override
      public Adapter caseDisjunctionLemmaPremiseFormula(DisjunctionLemmaPremiseFormula object)
      {
        return createDisjunctionLemmaPremiseFormulaAdapter();
      }
      @Override
      public Adapter caseConjunctionLemmaPremiseFormula(ConjunctionLemmaPremiseFormula object)
      {
        return createConjunctionLemmaPremiseFormulaAdapter();
      }
      @Override
      public Adapter casePrimaryLemmaPremiseFormula(PrimaryLemmaPremiseFormula object)
      {
        return createPrimaryLemmaPremiseFormulaAdapter();
      }
      @Override
      public Adapter caseAlwaysImplication(AlwaysImplication object)
      {
        return createAlwaysImplicationAdapter();
      }
      @Override
      public Adapter casePastExtraInvariantPatternInstance(PastExtraInvariantPatternInstance object)
      {
        return createPastExtraInvariantPatternInstanceAdapter();
      }
      @Override
      public Adapter caseConjunction(Conjunction object)
      {
        return createConjunctionAdapter();
      }
      @Override
      public Adapter caseConnunctionInnerFormula(ConnunctionInnerFormula object)
      {
        return createConnunctionInnerFormulaAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.RequirementPattern <em>Requirement Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.RequirementPattern
   * @generated
   */
  public Adapter createRequirementPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.DerivedRequirementPattern <em>Derived Requirement Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.DerivedRequirementPattern
   * @generated
   */
  public Adapter createDerivedRequirementPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.VarDeclaration <em>Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.VarDeclaration
   * @generated
   */
  public Adapter createVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ProgramVariable <em>Program Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ProgramVariable
   * @generated
   */
  public Adapter createProgramVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.UpdateStateVariable <em>Update State Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.UpdateStateVariable
   * @generated
   */
  public Adapter createUpdateStateVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConstantParameter <em>Constant Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConstantParameter
   * @generated
   */
  public Adapter createConstantParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FormulaParameter <em>Formula Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FormulaParameter
   * @generated
   */
  public Adapter createFormulaParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FunctionalParameter <em>Functional Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FunctionalParameter
   * @generated
   */
  public Adapter createFunctionalParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Formula <em>Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Formula
   * @generated
   */
  public Adapter createFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConjunctionFormula <em>Conjunction Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConjunctionFormula
   * @generated
   */
  public Adapter createConjunctionFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PrimaryFormula <em>Primary Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PrimaryFormula
   * @generated
   */
  public Adapter createPrimaryFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FormulaParameterValue <em>Formula Parameter Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FormulaParameterValue
   * @generated
   */
  public Adapter createFormulaParameterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.InnerFormula <em>Inner Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.InnerFormula
   * @generated
   */
  public Adapter createInnerFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConjunctionInnerFormula <em>Conjunction Inner Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConjunctionInnerFormula
   * @generated
   */
  public Adapter createConjunctionInnerFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PrimaryInnerFormula <em>Primary Inner Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PrimaryInnerFormula
   * @generated
   */
  public Adapter createPrimaryInnerFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.NegationFormula <em>Negation Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.NegationFormula
   * @generated
   */
  public Adapter createNegationFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.AtomicFormula <em>Atomic Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.AtomicFormula
   * @generated
   */
  public Adapter createAtomicFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.RequirementPatternInstance <em>Requirement Pattern Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.RequirementPatternInstance
   * @generated
   */
  public Adapter createRequirementPatternInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FutureRequirementPattern <em>Future Requirement Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FutureRequirementPattern
   * @generated
   */
  public Adapter createFutureRequirementPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PastRequirementPattern <em>Past Requirement Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PastRequirementPattern
   * @generated
   */
  public Adapter createPastRequirementPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FutureExtraInvariantPattern <em>Future Extra Invariant Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FutureExtraInvariantPattern
   * @generated
   */
  public Adapter createFutureExtraInvariantPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PastExtraInvariantPattern <em>Past Extra Invariant Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PastExtraInvariantPattern
   * @generated
   */
  public Adapter createPastExtraInvariantPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.DerivedExtraInvariantPattern <em>Derived Extra Invariant Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.DerivedExtraInvariantPattern
   * @generated
   */
  public Adapter createDerivedExtraInvariantPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Term <em>Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Term
   * @generated
   */
  public Adapter createTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConjunctionTerm <em>Conjunction Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConjunctionTerm
   * @generated
   */
  public Adapter createConjunctionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.NegationTerm <em>Negation Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.NegationTerm
   * @generated
   */
  public Adapter createNegationTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.EqTerm <em>Eq Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.EqTerm
   * @generated
   */
  public Adapter createEqTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.CompareTerm <em>Compare Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.CompareTerm
   * @generated
   */
  public Adapter createCompareTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.AddTerm <em>Add Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.AddTerm
   * @generated
   */
  public Adapter createAddTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.MulTerm <em>Mul Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.MulTerm
   * @generated
   */
  public Adapter createMulTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PowerTerm <em>Power Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PowerTerm
   * @generated
   */
  public Adapter createPowerTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.UnaryTerm <em>Unary Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.UnaryTerm
   * @generated
   */
  public Adapter createUnaryTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PrimaryTerm <em>Primary Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PrimaryTerm
   * @generated
   */
  public Adapter createPrimaryTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FunApplication <em>Fun Application</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FunApplication
   * @generated
   */
  public Adapter createFunApplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.NumericLiteral <em>Numeric Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.NumericLiteral
   * @generated
   */
  public Adapter createNumericLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.IntegerLiteral <em>Integer Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.IntegerLiteral
   * @generated
   */
  public Adapter createIntegerLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.RealLiteral <em>Real Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.RealLiteral
   * @generated
   */
  public Adapter createRealLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PatternFreeFormula <em>Pattern Free Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PatternFreeFormula
   * @generated
   */
  public Adapter createPatternFreeFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConjunctionPatternFreeFormula <em>Conjunction Pattern Free Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConjunctionPatternFreeFormula
   * @generated
   */
  public Adapter createConjunctionPatternFreeFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PrimaryPatternFreeFormula <em>Primary Pattern Free Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PrimaryPatternFreeFormula
   * @generated
   */
  public Adapter createPrimaryPatternFreeFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ExtraInvariant <em>Extra Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ExtraInvariant
   * @generated
   */
  public Adapter createExtraInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PatternFreeFormulaParameterValue <em>Pattern Free Formula Parameter Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PatternFreeFormulaParameterValue
   * @generated
   */
  public Adapter createPatternFreeFormulaParameterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.FutureLemmas <em>Future Lemmas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.FutureLemmas
   * @generated
   */
  public Adapter createFutureLemmasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PastLemmas <em>Past Lemmas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PastLemmas
   * @generated
   */
  public Adapter createPastLemmasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.DerivedLemmas <em>Derived Lemmas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.DerivedLemmas
   * @generated
   */
  public Adapter createDerivedLemmasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Lemma <em>Lemma</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Lemma
   * @generated
   */
  public Adapter createLemmaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.LemmaPremiseFormula <em>Lemma Premise Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.LemmaPremiseFormula
   * @generated
   */
  public Adapter createLemmaPremiseFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.DisjunctionLemmaPremiseFormula <em>Disjunction Lemma Premise Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.DisjunctionLemmaPremiseFormula
   * @generated
   */
  public Adapter createDisjunctionLemmaPremiseFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConjunctionLemmaPremiseFormula <em>Conjunction Lemma Premise Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConjunctionLemmaPremiseFormula
   * @generated
   */
  public Adapter createConjunctionLemmaPremiseFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula <em>Primary Lemma Premise Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula
   * @generated
   */
  public Adapter createPrimaryLemmaPremiseFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.AlwaysImplication <em>Always Implication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.AlwaysImplication
   * @generated
   */
  public Adapter createAlwaysImplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.PastExtraInvariantPatternInstance <em>Past Extra Invariant Pattern Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.PastExtraInvariantPatternInstance
   * @generated
   */
  public Adapter createPastExtraInvariantPatternInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.Conjunction <em>Conjunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.Conjunction
   * @generated
   */
  public Adapter createConjunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link su.nsk.iae.rpl.rPL.ConnunctionInnerFormula <em>Connunction Inner Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see su.nsk.iae.rpl.rPL.ConnunctionInnerFormula
   * @generated
   */
  public Adapter createConnunctionInnerFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RPLAdapterFactory
