/**
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.rPL;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Primary Lemma Premise Formula</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getAtomic <em>Atomic</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getAlwaysImp <em>Always Imp</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getInst <em>Inst</em>}</li>
 *   <li>{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getNestedFormula <em>Nested Formula</em>}</li>
 * </ul>
 *
 * @see su.nsk.iae.rpl.rPL.RPLPackage#getPrimaryLemmaPremiseFormula()
 * @model
 * @generated
 */
public interface PrimaryLemmaPremiseFormula extends ConjunctionLemmaPremiseFormula
{
  /**
   * Returns the value of the '<em><b>Atomic</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Atomic</em>' containment reference.
   * @see #setAtomic(NegationFormula)
   * @see su.nsk.iae.rpl.rPL.RPLPackage#getPrimaryLemmaPremiseFormula_Atomic()
   * @model containment="true"
   * @generated
   */
  NegationFormula getAtomic();

  /**
   * Sets the value of the '{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getAtomic <em>Atomic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Atomic</em>' containment reference.
   * @see #getAtomic()
   * @generated
   */
  void setAtomic(NegationFormula value);

  /**
   * Returns the value of the '<em><b>Always Imp</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Always Imp</em>' containment reference.
   * @see #setAlwaysImp(AlwaysImplication)
   * @see su.nsk.iae.rpl.rPL.RPLPackage#getPrimaryLemmaPremiseFormula_AlwaysImp()
   * @model containment="true"
   * @generated
   */
  AlwaysImplication getAlwaysImp();

  /**
   * Sets the value of the '{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getAlwaysImp <em>Always Imp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Always Imp</em>' containment reference.
   * @see #getAlwaysImp()
   * @generated
   */
  void setAlwaysImp(AlwaysImplication value);

  /**
   * Returns the value of the '<em><b>Inst</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Inst</em>' containment reference.
   * @see #setInst(PastExtraInvariantPatternInstance)
   * @see su.nsk.iae.rpl.rPL.RPLPackage#getPrimaryLemmaPremiseFormula_Inst()
   * @model containment="true"
   * @generated
   */
  PastExtraInvariantPatternInstance getInst();

  /**
   * Sets the value of the '{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getInst <em>Inst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Inst</em>' containment reference.
   * @see #getInst()
   * @generated
   */
  void setInst(PastExtraInvariantPatternInstance value);

  /**
   * Returns the value of the '<em><b>Nested Formula</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Nested Formula</em>' containment reference.
   * @see #setNestedFormula(LemmaPremiseFormula)
   * @see su.nsk.iae.rpl.rPL.RPLPackage#getPrimaryLemmaPremiseFormula_NestedFormula()
   * @model containment="true"
   * @generated
   */
  LemmaPremiseFormula getNestedFormula();

  /**
   * Sets the value of the '{@link su.nsk.iae.rpl.rPL.PrimaryLemmaPremiseFormula#getNestedFormula <em>Nested Formula</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Nested Formula</em>' containment reference.
   * @see #getNestedFormula()
   * @generated
   */
  void setNestedFormula(LemmaPremiseFormula value);

} // PrimaryLemmaPremiseFormula
