/*
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import su.nsk.iae.rpl.services.RPLGrammarAccess;

@SuppressWarnings("all")
public class RPLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RPLGrammarAccess grammarAccess;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RPLGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCONJUNCTIONRule())
			return getCONJUNCTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDISJUNCTIONRule())
			return getDISJUNCTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIMPLICATIONRule())
			return getIMPLICATIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEGATIONRule())
			return getNEGATIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPOWER_OPERATORRule())
			return getPOWER_OPERATORToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal CONJUNCTION:
	 * 	"AND" | "&" | "&&" | "/\\";
	 */
	protected String getCONJUNCTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "AND";
	}
	
	/**
	 * terminal DISJUNCTION:
	 * 	"OR" | "||" | "\\/";
	 */
	protected String getDISJUNCTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "OR";
	}
	
	/**
	 * terminal IMPLICATION:
	 * 	"-->";
	 */
	protected String getIMPLICATIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-->";
	}
	
	/**
	 * terminal NEGATION:
	 * 	"NOT" | "~";
	 */
	protected String getNEGATIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	/**
	 * terminal POWER_OPERATOR:
	 * 	"**";
	 */
	protected String getPOWER_OPERATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "**";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}
