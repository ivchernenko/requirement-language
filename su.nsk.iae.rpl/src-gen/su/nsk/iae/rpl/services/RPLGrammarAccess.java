/*
 * generated by Xtext 2.36.0
 */
package su.nsk.iae.rpl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RPLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//    (imports+=Import)*
		//    (elements+=Element)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(imports+=Import)*
		//(elements+=Element)*
		public Group getGroup() { return cGroup; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//(elements+=Element)*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//    "import" importURI=STRING ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"import" importURI=STRING ";"
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDerivedRequirementPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFutureRequirementPatternParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPastRequirementPatternParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDerivedExtraInvariantPatternParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFutureExtraInvariantPatternParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPastExtraInvariantPatternParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRequirementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExtraInvariantParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Element:
		//    VarDeclaration | DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern |
		//    DerivedExtraInvariantPattern | FutureExtraInvariantPattern | PastExtraInvariantPattern | Requirement | ExtraInvariant;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDeclaration | DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern |
		//DerivedExtraInvariantPattern | FutureExtraInvariantPattern | PastExtraInvariantPattern | Requirement | ExtraInvariant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0() { return cVarDeclarationParserRuleCall_0; }
		
		//DerivedRequirementPattern
		public RuleCall getDerivedRequirementPatternParserRuleCall_1() { return cDerivedRequirementPatternParserRuleCall_1; }
		
		//FutureRequirementPattern
		public RuleCall getFutureRequirementPatternParserRuleCall_2() { return cFutureRequirementPatternParserRuleCall_2; }
		
		//PastRequirementPattern
		public RuleCall getPastRequirementPatternParserRuleCall_3() { return cPastRequirementPatternParserRuleCall_3; }
		
		//DerivedExtraInvariantPattern
		public RuleCall getDerivedExtraInvariantPatternParserRuleCall_4() { return cDerivedExtraInvariantPatternParserRuleCall_4; }
		
		//FutureExtraInvariantPattern
		public RuleCall getFutureExtraInvariantPatternParserRuleCall_5() { return cFutureExtraInvariantPatternParserRuleCall_5; }
		
		//PastExtraInvariantPattern
		public RuleCall getPastExtraInvariantPatternParserRuleCall_6() { return cPastExtraInvariantPatternParserRuleCall_6; }
		
		//Requirement
		public RuleCall getRequirementParserRuleCall_7() { return cRequirementParserRuleCall_7; }
		
		//ExtraInvariant
		public RuleCall getExtraInvariantParserRuleCall_8() { return cExtraInvariantParserRuleCall_8; }
	}
	public class BasicRequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.BasicRequirementPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDerivedRequirementPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFutureRequirementPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPastRequirementPatternParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicRequirementPattern:
		//    DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern;
		@Override public ParserRule getRule() { return rule; }
		
		//DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DerivedRequirementPattern
		public RuleCall getDerivedRequirementPatternParserRuleCall_0() { return cDerivedRequirementPatternParserRuleCall_0; }
		
		//FutureRequirementPattern
		public RuleCall getFutureRequirementPatternParserRuleCall_1() { return cFutureRequirementPatternParserRuleCall_1; }
		
		//PastRequirementPattern
		public RuleCall getPastRequirementPatternParserRuleCall_2() { return cPastRequirementPatternParserRuleCall_2; }
	}
	public class DerivedRequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DerivedRequirementPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivedreqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFormulasKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFmParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_2_0 = (RuleCall)cFmParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_3_1_0 = (RuleCall)cFmParamsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cDefinitionFormulaParserRuleCall_7_0_1_0 = (RuleCall)cDefinitionAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cFromKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cFileAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cFileFilePathParserRuleCall_7_1_1_0 = (RuleCall)cFileAssignment_7_1_1.eContents().get(0);
		private final Keyword cWithKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Assignment cExtraInvPatternAssignment_7_1_3 = (Assignment)cGroup_7_1.eContents().get(3);
		private final CrossReference cExtraInvPatternDerivedExtraInvariantPatternCrossReference_7_1_3_0 = (CrossReference)cExtraInvPatternAssignment_7_1_3.eContents().get(0);
		private final RuleCall cExtraInvPatternDerivedExtraInvariantPatternIDTerminalRuleCall_7_1_3_0_1 = (RuleCall)cExtraInvPatternDerivedExtraInvariantPatternCrossReference_7_1_3_0.eContents().get(1);
		private final Assignment cLemmasAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLemmasDerivedLemmasParserRuleCall_8_0 = (RuleCall)cLemmasAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//    /* ======================= Derived requirement pattern ======================= */
		//DerivedRequirementPattern:
		//    'derivedreq' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)? ")"
		//   ("=" definition=Formula | "from" file=FilePath "with" extraInvPattern=[DerivedExtraInvariantPattern])
		//   (lemmas=DerivedLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		// 'derivedreq' 'pattern' name=ID '('
		// ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		// ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)? ")"
		//("=" definition=Formula | "from" file=FilePath "with" extraInvPattern=[DerivedExtraInvariantPattern])
		//(lemmas=DerivedLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'derivedreq'
		public Keyword getDerivedreqKeyword_0() { return cDerivedreqKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//("," cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"formulas"
		public Keyword getFormulasKeyword_5_0() { return cFormulasKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_2() { return cFmParamsAssignment_5_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_2_0() { return cFmParamsFormulaParameterParserRuleCall_5_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_3_1() { return cFmParamsAssignment_5_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_5_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//("=" definition=Formula | "from" file=FilePath "with" extraInvPattern=[DerivedExtraInvariantPattern])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//"=" definition=Formula
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_7_0_0() { return cEqualsSignKeyword_7_0_0; }
		
		//definition=Formula
		public Assignment getDefinitionAssignment_7_0_1() { return cDefinitionAssignment_7_0_1; }
		
		//Formula
		public RuleCall getDefinitionFormulaParserRuleCall_7_0_1_0() { return cDefinitionFormulaParserRuleCall_7_0_1_0; }
		
		//"from" file=FilePath "with" extraInvPattern=[DerivedExtraInvariantPattern]
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//"from"
		public Keyword getFromKeyword_7_1_0() { return cFromKeyword_7_1_0; }
		
		//file=FilePath
		public Assignment getFileAssignment_7_1_1() { return cFileAssignment_7_1_1; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_7_1_1_0() { return cFileFilePathParserRuleCall_7_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_7_1_2() { return cWithKeyword_7_1_2; }
		
		//extraInvPattern=[DerivedExtraInvariantPattern]
		public Assignment getExtraInvPatternAssignment_7_1_3() { return cExtraInvPatternAssignment_7_1_3; }
		
		//[DerivedExtraInvariantPattern]
		public CrossReference getExtraInvPatternDerivedExtraInvariantPatternCrossReference_7_1_3_0() { return cExtraInvPatternDerivedExtraInvariantPatternCrossReference_7_1_3_0; }
		
		//ID
		public RuleCall getExtraInvPatternDerivedExtraInvariantPatternIDTerminalRuleCall_7_1_3_0_1() { return cExtraInvPatternDerivedExtraInvariantPatternIDTerminalRuleCall_7_1_3_0_1; }
		
		//(lemmas=DerivedLemmas)?
		public Assignment getLemmasAssignment_8() { return cLemmasAssignment_8; }
		
		//DerivedLemmas
		public RuleCall getLemmasDerivedLemmasParserRuleCall_8_0() { return cLemmasDerivedLemmasParserRuleCall_8_0; }
		
		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//    ConstantParameter | ProgramVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstantParameter | ProgramVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstantParameter
		public RuleCall getConstantParameterParserRuleCall_0() { return cConstantParameterParserRuleCall_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_1() { return cProgramVariableParserRuleCall_1; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsProgramVariableParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarsProgramVariableParserRuleCall_2_1_0 = (RuleCall)cVarsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ======================= Variables ======================= */
		//VarDeclaration:
		//    "var" vars+=ProgramVariable ("," vars+=ProgramVariable)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" vars+=ProgramVariable ("," vars+=ProgramVariable)* ";"
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//vars+=ProgramVariable
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//ProgramVariable
		public RuleCall getVarsProgramVariableParserRuleCall_1_0() { return cVarsProgramVariableParserRuleCall_1_0; }
		
		//("," vars+=ProgramVariable)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//vars+=ProgramVariable
		public Assignment getVarsAssignment_2_1() { return cVarsAssignment_2_1; }
		
		//ProgramVariable
		public RuleCall getVarsProgramVariableParserRuleCall_2_1_0() { return cVarsProgramVariableParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ProgramVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ProgramVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProgramVariable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class UpdateStateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.UpdateStateVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UpdateStateVariable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstantParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConstantParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* ======================= Pattern parameters ======================= */
		//ConstantParameter:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FormulaParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FormulaParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormulaParameter:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FunctionalParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionalParameter:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDISJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///* ======================= Top-level formulas ======================= */
		//Formula:
		//    ConjunctionFormula ({Formula.left=current} DISJUNCTION right=Formula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjunctionFormula ({Formula.left=current} DISJUNCTION right=Formula)*
		public Group getGroup() { return cGroup; }
		
		//ConjunctionFormula
		public RuleCall getConjunctionFormulaParserRuleCall_0() { return cConjunctionFormulaParserRuleCall_0; }
		
		//({Formula.left=current} DISJUNCTION right=Formula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Formula.left=current}
		public Action getFormulaLeftAction_1_0() { return cFormulaLeftAction_1_0; }
		
		//DISJUNCTION
		public RuleCall getDISJUNCTIONTerminalRuleCall_1_1() { return cDISJUNCTIONTerminalRuleCall_1_1; }
		
		//right=Formula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Formula
		public RuleCall getRightFormulaParserRuleCall_1_2_0() { return cRightFormulaParserRuleCall_1_2_0; }
	}
	public class ConjunctionFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConjunctionFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjunctionFormula:
		//    PrimaryFormula ({Conjunction.left=current} CONJUNCTION right=ConjunctionFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryFormula ({Conjunction.left=current} CONJUNCTION right=ConjunctionFormula)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryFormula
		public RuleCall getPrimaryFormulaParserRuleCall_0() { return cPrimaryFormulaParserRuleCall_0; }
		
		//({Conjunction.left=current} CONJUNCTION right=ConjunctionFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_1_0() { return cConjunctionLeftAction_1_0; }
		
		//CONJUNCTION
		public RuleCall getCONJUNCTIONTerminalRuleCall_1_1() { return cCONJUNCTIONTerminalRuleCall_1_1; }
		
		//right=ConjunctionFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjunctionFormula
		public RuleCall getRightConjunctionFormulaParserRuleCall_1_2_0() { return cRightConjunctionFormulaParserRuleCall_1_2_0; }
	}
	public class PrimaryFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PrimaryFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPatternInstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPatternInstOuterRequirementPatternInstanceParserRuleCall_0_0 = (RuleCall)cPatternInstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNestedFormulaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNestedFormulaFormulaParserRuleCall_1_1_0 = (RuleCall)cNestedFormulaAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryFormula:
		//    patternInst=OuterRequirementPatternInstance | "(" nestedFormula=Formula ")";
		@Override public ParserRule getRule() { return rule; }
		
		//patternInst=OuterRequirementPatternInstance | "(" nestedFormula=Formula ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//patternInst=OuterRequirementPatternInstance
		public Assignment getPatternInstAssignment_0() { return cPatternInstAssignment_0; }
		
		//OuterRequirementPatternInstance
		public RuleCall getPatternInstOuterRequirementPatternInstanceParserRuleCall_0_0() { return cPatternInstOuterRequirementPatternInstanceParserRuleCall_0_0; }
		
		//"(" nestedFormula=Formula ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//nestedFormula=Formula
		public Assignment getNestedFormulaAssignment_1_1() { return cNestedFormulaAssignment_1_1; }
		
		//Formula
		public RuleCall getNestedFormulaFormulaParserRuleCall_1_1_0() { return cNestedFormulaFormulaParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class OuterRequirementPatternInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.OuterRequirementPatternInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPatternOuterRequirementPatternCrossReference_0_0 = (CrossReference)cPatternAssignment_0.eContents().get(0);
		private final RuleCall cPatternOuterRequirementPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cPatternOuterRequirementPatternCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCParamsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCParamsTermParserRuleCall_2_2_0 = (RuleCall)cCParamsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cCParamsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cCParamsTermParserRuleCall_2_3_1_0 = (RuleCall)cCParamsAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFormulasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFmParamsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterValueParserRuleCall_3_2_0 = (RuleCall)cFmParamsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterValueParserRuleCall_3_3_1_0 = (RuleCall)cFmParamsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFinalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFinStateAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFinStateUpdateStateVariableCrossReference_4_2_0 = (CrossReference)cFinStateAssignment_4_2.eContents().get(0);
		private final RuleCall cFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1 = (RuleCall)cFinStateUpdateStateVariableCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCurrentKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Keyword cColonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Assignment cCurStateAssignment_4_3_2 = (Assignment)cGroup_4_3.eContents().get(2);
		private final CrossReference cCurStateUpdateStateVariableCrossReference_4_3_2_0 = (CrossReference)cCurStateAssignment_4_3_2.eContents().get(0);
		private final RuleCall cCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1 = (RuleCall)cCurStateUpdateStateVariableCrossReference_4_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OuterRequirementPatternInstance:
		//    pattern=[OuterRequirementPattern] "("
		//    ("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		//      ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		//     ")";
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=[OuterRequirementPattern] "("
		//("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		//  ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		// ")"
		public Group getGroup() { return cGroup; }
		
		//pattern=[OuterRequirementPattern]
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//[OuterRequirementPattern]
		public CrossReference getPatternOuterRequirementPatternCrossReference_0_0() { return cPatternOuterRequirementPatternCrossReference_0_0; }
		
		//ID
		public RuleCall getPatternOuterRequirementPatternIDTerminalRuleCall_0_0_1() { return cPatternOuterRequirementPatternIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//("const" ":" cParams+=Term ("," cParams+=Term)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"const"
		public Keyword getConstKeyword_2_0() { return cConstKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_2() { return cCParamsAssignment_2_2; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_2_0() { return cCParamsTermParserRuleCall_2_2_0; }
		
		//("," cParams+=Term)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_3_1() { return cCParamsAssignment_2_3_1; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_3_1_0() { return cCParamsTermParserRuleCall_2_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"formulas"
		public Keyword getFormulasKeyword_3_0() { return cFormulasKeyword_3_0; }
		
		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//fmParams+=FormulaParameterValue
		public Assignment getFmParamsAssignment_3_2() { return cFmParamsAssignment_3_2; }
		
		//FormulaParameterValue
		public RuleCall getFmParamsFormulaParameterValueParserRuleCall_3_2_0() { return cFmParamsFormulaParameterValueParserRuleCall_3_2_0; }
		
		//("," fmParams+=FormulaParameterValue)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//fmParams+=FormulaParameterValue
		public Assignment getFmParamsAssignment_3_3_1() { return cFmParamsAssignment_3_3_1; }
		
		//FormulaParameterValue
		public RuleCall getFmParamsFormulaParameterValueParserRuleCall_3_3_1_0() { return cFmParamsFormulaParameterValueParserRuleCall_3_3_1_0; }
		
		//("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"final"
		public Keyword getFinalKeyword_4_0() { return cFinalKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//finState=[UpdateStateVariable]
		public Assignment getFinStateAssignment_4_2() { return cFinStateAssignment_4_2; }
		
		//[UpdateStateVariable]
		public CrossReference getFinStateUpdateStateVariableCrossReference_4_2_0() { return cFinStateUpdateStateVariableCrossReference_4_2_0; }
		
		//ID
		public RuleCall getFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1() { return cFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1; }
		
		//("current" ":" curState=[UpdateStateVariable])?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//"current"
		public Keyword getCurrentKeyword_4_3_0() { return cCurrentKeyword_4_3_0; }
		
		//":"
		public Keyword getColonKeyword_4_3_1() { return cColonKeyword_4_3_1; }
		
		//curState=[UpdateStateVariable]
		public Assignment getCurStateAssignment_4_3_2() { return cCurStateAssignment_4_3_2; }
		
		//[UpdateStateVariable]
		public CrossReference getCurStateUpdateStateVariableCrossReference_4_3_2_0() { return cCurStateUpdateStateVariableCrossReference_4_3_2_0; }
		
		//ID
		public RuleCall getCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1() { return cCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OuterRequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.OuterRequirementPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDerivedRequirementPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPastRequirementPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OuterRequirementPattern:
		//    DerivedRequirementPattern | PastRequirementPattern;
		@Override public ParserRule getRule() { return rule; }
		
		//DerivedRequirementPattern | PastRequirementPattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DerivedRequirementPattern
		public RuleCall getDerivedRequirementPatternParserRuleCall_0() { return cDerivedRequirementPatternParserRuleCall_0; }
		
		//PastRequirementPattern
		public RuleCall getPastRequirementPatternParserRuleCall_1() { return cPastRequirementPatternParserRuleCall_1; }
	}
	public class FormulaParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FormulaParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLambdaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStatesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStatesUpdateStateVariableParserRuleCall_0_1_0 = (RuleCall)cStatesAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaInnerFormulaParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		///* ======================= Inner formulas ======================= */
		//FormulaParameterValue:
		//    ("lambda" (states+=UpdateStateVariable)+ ".")? formula=InnerFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//("lambda" (states+=UpdateStateVariable)+ ".")? formula=InnerFormula
		public Group getGroup() { return cGroup; }
		
		//("lambda" (states+=UpdateStateVariable)+ ".")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"lambda"
		public Keyword getLambdaKeyword_0_0() { return cLambdaKeyword_0_0; }
		
		//(states+=UpdateStateVariable)+
		public Assignment getStatesAssignment_0_1() { return cStatesAssignment_0_1; }
		
		//UpdateStateVariable
		public RuleCall getStatesUpdateStateVariableParserRuleCall_0_1_0() { return cStatesUpdateStateVariableParserRuleCall_0_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//formula=InnerFormula
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }
		
		//InnerFormula
		public RuleCall getFormulaInnerFormulaParserRuleCall_1_0() { return cFormulaInnerFormulaParserRuleCall_1_0; }
	}
	public class InnerFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.InnerFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionInnerFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cInnerFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDISJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightInnerFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//InnerFormula:
		//    ConjunctionInnerFormula ({InnerFormula.left=current} DISJUNCTION right=InnerFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjunctionInnerFormula ({InnerFormula.left=current} DISJUNCTION right=InnerFormula)*
		public Group getGroup() { return cGroup; }
		
		//ConjunctionInnerFormula
		public RuleCall getConjunctionInnerFormulaParserRuleCall_0() { return cConjunctionInnerFormulaParserRuleCall_0; }
		
		//({InnerFormula.left=current} DISJUNCTION right=InnerFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{InnerFormula.left=current}
		public Action getInnerFormulaLeftAction_1_0() { return cInnerFormulaLeftAction_1_0; }
		
		//DISJUNCTION
		public RuleCall getDISJUNCTIONTerminalRuleCall_1_1() { return cDISJUNCTIONTerminalRuleCall_1_1; }
		
		//right=InnerFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//InnerFormula
		public RuleCall getRightInnerFormulaParserRuleCall_1_2_0() { return cRightInnerFormulaParserRuleCall_1_2_0; }
	}
	public class ConjunctionInnerFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConjunctionInnerFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryInnerFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConnunctionInnerFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionInnerFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjunctionInnerFormula:
		//    PrimaryInnerFormula ({ConnunctionInnerFormula.left=current} CONJUNCTION right=ConjunctionInnerFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryInnerFormula ({ConnunctionInnerFormula.left=current} CONJUNCTION right=ConjunctionInnerFormula)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryInnerFormula
		public RuleCall getPrimaryInnerFormulaParserRuleCall_0() { return cPrimaryInnerFormulaParserRuleCall_0; }
		
		//({ConnunctionInnerFormula.left=current} CONJUNCTION right=ConjunctionInnerFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConnunctionInnerFormula.left=current}
		public Action getConnunctionInnerFormulaLeftAction_1_0() { return cConnunctionInnerFormulaLeftAction_1_0; }
		
		//CONJUNCTION
		public RuleCall getCONJUNCTIONTerminalRuleCall_1_1() { return cCONJUNCTIONTerminalRuleCall_1_1; }
		
		//right=ConjunctionInnerFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjunctionInnerFormula
		public RuleCall getRightConjunctionInnerFormulaParserRuleCall_1_2_0() { return cRightConjunctionInnerFormulaParserRuleCall_1_2_0; }
	}
	public class PrimaryInnerFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PrimaryInnerFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicNegationFormulaParserRuleCall_0_0 = (RuleCall)cAtomicAssignment_0.eContents().get(0);
		private final Assignment cPatternInstAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPatternInstBasicRequirementPatternInstanceParserRuleCall_1_0 = (RuleCall)cPatternInstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNestedFormulaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNestedFormulaInnerFormulaParserRuleCall_2_1_0 = (RuleCall)cNestedFormulaAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryInnerFormula:
		//    atomic=NegationFormula | patternInst=BasicRequirementPatternInstance | "(" nestedFormula=InnerFormula ")";
		@Override public ParserRule getRule() { return rule; }
		
		//atomic=NegationFormula | patternInst=BasicRequirementPatternInstance | "(" nestedFormula=InnerFormula ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//atomic=NegationFormula
		public Assignment getAtomicAssignment_0() { return cAtomicAssignment_0; }
		
		//NegationFormula
		public RuleCall getAtomicNegationFormulaParserRuleCall_0_0() { return cAtomicNegationFormulaParserRuleCall_0_0; }
		
		//patternInst=BasicRequirementPatternInstance
		public Assignment getPatternInstAssignment_1() { return cPatternInstAssignment_1; }
		
		//BasicRequirementPatternInstance
		public RuleCall getPatternInstBasicRequirementPatternInstanceParserRuleCall_1_0() { return cPatternInstBasicRequirementPatternInstanceParserRuleCall_1_0; }
		
		//"(" nestedFormula=InnerFormula ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//nestedFormula=InnerFormula
		public Assignment getNestedFormulaAssignment_2_1() { return cNestedFormulaAssignment_2_1; }
		
		//InnerFormula
		public RuleCall getNestedFormulaInnerFormulaParserRuleCall_2_1_0() { return cNestedFormulaInnerFormulaParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class NegationFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.NegationFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNEGATIONTerminalRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAtomicFormulaParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//NegationFormula:
		//    (neg?=NEGATION)? right=AtomicFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//(neg?=NEGATION)? right=AtomicFormula
		public Group getGroup() { return cGroup; }
		
		//(neg?=NEGATION)?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }
		
		//NEGATION
		public RuleCall getNegNEGATIONTerminalRuleCall_0_0() { return cNegNEGATIONTerminalRuleCall_0_0; }
		
		//right=AtomicFormula
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//AtomicFormula
		public RuleCall getRightAtomicFormulaParserRuleCall_1_0() { return cRightAtomicFormulaParserRuleCall_1_0; }
	}
	public class AtomicFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.AtomicFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolLiteralBOOLEAN_LITERALTerminalRuleCall_0_0 = (RuleCall)cBoolLiteralAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFrmKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBoolTermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBoolTermTermParserRuleCall_1_2_0 = (RuleCall)cBoolTermAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFmParamAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cFmParamFormulaParameterCrossReference_2_0_0 = (CrossReference)cFmParamAssignment_2_0.eContents().get(0);
		private final RuleCall cFmParamFormulaParameterIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFmParamFormulaParameterCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStatesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cStatesUpdateStateVariableCrossReference_2_1_1_0 = (CrossReference)cStatesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cStatesUpdateStateVariableIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cStatesUpdateStateVariableCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final CrossReference cStatesUpdateStateVariableCrossReference_2_1_2_1_0 = (CrossReference)cStatesAssignment_2_1_2_1.eContents().get(0);
		private final RuleCall cStatesUpdateStateVariableIDTerminalRuleCall_2_1_2_1_0_1 = (RuleCall)cStatesUpdateStateVariableCrossReference_2_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//AtomicFormula:
		//    boolLiteral=BOOLEAN_LITERAL | "frm" "(" boolTerm=Term ")" |
		//    fmParam=[FormulaParameter] ("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?;
		@Override public ParserRule getRule() { return rule; }
		
		//boolLiteral=BOOLEAN_LITERAL | "frm" "(" boolTerm=Term ")" |
		//fmParam=[FormulaParameter] ("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolLiteral=BOOLEAN_LITERAL
		public Assignment getBoolLiteralAssignment_0() { return cBoolLiteralAssignment_0; }
		
		//BOOLEAN_LITERAL
		public RuleCall getBoolLiteralBOOLEAN_LITERALTerminalRuleCall_0_0() { return cBoolLiteralBOOLEAN_LITERALTerminalRuleCall_0_0; }
		
		//"frm" "(" boolTerm=Term ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"frm"
		public Keyword getFrmKeyword_1_0() { return cFrmKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//boolTerm=Term
		public Assignment getBoolTermAssignment_1_2() { return cBoolTermAssignment_1_2; }
		
		//Term
		public RuleCall getBoolTermTermParserRuleCall_1_2_0() { return cBoolTermTermParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//fmParam=[FormulaParameter] ("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?
		public Group getGroup_2() { return cGroup_2; }
		
		//fmParam=[FormulaParameter]
		public Assignment getFmParamAssignment_2_0() { return cFmParamAssignment_2_0; }
		
		//[FormulaParameter]
		public CrossReference getFmParamFormulaParameterCrossReference_2_0_0() { return cFmParamFormulaParameterCrossReference_2_0_0; }
		
		//ID
		public RuleCall getFmParamFormulaParameterIDTerminalRuleCall_2_0_0_1() { return cFmParamFormulaParameterIDTerminalRuleCall_2_0_0_1; }
		
		//("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//states+=[UpdateStateVariable]
		public Assignment getStatesAssignment_2_1_1() { return cStatesAssignment_2_1_1; }
		
		//[UpdateStateVariable]
		public CrossReference getStatesUpdateStateVariableCrossReference_2_1_1_0() { return cStatesUpdateStateVariableCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getStatesUpdateStateVariableIDTerminalRuleCall_2_1_1_0_1() { return cStatesUpdateStateVariableIDTerminalRuleCall_2_1_1_0_1; }
		
		//("," states+=[UpdateStateVariable])*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//states+=[UpdateStateVariable]
		public Assignment getStatesAssignment_2_1_2_1() { return cStatesAssignment_2_1_2_1; }
		
		//[UpdateStateVariable]
		public CrossReference getStatesUpdateStateVariableCrossReference_2_1_2_1_0() { return cStatesUpdateStateVariableCrossReference_2_1_2_1_0; }
		
		//ID
		public RuleCall getStatesUpdateStateVariableIDTerminalRuleCall_2_1_2_1_0_1() { return cStatesUpdateStateVariableIDTerminalRuleCall_2_1_2_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}
	public class BasicRequirementPatternInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.BasicRequirementPatternInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPatternBasicRequirementPatternCrossReference_0_0 = (CrossReference)cPatternAssignment_0.eContents().get(0);
		private final RuleCall cPatternBasicRequirementPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cPatternBasicRequirementPatternCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCParamsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCParamsTermParserRuleCall_2_2_0 = (RuleCall)cCParamsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cCParamsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cCParamsTermParserRuleCall_2_3_1_0 = (RuleCall)cCParamsAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFormulasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFmParamsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterValueParserRuleCall_3_2_0 = (RuleCall)cFmParamsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterValueParserRuleCall_3_3_1_0 = (RuleCall)cFmParamsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFinalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFinStateAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFinStateUpdateStateVariableCrossReference_4_2_0 = (CrossReference)cFinStateAssignment_4_2.eContents().get(0);
		private final RuleCall cFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1 = (RuleCall)cFinStateUpdateStateVariableCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCurrentKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Keyword cColonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Assignment cCurStateAssignment_4_3_2 = (Assignment)cGroup_4_3.eContents().get(2);
		private final CrossReference cCurStateUpdateStateVariableCrossReference_4_3_2_0 = (CrossReference)cCurStateAssignment_4_3_2.eContents().get(0);
		private final RuleCall cCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1 = (RuleCall)cCurStateUpdateStateVariableCrossReference_4_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BasicRequirementPatternInstance:
		//    pattern=[BasicRequirementPattern] "("
		//    ("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		//      ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		//     ")";
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=[BasicRequirementPattern] "("
		//("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		//  ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		// ")"
		public Group getGroup() { return cGroup; }
		
		//pattern=[BasicRequirementPattern]
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//[BasicRequirementPattern]
		public CrossReference getPatternBasicRequirementPatternCrossReference_0_0() { return cPatternBasicRequirementPatternCrossReference_0_0; }
		
		//ID
		public RuleCall getPatternBasicRequirementPatternIDTerminalRuleCall_0_0_1() { return cPatternBasicRequirementPatternIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//("const" ":" cParams+=Term ("," cParams+=Term)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"const"
		public Keyword getConstKeyword_2_0() { return cConstKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_2() { return cCParamsAssignment_2_2; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_2_0() { return cCParamsTermParserRuleCall_2_2_0; }
		
		//("," cParams+=Term)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_3_1() { return cCParamsAssignment_2_3_1; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_3_1_0() { return cCParamsTermParserRuleCall_2_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"formulas"
		public Keyword getFormulasKeyword_3_0() { return cFormulasKeyword_3_0; }
		
		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//fmParams+=FormulaParameterValue
		public Assignment getFmParamsAssignment_3_2() { return cFmParamsAssignment_3_2; }
		
		//FormulaParameterValue
		public RuleCall getFmParamsFormulaParameterValueParserRuleCall_3_2_0() { return cFmParamsFormulaParameterValueParserRuleCall_3_2_0; }
		
		//("," fmParams+=FormulaParameterValue)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//fmParams+=FormulaParameterValue
		public Assignment getFmParamsAssignment_3_3_1() { return cFmParamsAssignment_3_3_1; }
		
		//FormulaParameterValue
		public RuleCall getFmParamsFormulaParameterValueParserRuleCall_3_3_1_0() { return cFmParamsFormulaParameterValueParserRuleCall_3_3_1_0; }
		
		//("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"final"
		public Keyword getFinalKeyword_4_0() { return cFinalKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//finState=[UpdateStateVariable]
		public Assignment getFinStateAssignment_4_2() { return cFinStateAssignment_4_2; }
		
		//[UpdateStateVariable]
		public CrossReference getFinStateUpdateStateVariableCrossReference_4_2_0() { return cFinStateUpdateStateVariableCrossReference_4_2_0; }
		
		//ID
		public RuleCall getFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1() { return cFinStateUpdateStateVariableIDTerminalRuleCall_4_2_0_1; }
		
		//("current" ":" curState=[UpdateStateVariable])?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//"current"
		public Keyword getCurrentKeyword_4_3_0() { return cCurrentKeyword_4_3_0; }
		
		//":"
		public Keyword getColonKeyword_4_3_1() { return cColonKeyword_4_3_1; }
		
		//curState=[UpdateStateVariable]
		public Assignment getCurStateAssignment_4_3_2() { return cCurStateAssignment_4_3_2; }
		
		//[UpdateStateVariable]
		public CrossReference getCurStateUpdateStateVariableCrossReference_4_3_2_0() { return cCurStateUpdateStateVariableCrossReference_4_3_2_0; }
		
		//ID
		public RuleCall getCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1() { return cCurStateUpdateStateVariableIDTerminalRuleCall_4_3_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FutureRequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FutureRequirementPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuturereqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFormulasKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFmParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_2_0 = (RuleCall)cFmParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_3_1_0 = (RuleCall)cFmParamsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFromKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFileAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFileFilePathParserRuleCall_8_0 = (RuleCall)cFileAssignment_8.eContents().get(0);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cExtraInvPatternAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cExtraInvPatternFutureExtraInvariantPatternCrossReference_10_0 = (CrossReference)cExtraInvPatternAssignment_10.eContents().get(0);
		private final RuleCall cExtraInvPatternFutureExtraInvariantPatternIDTerminalRuleCall_10_0_1 = (RuleCall)cExtraInvPatternFutureExtraInvariantPatternCrossReference_10_0.eContents().get(1);
		private final Assignment cLessasAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLessasFutureLemmasParserRuleCall_11_0 = (RuleCall)cLessasAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///* ======================= Pattern declarations ======================= */
		//FutureRequirementPattern:
		//    'futurereq' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//     ")"
		//     "from" file=FilePath "with" extraInvPattern=[FutureExtraInvariantPattern] (lessas=FutureLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'futurereq' 'pattern' name=ID '('
		//("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		// ")"
		// "from" file=FilePath "with" extraInvPattern=[FutureExtraInvariantPattern] (lessas=FutureLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'futurereq'
		public Keyword getFuturereqKeyword_0() { return cFuturereqKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//(","cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"formulas"
		public Keyword getFormulasKeyword_5_0() { return cFormulasKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_2() { return cFmParamsAssignment_5_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_2_0() { return cFmParamsFormulaParameterParserRuleCall_5_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_3_1() { return cFmParamsAssignment_5_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_5_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//"from"
		public Keyword getFromKeyword_7() { return cFromKeyword_7; }
		
		//file=FilePath
		public Assignment getFileAssignment_8() { return cFileAssignment_8; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_8_0() { return cFileFilePathParserRuleCall_8_0; }
		
		//"with"
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }
		
		//extraInvPattern=[FutureExtraInvariantPattern]
		public Assignment getExtraInvPatternAssignment_10() { return cExtraInvPatternAssignment_10; }
		
		//[FutureExtraInvariantPattern]
		public CrossReference getExtraInvPatternFutureExtraInvariantPatternCrossReference_10_0() { return cExtraInvPatternFutureExtraInvariantPatternCrossReference_10_0; }
		
		//ID
		public RuleCall getExtraInvPatternFutureExtraInvariantPatternIDTerminalRuleCall_10_0_1() { return cExtraInvPatternFutureExtraInvariantPatternIDTerminalRuleCall_10_0_1; }
		
		//(lessas=FutureLemmas)?
		public Assignment getLessasAssignment_11() { return cLessasAssignment_11; }
		
		//FutureLemmas
		public RuleCall getLessasFutureLemmasParserRuleCall_11_0() { return cLessasFutureLemmasParserRuleCall_11_0; }
		
		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}
	public class PastRequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PastRequirementPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPastreqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFormulasKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFmParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_2_0 = (RuleCall)cFmParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_5_3_1_0 = (RuleCall)cFmParamsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFromKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFileAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFileFilePathParserRuleCall_8_0 = (RuleCall)cFileAssignment_8.eContents().get(0);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cExtraInvPatternAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cExtraInvPatternPastExtraInvariantPatternCrossReference_10_0 = (CrossReference)cExtraInvPatternAssignment_10.eContents().get(0);
		private final RuleCall cExtraInvPatternPastExtraInvariantPatternIDTerminalRuleCall_10_0_1 = (RuleCall)cExtraInvPatternPastExtraInvariantPatternCrossReference_10_0.eContents().get(1);
		private final Assignment cLemmasAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLemmasPastLemmasParserRuleCall_11_0 = (RuleCall)cLemmasAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//PastRequirementPattern:
		//    'pastreq' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//    ")"
		//    "from" file=FilePath "with" extraInvPattern=[PastExtraInvariantPattern] (lemmas=PastLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'pastreq' 'pattern' name=ID '('
		//("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//")"
		//"from" file=FilePath "with" extraInvPattern=[PastExtraInvariantPattern] (lemmas=PastLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'pastreq'
		public Keyword getPastreqKeyword_0() { return cPastreqKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//(","cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"formulas"
		public Keyword getFormulasKeyword_5_0() { return cFormulasKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_2() { return cFmParamsAssignment_5_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_2_0() { return cFmParamsFormulaParameterParserRuleCall_5_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_5_3_1() { return cFmParamsAssignment_5_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_5_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_5_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//"from"
		public Keyword getFromKeyword_7() { return cFromKeyword_7; }
		
		//file=FilePath
		public Assignment getFileAssignment_8() { return cFileAssignment_8; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_8_0() { return cFileFilePathParserRuleCall_8_0; }
		
		//"with"
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }
		
		//extraInvPattern=[PastExtraInvariantPattern]
		public Assignment getExtraInvPatternAssignment_10() { return cExtraInvPatternAssignment_10; }
		
		//[PastExtraInvariantPattern]
		public CrossReference getExtraInvPatternPastExtraInvariantPatternCrossReference_10_0() { return cExtraInvPatternPastExtraInvariantPatternCrossReference_10_0; }
		
		//ID
		public RuleCall getExtraInvPatternPastExtraInvariantPatternIDTerminalRuleCall_10_0_1() { return cExtraInvPatternPastExtraInvariantPatternIDTerminalRuleCall_10_0_1; }
		
		//(lemmas=PastLemmas)?
		public Assignment getLemmasAssignment_11() { return cLemmasAssignment_11; }
		
		//PastLemmas
		public RuleCall getLemmasPastLemmasParserRuleCall_11_0() { return cLemmasPastLemmasParserRuleCall_11_0; }
		
		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}
	public class FutureExtraInvariantPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FutureExtraInvariantPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFutureeinvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFunKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFnParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_2_0 = (RuleCall)cFnParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFnParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_3_1_0 = (RuleCall)cFnParamsAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFormulasKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFmParamsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_2_0 = (RuleCall)cFmParamsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_3_1_0 = (RuleCall)cFmParamsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFromKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFileAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFileFilePathParserRuleCall_8_1_0 = (RuleCall)cFileAssignment_8_1.eContents().get(0);
		private final Assignment cLemmasAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLemmasFutureLemmasParserRuleCall_9_0 = (RuleCall)cLemmasAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FutureExtraInvariantPattern:
		//    'futureeinv' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//    ")"
		//    ("from" file=FilePath)? (lemmas=FutureLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'futureeinv' 'pattern' name=ID '('
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//")"
		//("from" file=FilePath)? (lemmas=FutureLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'futureeinv'
		public Keyword getFutureeinvKeyword_0() { return cFutureeinvKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//("," cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"fun"
		public Keyword getFunKeyword_5_0() { return cFunKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_2() { return cFnParamsAssignment_5_2; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_2_0() { return cFnParamsFunctionalParameterParserRuleCall_5_2_0; }
		
		//("," fnParams+=FunctionalParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_3_1() { return cFnParamsAssignment_5_3_1; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_3_1_0() { return cFnParamsFunctionalParameterParserRuleCall_5_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"formulas"
		public Keyword getFormulasKeyword_6_0() { return cFormulasKeyword_6_0; }
		
		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_2() { return cFmParamsAssignment_6_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_2_0() { return cFmParamsFormulaParameterParserRuleCall_6_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_3_1() { return cFmParamsAssignment_6_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_6_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//("from" file=FilePath)?
		public Group getGroup_8() { return cGroup_8; }
		
		//"from"
		public Keyword getFromKeyword_8_0() { return cFromKeyword_8_0; }
		
		//file=FilePath
		public Assignment getFileAssignment_8_1() { return cFileAssignment_8_1; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_8_1_0() { return cFileFilePathParserRuleCall_8_1_0; }
		
		//(lemmas=FutureLemmas)?
		public Assignment getLemmasAssignment_9() { return cLemmasAssignment_9; }
		
		//FutureLemmas
		public RuleCall getLemmasFutureLemmasParserRuleCall_9_0() { return cLemmasFutureLemmasParserRuleCall_9_0; }
		
		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class PastExtraInvariantPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PastExtraInvariantPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasteinvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFunKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFnParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_2_0 = (RuleCall)cFnParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFnParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_3_1_0 = (RuleCall)cFnParamsAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFormulasKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFmParamsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_2_0 = (RuleCall)cFmParamsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_3_1_0 = (RuleCall)cFmParamsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFromKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFileAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFileFilePathParserRuleCall_8_1_0 = (RuleCall)cFileAssignment_8_1.eContents().get(0);
		private final Assignment cLemmasAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLemmasPastLemmasParserRuleCall_9_0 = (RuleCall)cLemmasAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PastExtraInvariantPattern:
		//    'pasteinv' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//    ")"
		//    ("from" file=FilePath)? (lemmas=PastLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'pasteinv' 'pattern' name=ID '('
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//")"
		//("from" file=FilePath)? (lemmas=PastLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'pasteinv'
		public Keyword getPasteinvKeyword_0() { return cPasteinvKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//("," cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"fun"
		public Keyword getFunKeyword_5_0() { return cFunKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_2() { return cFnParamsAssignment_5_2; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_2_0() { return cFnParamsFunctionalParameterParserRuleCall_5_2_0; }
		
		//("," fnParams+=FunctionalParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_3_1() { return cFnParamsAssignment_5_3_1; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_3_1_0() { return cFnParamsFunctionalParameterParserRuleCall_5_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"formulas"
		public Keyword getFormulasKeyword_6_0() { return cFormulasKeyword_6_0; }
		
		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_2() { return cFmParamsAssignment_6_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_2_0() { return cFmParamsFormulaParameterParserRuleCall_6_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_3_1() { return cFmParamsAssignment_6_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_6_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//("from" file=FilePath)?
		public Group getGroup_8() { return cGroup_8; }
		
		//"from"
		public Keyword getFromKeyword_8_0() { return cFromKeyword_8_0; }
		
		//file=FilePath
		public Assignment getFileAssignment_8_1() { return cFileAssignment_8_1; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_8_1_0() { return cFileFilePathParserRuleCall_8_1_0; }
		
		//(lemmas=PastLemmas)?
		public Assignment getLemmasAssignment_9() { return cLemmasAssignment_9; }
		
		//PastLemmas
		public RuleCall getLemmasPastLemmasParserRuleCall_9_0() { return cLemmasPastLemmasParserRuleCall_9_0; }
		
		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class DerivedExtraInvariantPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DerivedExtraInvariantPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivedeinvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_2_0 = (RuleCall)cCParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cCParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_4_3_1_0 = (RuleCall)cCParamsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFunKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFnParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_2_0 = (RuleCall)cFnParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFnParamsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_5_3_1_0 = (RuleCall)cFnParamsAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFormulasKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFmParamsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_2_0 = (RuleCall)cFmParamsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_6_3_1_0 = (RuleCall)cFmParamsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFromKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFileAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFileFilePathParserRuleCall_8_1_0 = (RuleCall)cFileAssignment_8_1.eContents().get(0);
		private final Assignment cLemmasAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLemmasDerivedLemmasParserRuleCall_9_0 = (RuleCall)cLemmasAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//DerivedExtraInvariantPattern:
		//    'derivedeinv' 'pattern' name=ID '('
		//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//    ")"
		//    ("from" file=FilePath)? (lemmas=DerivedLemmas)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'derivedeinv' 'pattern' name=ID '('
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//")"
		//("from" file=FilePath)? (lemmas=DerivedLemmas)? ";"
		public Group getGroup() { return cGroup; }
		
		//'derivedeinv'
		public Keyword getDerivedeinvKeyword_0() { return cDerivedeinvKeyword_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"const"
		public Keyword getConstKeyword_4_0() { return cConstKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_2() { return cCParamsAssignment_4_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_2_0() { return cCParamsConstantParameterParserRuleCall_4_2_0; }
		
		//("," cParams+=ConstantParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_4_3_1() { return cCParamsAssignment_4_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_4_3_1_0() { return cCParamsConstantParameterParserRuleCall_4_3_1_0; }
		
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"fun"
		public Keyword getFunKeyword_5_0() { return cFunKeyword_5_0; }
		
		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_2() { return cFnParamsAssignment_5_2; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_2_0() { return cFnParamsFunctionalParameterParserRuleCall_5_2_0; }
		
		//("," fnParams+=FunctionalParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_5_3_1() { return cFnParamsAssignment_5_3_1; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_5_3_1_0() { return cFnParamsFunctionalParameterParserRuleCall_5_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"formulas"
		public Keyword getFormulasKeyword_6_0() { return cFormulasKeyword_6_0; }
		
		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_2() { return cFmParamsAssignment_6_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_2_0() { return cFmParamsFormulaParameterParserRuleCall_6_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_6_3_1() { return cFmParamsAssignment_6_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_6_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_6_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//("from" file=FilePath)?
		public Group getGroup_8() { return cGroup_8; }
		
		//"from"
		public Keyword getFromKeyword_8_0() { return cFromKeyword_8_0; }
		
		//file=FilePath
		public Assignment getFileAssignment_8_1() { return cFileAssignment_8_1; }
		
		//FilePath
		public RuleCall getFileFilePathParserRuleCall_8_1_0() { return cFileFilePathParserRuleCall_8_1_0; }
		
		//(lemmas=DerivedLemmas)?
		public Assignment getLemmasAssignment_9() { return cLemmasAssignment_9; }
		
		//DerivedLemmas
		public RuleCall getLemmasDerivedLemmasParserRuleCall_9_0() { return cLemmasDerivedLemmasParserRuleCall_9_0; }
		
		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class FilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDirParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FilePath:
		//    '/'? (Dir '/')* ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'/'? (Dir '/')* ID
		public Group getGroup() { return cGroup; }
		
		//'/'?
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//(Dir '/')*
		public Group getGroup_1() { return cGroup_1; }
		
		//Dir
		public RuleCall getDirParserRuleCall_1_0() { return cDirParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class DirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Dir");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Dir:
		//    ID | "." | "..";
		@Override public ParserRule getRule() { return rule; }
		
		//ID | "." | ".."
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDISJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///* ======================= Terms ======================= */
		//Term:
		//    ConjunctionTerm ({Term.left=current} DISJUNCTION right=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjunctionTerm ({Term.left=current} DISJUNCTION right=Term)*
		public Group getGroup() { return cGroup; }
		
		//ConjunctionTerm
		public RuleCall getConjunctionTermParserRuleCall_0() { return cConjunctionTermParserRuleCall_0; }
		
		//({Term.left=current} DISJUNCTION right=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }
		
		//DISJUNCTION
		public RuleCall getDISJUNCTIONTerminalRuleCall_1_1() { return cDISJUNCTIONTerminalRuleCall_1_1; }
		
		//right=Term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}
	public class ConjunctionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConjunctionTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjunctionTerm:
		//    NegationTerm ({ConjunctionTerm.left=current} CONJUNCTION right=ConjunctionTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NegationTerm ({ConjunctionTerm.left=current} CONJUNCTION right=ConjunctionTerm)*
		public Group getGroup() { return cGroup; }
		
		//NegationTerm
		public RuleCall getNegationTermParserRuleCall_0() { return cNegationTermParserRuleCall_0; }
		
		//({ConjunctionTerm.left=current} CONJUNCTION right=ConjunctionTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConjunctionTerm.left=current}
		public Action getConjunctionTermLeftAction_1_0() { return cConjunctionTermLeftAction_1_0; }
		
		//CONJUNCTION
		public RuleCall getCONJUNCTIONTerminalRuleCall_1_1() { return cCONJUNCTIONTerminalRuleCall_1_1; }
		
		//right=ConjunctionTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjunctionTerm
		public RuleCall getRightConjunctionTermParserRuleCall_1_2_0() { return cRightConjunctionTermParserRuleCall_1_2_0; }
	}
	public class NegationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.NegationTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEqTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNEGATIONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//NegationTerm:
		//    EqTerm | (NEGATION right=EqTerm);
		@Override public ParserRule getRule() { return rule; }
		
		//EqTerm | (NEGATION right=EqTerm)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EqTerm
		public RuleCall getEqTermParserRuleCall_0() { return cEqTermParserRuleCall_0; }
		
		//(NEGATION right=EqTerm)
		public Group getGroup_1() { return cGroup_1; }
		
		//NEGATION
		public RuleCall getNEGATIONTerminalRuleCall_1_0() { return cNEGATIONTerminalRuleCall_1_0; }
		
		//right=EqTerm
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EqTerm
		public RuleCall getRightEqTermParserRuleCall_1_1_0() { return cRightEqTermParserRuleCall_1_1_0; }
	}
	public class EqTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.EqTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEqPredAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqPredEqPredicateEnumRuleCall_1_1_0 = (RuleCall)cEqPredAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqTerm:
		//    CompareTerm ({EqTerm.left=current} eqPred=EqPredicate right=EqTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareTerm ({EqTerm.left=current} eqPred=EqPredicate right=EqTerm)*
		public Group getGroup() { return cGroup; }
		
		//CompareTerm
		public RuleCall getCompareTermParserRuleCall_0() { return cCompareTermParserRuleCall_0; }
		
		//({EqTerm.left=current} eqPred=EqPredicate right=EqTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqTerm.left=current}
		public Action getEqTermLeftAction_1_0() { return cEqTermLeftAction_1_0; }
		
		//eqPred=EqPredicate
		public Assignment getEqPredAssignment_1_1() { return cEqPredAssignment_1_1; }
		
		//EqPredicate
		public RuleCall getEqPredEqPredicateEnumRuleCall_1_1_0() { return cEqPredEqPredicateEnumRuleCall_1_1_0; }
		
		//right=EqTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqTerm
		public RuleCall getRightEqTermParserRuleCall_1_2_0() { return cRightEqTermParserRuleCall_1_2_0; }
	}
	public class CompareTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.CompareTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompareTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompPredAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompPredCompPredicateEnumRuleCall_1_1_0 = (RuleCall)cCompPredAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompareTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CompareTerm:
		//    AddTerm ({CompareTerm.left=current} compPred=CompPredicate right=CompareTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddTerm ({CompareTerm.left=current} compPred=CompPredicate right=CompareTerm)*
		public Group getGroup() { return cGroup; }
		
		//AddTerm
		public RuleCall getAddTermParserRuleCall_0() { return cAddTermParserRuleCall_0; }
		
		//({CompareTerm.left=current} compPred=CompPredicate right=CompareTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CompareTerm.left=current}
		public Action getCompareTermLeftAction_1_0() { return cCompareTermLeftAction_1_0; }
		
		//compPred=CompPredicate
		public Assignment getCompPredAssignment_1_1() { return cCompPredAssignment_1_1; }
		
		//CompPredicate
		public RuleCall getCompPredCompPredicateEnumRuleCall_1_1_0() { return cCompPredCompPredicateEnumRuleCall_1_1_0; }
		
		//right=CompareTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CompareTerm
		public RuleCall getRightCompareTermParserRuleCall_1_2_0() { return cRightCompareTermParserRuleCall_1_2_0; }
	}
	public class AddTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.AddTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAddOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddOpAddOperatorEnumRuleCall_1_1_0 = (RuleCall)cAddOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddTerm:
		//    MulTerm ({AddTerm.left=current} addOp=AddOperator right=AddTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulTerm ({AddTerm.left=current} addOp=AddOperator right=AddTerm)*
		public Group getGroup() { return cGroup; }
		
		//MulTerm
		public RuleCall getMulTermParserRuleCall_0() { return cMulTermParserRuleCall_0; }
		
		//({AddTerm.left=current} addOp=AddOperator right=AddTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddTerm.left=current}
		public Action getAddTermLeftAction_1_0() { return cAddTermLeftAction_1_0; }
		
		//addOp=AddOperator
		public Assignment getAddOpAssignment_1_1() { return cAddOpAssignment_1_1; }
		
		//AddOperator
		public RuleCall getAddOpAddOperatorEnumRuleCall_1_1_0() { return cAddOpAddOperatorEnumRuleCall_1_1_0; }
		
		//right=AddTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddTerm
		public RuleCall getRightAddTermParserRuleCall_1_2_0() { return cRightAddTermParserRuleCall_1_2_0; }
	}
	public class MulTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.MulTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMulOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMulOpMulOperatorEnumRuleCall_1_1_0 = (RuleCall)cMulOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulTerm:
		//    PowerTerm ({MulTerm.left=current} mulOp=MulOperator right=MulTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PowerTerm ({MulTerm.left=current} mulOp=MulOperator right=MulTerm)*
		public Group getGroup() { return cGroup; }
		
		//PowerTerm
		public RuleCall getPowerTermParserRuleCall_0() { return cPowerTermParserRuleCall_0; }
		
		//({MulTerm.left=current} mulOp=MulOperator right=MulTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulTerm.left=current}
		public Action getMulTermLeftAction_1_0() { return cMulTermLeftAction_1_0; }
		
		//mulOp=MulOperator
		public Assignment getMulOpAssignment_1_1() { return cMulOpAssignment_1_1; }
		
		//MulOperator
		public RuleCall getMulOpMulOperatorEnumRuleCall_1_1_0() { return cMulOpMulOperatorEnumRuleCall_1_1_0; }
		
		//right=MulTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulTerm
		public RuleCall getRightMulTermParserRuleCall_1_2_0() { return cRightMulTermParserRuleCall_1_2_0; }
	}
	public class PowerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PowerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cPOWER_OPERATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowerTerm:
		//    UnaryTerm ({PowerTerm.left=current} POWER_OPERATOR right=PowerTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryTerm ({PowerTerm.left=current} POWER_OPERATOR right=PowerTerm)*
		public Group getGroup() { return cGroup; }
		
		//UnaryTerm
		public RuleCall getUnaryTermParserRuleCall_0() { return cUnaryTermParserRuleCall_0; }
		
		//({PowerTerm.left=current} POWER_OPERATOR right=PowerTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PowerTerm.left=current}
		public Action getPowerTermLeftAction_1_0() { return cPowerTermLeftAction_1_0; }
		
		//POWER_OPERATOR
		public RuleCall getPOWER_OPERATORTerminalRuleCall_1_1() { return cPOWER_OPERATORTerminalRuleCall_1_1; }
		
		//right=PowerTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PowerTerm
		public RuleCall getRightPowerTermParserRuleCall_1_2_0() { return cRightPowerTermParserRuleCall_1_2_0; }
	}
	public class UnaryTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.UnaryTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnOpUnMinusEnumRuleCall_1_0_0 = (RuleCall)cUnOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnaryTerm:
		//    PrimaryTerm | (unOp=UnMinus right=PrimaryTerm);
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryTerm | (unOp=UnMinus right=PrimaryTerm)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryTerm
		public RuleCall getPrimaryTermParserRuleCall_0() { return cPrimaryTermParserRuleCall_0; }
		
		//(unOp=UnMinus right=PrimaryTerm)
		public Group getGroup_1() { return cGroup_1; }
		
		//unOp=UnMinus
		public Assignment getUnOpAssignment_1_0() { return cUnOpAssignment_1_0; }
		
		//UnMinus
		public RuleCall getUnOpUnMinusEnumRuleCall_1_0_0() { return cUnOpUnMinusEnumRuleCall_1_0_0; }
		
		//right=PrimaryTerm
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryTerm
		public RuleCall getRightPrimaryTermParserRuleCall_1_1_0() { return cRightPrimaryTermParserRuleCall_1_1_0; }
	}
	public class PrimaryTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PrimaryTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cStateAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cStateUpdateStateVariableCrossReference_2_0_0 = (CrossReference)cStateAssignment_2_0.eContents().get(0);
		private final RuleCall cStateUpdateStateVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cStateUpdateStateVariableCrossReference_2_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVariableAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cVariableProgramVariableCrossReference_2_2_0 = (CrossReference)cVariableAssignment_2_2.eContents().get(0);
		private final RuleCall cVariableProgramVariableIDTerminalRuleCall_2_2_0_1 = (RuleCall)cVariableProgramVariableCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cFunApplicationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNestedTermAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNestedTermTermParserRuleCall_4_1_0 = (RuleCall)cNestedTermAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//PrimaryTerm:
		//    Constant |  variable=[Variable] | state=[UpdateStateVariable] "[" variable=[ProgramVariable] "]" | FunApplication |
		//    "(" nestedTerm=Term ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Constant |  variable=[Variable] | state=[UpdateStateVariable] "[" variable=[ProgramVariable] "]" | FunApplication |
		//"(" nestedTerm=Term ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
		
		//state=[UpdateStateVariable] "[" variable=[ProgramVariable] "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//state=[UpdateStateVariable]
		public Assignment getStateAssignment_2_0() { return cStateAssignment_2_0; }
		
		//[UpdateStateVariable]
		public CrossReference getStateUpdateStateVariableCrossReference_2_0_0() { return cStateUpdateStateVariableCrossReference_2_0_0; }
		
		//ID
		public RuleCall getStateUpdateStateVariableIDTerminalRuleCall_2_0_0_1() { return cStateUpdateStateVariableIDTerminalRuleCall_2_0_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//variable=[ProgramVariable]
		public Assignment getVariableAssignment_2_2() { return cVariableAssignment_2_2; }
		
		//[ProgramVariable]
		public CrossReference getVariableProgramVariableCrossReference_2_2_0() { return cVariableProgramVariableCrossReference_2_2_0; }
		
		//ID
		public RuleCall getVariableProgramVariableIDTerminalRuleCall_2_2_0_1() { return cVariableProgramVariableIDTerminalRuleCall_2_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//FunApplication
		public RuleCall getFunApplicationParserRuleCall_3() { return cFunApplicationParserRuleCall_3; }
		
		//"(" nestedTerm=Term ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//nestedTerm=Term
		public Assignment getNestedTermAssignment_4_1() { return cNestedTermAssignment_4_1; }
		
		//Term
		public RuleCall getNestedTermTermParserRuleCall_4_1_0() { return cNestedTermTermParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class FunApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FunApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFnParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFnParamFunctionalParameterCrossReference_0_0 = (CrossReference)cFnParamAssignment_0.eContents().get(0);
		private final RuleCall cFnParamFunctionalParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cFnParamFunctionalParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateUpdateStateVariableCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateUpdateStateVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cStateUpdateStateVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunApplication:
		//    fnParam=[FunctionalParameter] "(" state=[UpdateStateVariable] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//fnParam=[FunctionalParameter] "(" state=[UpdateStateVariable] ")"
		public Group getGroup() { return cGroup; }
		
		//fnParam=[FunctionalParameter]
		public Assignment getFnParamAssignment_0() { return cFnParamAssignment_0; }
		
		//[FunctionalParameter]
		public CrossReference getFnParamFunctionalParameterCrossReference_0_0() { return cFnParamFunctionalParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getFnParamFunctionalParameterIDTerminalRuleCall_0_0_1() { return cFnParamFunctionalParameterIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//state=[UpdateStateVariable]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[UpdateStateVariable]
		public CrossReference getStateUpdateStateVariableCrossReference_2_0() { return cStateUpdateStateVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getStateUpdateStateVariableIDTerminalRuleCall_2_0_1() { return cStateUpdateStateVariableIDTerminalRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumNumericLiteralParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBoolBOOLEAN_LITERALTerminalRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		
		//Constant:
		//    num=NumericLiteral | bool=BOOLEAN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//num=NumericLiteral | bool=BOOLEAN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//num=NumericLiteral
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//NumericLiteral
		public RuleCall getNumNumericLiteralParserRuleCall_0_0() { return cNumNumericLiteralParserRuleCall_0_0; }
		
		//bool=BOOLEAN_LITERAL
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//BOOLEAN_LITERAL
		public RuleCall getBoolBOOLEAN_LITERALTerminalRuleCall_1_0() { return cBoolBOOLEAN_LITERALTerminalRuleCall_1_0; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericLiteral:
		//    IntegerLiteral | RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSigHyphenMinusKeyword_0_0 = (Keyword)cSigAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral:
		//    (sig?="-")? value=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//(sig?="-")? value=INTEGER
		public Group getGroup() { return cGroup; }
		
		//(sig?="-")?
		public Assignment getSigAssignment_0() { return cSigAssignment_0; }
		
		//"-"
		public Keyword getSigHyphenMinusKeyword_0_0() { return cSigHyphenMinusKeyword_0_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSigHyphenMinusKeyword_0_0 = (Keyword)cSigAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealLiteral:
		//    (sig?="-")? value=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//(sig?="-")? value=REAL
		public Group getGroup() { return cGroup; }
		
		//(sig?="-")?
		public Assignment getSigAssignment_0() { return cSigAssignment_0; }
		
		//"-"
		public Keyword getSigHyphenMinusKeyword_0_0() { return cSigHyphenMinusKeyword_0_0; }
		
		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_0() { return cValueREALTerminalRuleCall_1_0; }
	}
	public class PatternFreeFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PatternFreeFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionPatternFreeFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPatternFreeFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDISJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPatternFreeFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		// /* ======================= Formulas without patterns ======================= */
		//PatternFreeFormula:
		//    ConjunctionPatternFreeFormula ({PatternFreeFormula.left=current} DISJUNCTION right=PatternFreeFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjunctionPatternFreeFormula ({PatternFreeFormula.left=current} DISJUNCTION right=PatternFreeFormula)*
		public Group getGroup() { return cGroup; }
		
		//ConjunctionPatternFreeFormula
		public RuleCall getConjunctionPatternFreeFormulaParserRuleCall_0() { return cConjunctionPatternFreeFormulaParserRuleCall_0; }
		
		//({PatternFreeFormula.left=current} DISJUNCTION right=PatternFreeFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PatternFreeFormula.left=current}
		public Action getPatternFreeFormulaLeftAction_1_0() { return cPatternFreeFormulaLeftAction_1_0; }
		
		//DISJUNCTION
		public RuleCall getDISJUNCTIONTerminalRuleCall_1_1() { return cDISJUNCTIONTerminalRuleCall_1_1; }
		
		//right=PatternFreeFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PatternFreeFormula
		public RuleCall getRightPatternFreeFormulaParserRuleCall_1_2_0() { return cRightPatternFreeFormulaParserRuleCall_1_2_0; }
	}
	public class ConjunctionPatternFreeFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConjunctionPatternFreeFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryPatternFreeFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionPatternFreeFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionPatternFreeFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjunctionPatternFreeFormula:
		//    PrimaryPatternFreeFormula ({ConjunctionPatternFreeFormula.left=current} CONJUNCTION right=ConjunctionPatternFreeFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryPatternFreeFormula ({ConjunctionPatternFreeFormula.left=current} CONJUNCTION right=ConjunctionPatternFreeFormula)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryPatternFreeFormula
		public RuleCall getPrimaryPatternFreeFormulaParserRuleCall_0() { return cPrimaryPatternFreeFormulaParserRuleCall_0; }
		
		//({ConjunctionPatternFreeFormula.left=current} CONJUNCTION right=ConjunctionPatternFreeFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConjunctionPatternFreeFormula.left=current}
		public Action getConjunctionPatternFreeFormulaLeftAction_1_0() { return cConjunctionPatternFreeFormulaLeftAction_1_0; }
		
		//CONJUNCTION
		public RuleCall getCONJUNCTIONTerminalRuleCall_1_1() { return cCONJUNCTIONTerminalRuleCall_1_1; }
		
		//right=ConjunctionPatternFreeFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjunctionPatternFreeFormula
		public RuleCall getRightConjunctionPatternFreeFormulaParserRuleCall_1_2_0() { return cRightConjunctionPatternFreeFormulaParserRuleCall_1_2_0; }
	}
	public class PrimaryPatternFreeFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PrimaryPatternFreeFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicNegationFormulaParserRuleCall_0_0 = (RuleCall)cAtomicAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNestedFormulaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNestedFormulaPatternFreeFormulaParserRuleCall_1_1_0 = (RuleCall)cNestedFormulaAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryPatternFreeFormula:
		//    atomic=NegationFormula | "(" nestedFormula=PatternFreeFormula ")";
		@Override public ParserRule getRule() { return rule; }
		
		//atomic=NegationFormula | "(" nestedFormula=PatternFreeFormula ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//atomic=NegationFormula
		public Assignment getAtomicAssignment_0() { return cAtomicAssignment_0; }
		
		//NegationFormula
		public RuleCall getAtomicNegationFormulaParserRuleCall_0_0() { return cAtomicNegationFormulaParserRuleCall_0_0; }
		
		//"(" nestedFormula=PatternFreeFormula ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//nestedFormula=PatternFreeFormula
		public Assignment getNestedFormulaAssignment_1_1() { return cNestedFormulaAssignment_1_1; }
		
		//PatternFreeFormula
		public RuleCall getNestedFormulaPatternFreeFormulaParserRuleCall_1_1_0() { return cNestedFormulaPatternFreeFormulaParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPatternAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cPatternDerivedRequirementPatternCrossReference_2_0_1_0 = (CrossReference)cPatternAssignment_2_0_1.eContents().get(0);
		private final RuleCall cPatternDerivedRequirementPatternIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cPatternDerivedRequirementPatternCrossReference_2_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_0_3 = (Group)cGroup_2_0.eContents().get(3);
		private final Keyword cConstKeyword_2_0_3_0 = (Keyword)cGroup_2_0_3.eContents().get(0);
		private final Keyword cColonKeyword_2_0_3_1 = (Keyword)cGroup_2_0_3.eContents().get(1);
		private final Assignment cCParamsAssignment_2_0_3_2 = (Assignment)cGroup_2_0_3.eContents().get(2);
		private final RuleCall cCParamsTermParserRuleCall_2_0_3_2_0 = (RuleCall)cCParamsAssignment_2_0_3_2.eContents().get(0);
		private final Group cGroup_2_0_3_3 = (Group)cGroup_2_0_3.eContents().get(3);
		private final Keyword cCommaKeyword_2_0_3_3_0 = (Keyword)cGroup_2_0_3_3.eContents().get(0);
		private final Assignment cCParamsAssignment_2_0_3_3_1 = (Assignment)cGroup_2_0_3_3.eContents().get(1);
		private final RuleCall cCParamsTermParserRuleCall_2_0_3_3_1_0 = (RuleCall)cCParamsAssignment_2_0_3_3_1.eContents().get(0);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Keyword cFormulasKeyword_2_0_4_0 = (Keyword)cGroup_2_0_4.eContents().get(0);
		private final Keyword cColonKeyword_2_0_4_1 = (Keyword)cGroup_2_0_4.eContents().get(1);
		private final Assignment cFmParamsAssignment_2_0_4_2 = (Assignment)cGroup_2_0_4.eContents().get(2);
		private final RuleCall cFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_2_0 = (RuleCall)cFmParamsAssignment_2_0_4_2.eContents().get(0);
		private final Group cGroup_2_0_4_3 = (Group)cGroup_2_0_4.eContents().get(3);
		private final Keyword cCommaKeyword_2_0_4_3_0 = (Keyword)cGroup_2_0_4_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_2_0_4_3_1 = (Assignment)cGroup_2_0_4_3.eContents().get(1);
		private final RuleCall cFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_3_1_0 = (RuleCall)cFmParamsAssignment_2_0_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_5 = (Keyword)cGroup_2_0.eContents().get(5);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPatternAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cPatternDerivedRequirementPatternCrossReference_2_1_1_0 = (CrossReference)cPatternAssignment_2_1_1.eContents().get(0);
		private final RuleCall cPatternDerivedRequirementPatternIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cPatternDerivedRequirementPatternCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cExtraInAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cExtraInIDTerminalRuleCall_2_1_3_0 = (RuleCall)cExtraInAssignment_2_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Requirement:
		//    "requirement" name=ID (("=" pattern=[DerivedRequirementPattern] "("
		//    ("const" ":" cParams+=Term ("," cParams+=Term)*)?
		//    ("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)? ")") |
		//    (":" pattern=[DerivedRequirementPattern] "with" extraIn=ID)) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"requirement" name=ID (("=" pattern=[DerivedRequirementPattern] "("
		//("const" ":" cParams+=Term ("," cParams+=Term)*)?
		//("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)? ")") |
		//(":" pattern=[DerivedRequirementPattern] "with" extraIn=ID)) ";"
		public Group getGroup() { return cGroup; }
		
		//"requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(("=" pattern=[DerivedRequirementPattern] "("
		//   ("const" ":" cParams+=Term ("," cParams+=Term)*)?
		//   ("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)? ")") |
		//   (":" pattern=[DerivedRequirementPattern] "with" extraIn=ID))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//("=" pattern=[DerivedRequirementPattern] "("
		//    ("const" ":" cParams+=Term ("," cParams+=Term)*)?
		//    ("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)? ")")
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }
		
		//pattern=[DerivedRequirementPattern]
		public Assignment getPatternAssignment_2_0_1() { return cPatternAssignment_2_0_1; }
		
		//[DerivedRequirementPattern]
		public CrossReference getPatternDerivedRequirementPatternCrossReference_2_0_1_0() { return cPatternDerivedRequirementPatternCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getPatternDerivedRequirementPatternIDTerminalRuleCall_2_0_1_0_1() { return cPatternDerivedRequirementPatternIDTerminalRuleCall_2_0_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_2() { return cLeftParenthesisKeyword_2_0_2; }
		
		//("const" ":" cParams+=Term ("," cParams+=Term)*)?
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }
		
		//"const"
		public Keyword getConstKeyword_2_0_3_0() { return cConstKeyword_2_0_3_0; }
		
		//":"
		public Keyword getColonKeyword_2_0_3_1() { return cColonKeyword_2_0_3_1; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_0_3_2() { return cCParamsAssignment_2_0_3_2; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_0_3_2_0() { return cCParamsTermParserRuleCall_2_0_3_2_0; }
		
		//("," cParams+=Term)*
		public Group getGroup_2_0_3_3() { return cGroup_2_0_3_3; }
		
		//","
		public Keyword getCommaKeyword_2_0_3_3_0() { return cCommaKeyword_2_0_3_3_0; }
		
		//cParams+=Term
		public Assignment getCParamsAssignment_2_0_3_3_1() { return cCParamsAssignment_2_0_3_3_1; }
		
		//Term
		public RuleCall getCParamsTermParserRuleCall_2_0_3_3_1_0() { return cCParamsTermParserRuleCall_2_0_3_3_1_0; }
		
		//("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//"formulas"
		public Keyword getFormulasKeyword_2_0_4_0() { return cFormulasKeyword_2_0_4_0; }
		
		//":"
		public Keyword getColonKeyword_2_0_4_1() { return cColonKeyword_2_0_4_1; }
		
		//fmParams+=PatternFreeFormulaParameterValue
		public Assignment getFmParamsAssignment_2_0_4_2() { return cFmParamsAssignment_2_0_4_2; }
		
		//PatternFreeFormulaParameterValue
		public RuleCall getFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_2_0() { return cFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_2_0; }
		
		//("," fmParams+=PatternFreeFormulaParameterValue)*
		public Group getGroup_2_0_4_3() { return cGroup_2_0_4_3; }
		
		//","
		public Keyword getCommaKeyword_2_0_4_3_0() { return cCommaKeyword_2_0_4_3_0; }
		
		//fmParams+=PatternFreeFormulaParameterValue
		public Assignment getFmParamsAssignment_2_0_4_3_1() { return cFmParamsAssignment_2_0_4_3_1; }
		
		//PatternFreeFormulaParameterValue
		public RuleCall getFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_3_1_0() { return cFmParamsPatternFreeFormulaParameterValueParserRuleCall_2_0_4_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_5() { return cRightParenthesisKeyword_2_0_5; }
		
		//(":" pattern=[DerivedRequirementPattern] "with" extraIn=ID)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }
		
		//pattern=[DerivedRequirementPattern]
		public Assignment getPatternAssignment_2_1_1() { return cPatternAssignment_2_1_1; }
		
		//[DerivedRequirementPattern]
		public CrossReference getPatternDerivedRequirementPatternCrossReference_2_1_1_0() { return cPatternDerivedRequirementPatternCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getPatternDerivedRequirementPatternIDTerminalRuleCall_2_1_1_0_1() { return cPatternDerivedRequirementPatternIDTerminalRuleCall_2_1_1_0_1; }
		
		//"with"
		public Keyword getWithKeyword_2_1_2() { return cWithKeyword_2_1_2; }
		
		//extraIn=ID
		public Assignment getExtraInAssignment_2_1_3() { return cExtraInAssignment_2_1_3; }
		
		//ID
		public RuleCall getExtraInIDTerminalRuleCall_2_1_3_0() { return cExtraInIDTerminalRuleCall_2_1_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExtraInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ExtraInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInvariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cPatternAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cPatternDerivedExtraInvariantPatternCrossReference_3_0_1_0 = (CrossReference)cPatternAssignment_3_0_1.eContents().get(0);
		private final RuleCall cPatternDerivedExtraInvariantPatternIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cPatternDerivedExtraInvariantPatternCrossReference_3_0_1_0.eContents().get(1);
		private final Keyword cForKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cReqNameAssignment_3_0_3 = (Assignment)cGroup_3_0.eContents().get(3);
		private final RuleCall cReqNameIDTerminalRuleCall_3_0_3_0 = (RuleCall)cReqNameAssignment_3_0_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cForKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReqAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReqRequirementCrossReference_3_1_1_0 = (CrossReference)cReqAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReqRequirementIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cReqRequirementCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExtraInvariant:
		//    "extra" "invariant" name=ID (":" pattern=[DerivedExtraInvariantPattern] "for" reqName=ID |
		//        "for" req=[Requirement]
		//    ) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"extra" "invariant" name=ID (":" pattern=[DerivedExtraInvariantPattern] "for" reqName=ID |
		//    "for" req=[Requirement]
		//) ";"
		public Group getGroup() { return cGroup; }
		
		//"extra"
		public Keyword getExtraKeyword_0() { return cExtraKeyword_0; }
		
		//"invariant"
		public Keyword getInvariantKeyword_1() { return cInvariantKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(":" pattern=[DerivedExtraInvariantPattern] "for" reqName=ID |
		//       "for" req=[Requirement]
		//   )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//":" pattern=[DerivedExtraInvariantPattern] "for" reqName=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//pattern=[DerivedExtraInvariantPattern]
		public Assignment getPatternAssignment_3_0_1() { return cPatternAssignment_3_0_1; }
		
		//[DerivedExtraInvariantPattern]
		public CrossReference getPatternDerivedExtraInvariantPatternCrossReference_3_0_1_0() { return cPatternDerivedExtraInvariantPatternCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getPatternDerivedExtraInvariantPatternIDTerminalRuleCall_3_0_1_0_1() { return cPatternDerivedExtraInvariantPatternIDTerminalRuleCall_3_0_1_0_1; }
		
		//"for"
		public Keyword getForKeyword_3_0_2() { return cForKeyword_3_0_2; }
		
		//reqName=ID
		public Assignment getReqNameAssignment_3_0_3() { return cReqNameAssignment_3_0_3; }
		
		//ID
		public RuleCall getReqNameIDTerminalRuleCall_3_0_3_0() { return cReqNameIDTerminalRuleCall_3_0_3_0; }
		
		//"for" req=[Requirement]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"for"
		public Keyword getForKeyword_3_1_0() { return cForKeyword_3_1_0; }
		
		//req=[Requirement]
		public Assignment getReqAssignment_3_1_1() { return cReqAssignment_3_1_1; }
		
		//[Requirement]
		public CrossReference getReqRequirementCrossReference_3_1_1_0() { return cReqRequirementCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getReqRequirementIDTerminalRuleCall_3_1_1_0_1() { return cReqRequirementIDTerminalRuleCall_3_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PatternFreeFormulaParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PatternFreeFormulaParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLambdaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStatesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStatesUpdateStateVariableParserRuleCall_0_1_0 = (RuleCall)cStatesAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaPatternFreeFormulaParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		//PatternFreeFormulaParameterValue:
		//    ("lambda" states+=UpdateStateVariable+ ".")? formula=PatternFreeFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//("lambda" states+=UpdateStateVariable+ ".")? formula=PatternFreeFormula
		public Group getGroup() { return cGroup; }
		
		//("lambda" states+=UpdateStateVariable+ ".")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"lambda"
		public Keyword getLambdaKeyword_0_0() { return cLambdaKeyword_0_0; }
		
		//states+=UpdateStateVariable+
		public Assignment getStatesAssignment_0_1() { return cStatesAssignment_0_1; }
		
		//UpdateStateVariable
		public RuleCall getStatesUpdateStateVariableParserRuleCall_0_1_0() { return cStatesUpdateStateVariableParserRuleCall_0_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//formula=PatternFreeFormula
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }
		
		//PatternFreeFormula
		public RuleCall getFormulaPatternFreeFormulaParserRuleCall_1_0() { return cFormulaPatternFreeFormulaParserRuleCall_1_0; }
	}
	public class FutureLemmasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.FutureLemmas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFutureLemmasAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLemmasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1_2 = (UnorderedGroup)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cUnorderedGroup_1_2.eContents().get(0);
		private final Keyword cLS1Keyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cL1Assignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cL1LemmaParserRuleCall_1_2_0_1_0 = (RuleCall)cL1Assignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cUnorderedGroup_1_2.eContents().get(1);
		private final Keyword cLS2Keyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cL2Assignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cL2LemmaParserRuleCall_1_2_1_1_0 = (RuleCall)cL2Assignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cUnorderedGroup_1_2.eContents().get(2);
		private final Keyword cLS3Keyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cL3Assignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cL3LemmaParserRuleCall_1_2_2_1_0 = (RuleCall)cL3Assignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///* ======================= Lemmas ======================= */
		//FutureLemmas:
		//    {FutureLemmas} ("lemmas" "{" (("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?) "}");
		@Override public ParserRule getRule() { return rule; }
		
		//{FutureLemmas} ("lemmas" "{" (("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?) "}")
		public Group getGroup() { return cGroup; }
		
		//{FutureLemmas}
		public Action getFutureLemmasAction_0() { return cFutureLemmasAction_0; }
		
		//("lemmas" "{" (("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?) "}")
		public Group getGroup_1() { return cGroup_1; }
		
		//"lemmas"
		public Keyword getLemmasKeyword_1_0() { return cLemmasKeyword_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//(("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?)
		public UnorderedGroup getUnorderedGroup_1_2() { return cUnorderedGroup_1_2; }
		
		//("LS1" L1=Lemma)?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//"LS1"
		public Keyword getLS1Keyword_1_2_0_0() { return cLS1Keyword_1_2_0_0; }
		
		//L1=Lemma
		public Assignment getL1Assignment_1_2_0_1() { return cL1Assignment_1_2_0_1; }
		
		//Lemma
		public RuleCall getL1LemmaParserRuleCall_1_2_0_1_0() { return cL1LemmaParserRuleCall_1_2_0_1_0; }
		
		//("LS2" L2=Lemma)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//"LS2"
		public Keyword getLS2Keyword_1_2_1_0() { return cLS2Keyword_1_2_1_0; }
		
		//L2=Lemma
		public Assignment getL2Assignment_1_2_1_1() { return cL2Assignment_1_2_1_1; }
		
		//Lemma
		public RuleCall getL2LemmaParserRuleCall_1_2_1_1_0() { return cL2LemmaParserRuleCall_1_2_1_1_0; }
		
		//("LS3" L3=Lemma)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//"LS3"
		public Keyword getLS3Keyword_1_2_2_0() { return cLS3Keyword_1_2_2_0; }
		
		//L3=Lemma
		public Assignment getL3Assignment_1_2_2_1() { return cL3Assignment_1_2_2_1; }
		
		//Lemma
		public RuleCall getL3LemmaParserRuleCall_1_2_2_1_0() { return cL3LemmaParserRuleCall_1_2_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class PastLemmasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PastLemmas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPastLemmasAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLemmasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1_2 = (UnorderedGroup)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cUnorderedGroup_1_2.eContents().get(0);
		private final Keyword cLS4Keyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cL4Assignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cL4LemmaParserRuleCall_1_2_0_1_0 = (RuleCall)cL4Assignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cUnorderedGroup_1_2.eContents().get(1);
		private final Keyword cLS5Keyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cL5Assignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cL5LemmaParserRuleCall_1_2_1_1_0 = (RuleCall)cL5Assignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cUnorderedGroup_1_2.eContents().get(2);
		private final Keyword cLS6Keyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cL6Assignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cL6LemmaParserRuleCall_1_2_2_1_0 = (RuleCall)cL6Assignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cUnorderedGroup_1_2.eContents().get(3);
		private final Keyword cLS7Keyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cL7Assignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cL7LemmaParserRuleCall_1_2_3_1_0 = (RuleCall)cL7Assignment_1_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PastLemmas:
		//    {PastLemmas} ("lemmas" "{" (("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?) "}");
		@Override public ParserRule getRule() { return rule; }
		
		//{PastLemmas} ("lemmas" "{" (("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?) "}")
		public Group getGroup() { return cGroup; }
		
		//{PastLemmas}
		public Action getPastLemmasAction_0() { return cPastLemmasAction_0; }
		
		//("lemmas" "{" (("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?) "}")
		public Group getGroup_1() { return cGroup_1; }
		
		//"lemmas"
		public Keyword getLemmasKeyword_1_0() { return cLemmasKeyword_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//(("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?)
		public UnorderedGroup getUnorderedGroup_1_2() { return cUnorderedGroup_1_2; }
		
		//("LS4" L4=Lemma)?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//"LS4"
		public Keyword getLS4Keyword_1_2_0_0() { return cLS4Keyword_1_2_0_0; }
		
		//L4=Lemma
		public Assignment getL4Assignment_1_2_0_1() { return cL4Assignment_1_2_0_1; }
		
		//Lemma
		public RuleCall getL4LemmaParserRuleCall_1_2_0_1_0() { return cL4LemmaParserRuleCall_1_2_0_1_0; }
		
		//("LS5" L5=Lemma)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//"LS5"
		public Keyword getLS5Keyword_1_2_1_0() { return cLS5Keyword_1_2_1_0; }
		
		//L5=Lemma
		public Assignment getL5Assignment_1_2_1_1() { return cL5Assignment_1_2_1_1; }
		
		//Lemma
		public RuleCall getL5LemmaParserRuleCall_1_2_1_1_0() { return cL5LemmaParserRuleCall_1_2_1_1_0; }
		
		//("LS6" L6=Lemma)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//"LS6"
		public Keyword getLS6Keyword_1_2_2_0() { return cLS6Keyword_1_2_2_0; }
		
		//L6=Lemma
		public Assignment getL6Assignment_1_2_2_1() { return cL6Assignment_1_2_2_1; }
		
		//Lemma
		public RuleCall getL6LemmaParserRuleCall_1_2_2_1_0() { return cL6LemmaParserRuleCall_1_2_2_1_0; }
		
		//("LS7" L7=Lemma)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//"LS7"
		public Keyword getLS7Keyword_1_2_3_0() { return cLS7Keyword_1_2_3_0; }
		
		//L7=Lemma
		public Assignment getL7Assignment_1_2_3_1() { return cL7Assignment_1_2_3_1; }
		
		//Lemma
		public RuleCall getL7LemmaParserRuleCall_1_2_3_1_0() { return cL7LemmaParserRuleCall_1_2_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class DerivedLemmasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DerivedLemmas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDerivedLemmasAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLemmasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1_2 = (UnorderedGroup)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cUnorderedGroup_1_2.eContents().get(0);
		private final Keyword cLS8Keyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cL8Assignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cL8LemmaParserRuleCall_1_2_0_1_0 = (RuleCall)cL8Assignment_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cUnorderedGroup_1_2.eContents().get(1);
		private final Keyword cLS9Keyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cL9Assignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cL9LemmaParserRuleCall_1_2_1_1_0 = (RuleCall)cL9Assignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DerivedLemmas:
		//    {DerivedLemmas} ("lemmas" "{" (("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?) "}");
		@Override public ParserRule getRule() { return rule; }
		
		//{DerivedLemmas} ("lemmas" "{" (("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?) "}")
		public Group getGroup() { return cGroup; }
		
		//{DerivedLemmas}
		public Action getDerivedLemmasAction_0() { return cDerivedLemmasAction_0; }
		
		//("lemmas" "{" (("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?) "}")
		public Group getGroup_1() { return cGroup_1; }
		
		//"lemmas"
		public Keyword getLemmasKeyword_1_0() { return cLemmasKeyword_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//(("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?)
		public UnorderedGroup getUnorderedGroup_1_2() { return cUnorderedGroup_1_2; }
		
		//("LS8" L8=Lemma)?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//"LS8"
		public Keyword getLS8Keyword_1_2_0_0() { return cLS8Keyword_1_2_0_0; }
		
		//L8=Lemma
		public Assignment getL8Assignment_1_2_0_1() { return cL8Assignment_1_2_0_1; }
		
		//Lemma
		public RuleCall getL8LemmaParserRuleCall_1_2_0_1_0() { return cL8LemmaParserRuleCall_1_2_0_1_0; }
		
		//("LS9" L9=Lemma)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//"LS9"
		public Keyword getLS9Keyword_1_2_1_0() { return cLS9Keyword_1_2_1_0; }
		
		//L9=Lemma
		public Assignment getL9Assignment_1_2_1_1() { return cL9Assignment_1_2_1_1; }
		
		//Lemma
		public RuleCall getL9LemmaParserRuleCall_1_2_1_1_0() { return cL9LemmaParserRuleCall_1_2_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class LemmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.Lemma");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLemmaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cConstKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cCVarsAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cCVarsConstantParameterParserRuleCall_0_3_2_0 = (RuleCall)cCVarsAssignment_0_3_2.eContents().get(0);
		private final Group cGroup_0_3_3 = (Group)cGroup_0_3.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_3_0 = (Keyword)cGroup_0_3_3.eContents().get(0);
		private final Assignment cCVarsAssignment_0_3_3_1 = (Assignment)cGroup_0_3_3.eContents().get(1);
		private final RuleCall cCVarsConstantParameterParserRuleCall_0_3_3_1_0 = (RuleCall)cCVarsAssignment_0_3_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cFunKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFnVarsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFnVarsFunctionalParameterParserRuleCall_1_2_0 = (RuleCall)cFnVarsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cFnVarsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFnVarsFunctionalParameterParserRuleCall_1_3_1_0 = (RuleCall)cFnVarsAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cExtraKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInvariantKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cFormulasKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIfmVarsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIfmVarsFormulaParameterParserRuleCall_2_4_0 = (RuleCall)cIfmVarsAssignment_2_4.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cCommaKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cIfmVarsAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cIfmVarsFormulaParameterParserRuleCall_2_5_1_0 = (RuleCall)cIfmVarsAssignment_2_5_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cRequirementKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cFormulasKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRfmVarsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRfmVarsFormulaParameterParserRuleCall_3_3_0 = (RuleCall)cRfmVarsAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cCommaKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cRfmVarsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cRfmVarsFormulaParameterParserRuleCall_3_4_1_0 = (RuleCall)cRfmVarsAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cInitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cStateKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cInitStateAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cInitStateUpdateStateVariableParserRuleCall_4_3_0 = (RuleCall)cInitStateAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cFinalKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cStateKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cColonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cFinalStateAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cFinalStateUpdateStateVariableParserRuleCall_5_3_0 = (RuleCall)cFinalStateAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cPremiseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPremAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPremLemmaPremiseFormulaParserRuleCall_6_1_0 = (RuleCall)cPremAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Lemma:
		//    "lemma" name=ID "{"
		//    ("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)? &
		//    ("fun" ":" fnVars+=FunctionalParameter ("," fnVars+=FunctionalParameter)*)? &
		//   ("extra" "invariant" "formulas" ":" ifmVars+=FormulaParameter ("," ifmVars+=FormulaParameter)*)? &
		//   ("requirement" "formulas" ":" rfmVars+=FormulaParameter ("," rfmVars+=FormulaParameter)*)? &
		//   ("init" "state" ":" initState=UpdateStateVariable)? &
		//   "final" "state" ":" finalState=UpdateStateVariable &
		//   "premise" prem=LemmaPremiseFormula "}" ";";
		@Override public ParserRule getRule() { return rule; }
		
		// "lemma" name=ID "{"
		// ("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)? &
		// ("fun" ":" fnVars+=FunctionalParameter ("," fnVars+=FunctionalParameter)*)? &
		//("extra" "invariant" "formulas" ":" ifmVars+=FormulaParameter ("," ifmVars+=FormulaParameter)*)? &
		//("requirement" "formulas" ":" rfmVars+=FormulaParameter ("," rfmVars+=FormulaParameter)*)? &
		//("init" "state" ":" initState=UpdateStateVariable)? &
		//"final" "state" ":" finalState=UpdateStateVariable &
		//"premise" prem=LemmaPremiseFormula "}" ";"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//"lemma" name=ID "{"
		//("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//"lemma"
		public Keyword getLemmaKeyword_0_0() { return cLemmaKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//"const"
		public Keyword getConstKeyword_0_3_0() { return cConstKeyword_0_3_0; }
		
		//":"
		public Keyword getColonKeyword_0_3_1() { return cColonKeyword_0_3_1; }
		
		//cVars+=ConstantParameter
		public Assignment getCVarsAssignment_0_3_2() { return cCVarsAssignment_0_3_2; }
		
		//ConstantParameter
		public RuleCall getCVarsConstantParameterParserRuleCall_0_3_2_0() { return cCVarsConstantParameterParserRuleCall_0_3_2_0; }
		
		//("," cVars+=ConstantParameter)*
		public Group getGroup_0_3_3() { return cGroup_0_3_3; }
		
		//","
		public Keyword getCommaKeyword_0_3_3_0() { return cCommaKeyword_0_3_3_0; }
		
		//cVars+=ConstantParameter
		public Assignment getCVarsAssignment_0_3_3_1() { return cCVarsAssignment_0_3_3_1; }
		
		//ConstantParameter
		public RuleCall getCVarsConstantParameterParserRuleCall_0_3_3_1_0() { return cCVarsConstantParameterParserRuleCall_0_3_3_1_0; }
		
		//("fun" ":" fnVars+=FunctionalParameter ("," fnVars+=FunctionalParameter)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"fun"
		public Keyword getFunKeyword_1_0() { return cFunKeyword_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//fnVars+=FunctionalParameter
		public Assignment getFnVarsAssignment_1_2() { return cFnVarsAssignment_1_2; }
		
		//FunctionalParameter
		public RuleCall getFnVarsFunctionalParameterParserRuleCall_1_2_0() { return cFnVarsFunctionalParameterParserRuleCall_1_2_0; }
		
		//("," fnVars+=FunctionalParameter)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//fnVars+=FunctionalParameter
		public Assignment getFnVarsAssignment_1_3_1() { return cFnVarsAssignment_1_3_1; }
		
		//FunctionalParameter
		public RuleCall getFnVarsFunctionalParameterParserRuleCall_1_3_1_0() { return cFnVarsFunctionalParameterParserRuleCall_1_3_1_0; }
		
		//("extra" "invariant" "formulas" ":" ifmVars+=FormulaParameter ("," ifmVars+=FormulaParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"extra"
		public Keyword getExtraKeyword_2_0() { return cExtraKeyword_2_0; }
		
		//"invariant"
		public Keyword getInvariantKeyword_2_1() { return cInvariantKeyword_2_1; }
		
		//"formulas"
		public Keyword getFormulasKeyword_2_2() { return cFormulasKeyword_2_2; }
		
		//":"
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }
		
		//ifmVars+=FormulaParameter
		public Assignment getIfmVarsAssignment_2_4() { return cIfmVarsAssignment_2_4; }
		
		//FormulaParameter
		public RuleCall getIfmVarsFormulaParameterParserRuleCall_2_4_0() { return cIfmVarsFormulaParameterParserRuleCall_2_4_0; }
		
		//("," ifmVars+=FormulaParameter)*
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//","
		public Keyword getCommaKeyword_2_5_0() { return cCommaKeyword_2_5_0; }
		
		//ifmVars+=FormulaParameter
		public Assignment getIfmVarsAssignment_2_5_1() { return cIfmVarsAssignment_2_5_1; }
		
		//FormulaParameter
		public RuleCall getIfmVarsFormulaParameterParserRuleCall_2_5_1_0() { return cIfmVarsFormulaParameterParserRuleCall_2_5_1_0; }
		
		//("requirement" "formulas" ":" rfmVars+=FormulaParameter ("," rfmVars+=FormulaParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"requirement"
		public Keyword getRequirementKeyword_3_0() { return cRequirementKeyword_3_0; }
		
		//"formulas"
		public Keyword getFormulasKeyword_3_1() { return cFormulasKeyword_3_1; }
		
		//":"
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//rfmVars+=FormulaParameter
		public Assignment getRfmVarsAssignment_3_3() { return cRfmVarsAssignment_3_3; }
		
		//FormulaParameter
		public RuleCall getRfmVarsFormulaParameterParserRuleCall_3_3_0() { return cRfmVarsFormulaParameterParserRuleCall_3_3_0; }
		
		//("," rfmVars+=FormulaParameter)*
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//","
		public Keyword getCommaKeyword_3_4_0() { return cCommaKeyword_3_4_0; }
		
		//rfmVars+=FormulaParameter
		public Assignment getRfmVarsAssignment_3_4_1() { return cRfmVarsAssignment_3_4_1; }
		
		//FormulaParameter
		public RuleCall getRfmVarsFormulaParameterParserRuleCall_3_4_1_0() { return cRfmVarsFormulaParameterParserRuleCall_3_4_1_0; }
		
		//("init" "state" ":" initState=UpdateStateVariable)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"init"
		public Keyword getInitKeyword_4_0() { return cInitKeyword_4_0; }
		
		//"state"
		public Keyword getStateKeyword_4_1() { return cStateKeyword_4_1; }
		
		//":"
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }
		
		//initState=UpdateStateVariable
		public Assignment getInitStateAssignment_4_3() { return cInitStateAssignment_4_3; }
		
		//UpdateStateVariable
		public RuleCall getInitStateUpdateStateVariableParserRuleCall_4_3_0() { return cInitStateUpdateStateVariableParserRuleCall_4_3_0; }
		
		//"final" "state" ":" finalState=UpdateStateVariable
		public Group getGroup_5() { return cGroup_5; }
		
		//"final"
		public Keyword getFinalKeyword_5_0() { return cFinalKeyword_5_0; }
		
		//"state"
		public Keyword getStateKeyword_5_1() { return cStateKeyword_5_1; }
		
		//":"
		public Keyword getColonKeyword_5_2() { return cColonKeyword_5_2; }
		
		//finalState=UpdateStateVariable
		public Assignment getFinalStateAssignment_5_3() { return cFinalStateAssignment_5_3; }
		
		//UpdateStateVariable
		public RuleCall getFinalStateUpdateStateVariableParserRuleCall_5_3_0() { return cFinalStateUpdateStateVariableParserRuleCall_5_3_0; }
		
		//"premise" prem=LemmaPremiseFormula "}" ";"
		public Group getGroup_6() { return cGroup_6; }
		
		//"premise"
		public Keyword getPremiseKeyword_6_0() { return cPremiseKeyword_6_0; }
		
		//prem=LemmaPremiseFormula
		public Assignment getPremAssignment_6_1() { return cPremAssignment_6_1; }
		
		//LemmaPremiseFormula
		public RuleCall getPremLemmaPremiseFormulaParserRuleCall_6_1_0() { return cPremLemmaPremiseFormulaParserRuleCall_6_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
		
		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }
	}
	public class LemmaPremiseFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.LemmaPremiseFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDisjunctionLemmaPremiseFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftFunApplicationParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final RuleCall cIMPLICATIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLemmaPremiseFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///* ======================= Formulas in lemma premises ======================= */
		//LemmaPremiseFormula:
		//   DisjunctionLemmaPremiseFormula | left=FunApplication IMPLICATION right=LemmaPremiseFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//DisjunctionLemmaPremiseFormula | left=FunApplication IMPLICATION right=LemmaPremiseFormula
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DisjunctionLemmaPremiseFormula
		public RuleCall getDisjunctionLemmaPremiseFormulaParserRuleCall_0() { return cDisjunctionLemmaPremiseFormulaParserRuleCall_0; }
		
		//left=FunApplication IMPLICATION right=LemmaPremiseFormula
		public Group getGroup_1() { return cGroup_1; }
		
		//left=FunApplication
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }
		
		//FunApplication
		public RuleCall getLeftFunApplicationParserRuleCall_1_0_0() { return cLeftFunApplicationParserRuleCall_1_0_0; }
		
		//IMPLICATION
		public RuleCall getIMPLICATIONTerminalRuleCall_1_1() { return cIMPLICATIONTerminalRuleCall_1_1; }
		
		//right=LemmaPremiseFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LemmaPremiseFormula
		public RuleCall getRightLemmaPremiseFormulaParserRuleCall_1_2_0() { return cRightLemmaPremiseFormulaParserRuleCall_1_2_0; }
	}
	public class DisjunctionLemmaPremiseFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DisjunctionLemmaPremiseFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionLemmaPremiseFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisjunctionLemmaPremiseFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDISJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDisjunctionLemmaPremiseFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//DisjunctionLemmaPremiseFormula:
		//    ConjunctionLemmaPremiseFormula ({DisjunctionLemmaPremiseFormula.left=current} DISJUNCTION right=DisjunctionLemmaPremiseFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjunctionLemmaPremiseFormula ({DisjunctionLemmaPremiseFormula.left=current} DISJUNCTION right=DisjunctionLemmaPremiseFormula)*
		public Group getGroup() { return cGroup; }
		
		//ConjunctionLemmaPremiseFormula
		public RuleCall getConjunctionLemmaPremiseFormulaParserRuleCall_0() { return cConjunctionLemmaPremiseFormulaParserRuleCall_0; }
		
		//({DisjunctionLemmaPremiseFormula.left=current} DISJUNCTION right=DisjunctionLemmaPremiseFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{DisjunctionLemmaPremiseFormula.left=current}
		public Action getDisjunctionLemmaPremiseFormulaLeftAction_1_0() { return cDisjunctionLemmaPremiseFormulaLeftAction_1_0; }
		
		//DISJUNCTION
		public RuleCall getDISJUNCTIONTerminalRuleCall_1_1() { return cDISJUNCTIONTerminalRuleCall_1_1; }
		
		//right=DisjunctionLemmaPremiseFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//DisjunctionLemmaPremiseFormula
		public RuleCall getRightDisjunctionLemmaPremiseFormulaParserRuleCall_1_2_0() { return cRightDisjunctionLemmaPremiseFormulaParserRuleCall_1_2_0; }
	}
	public class ConjunctionLemmaPremiseFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.ConjunctionLemmaPremiseFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryLemmaPremiseFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionLemmaPremiseFormulaLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONJUNCTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionLemmaPremiseFormulaParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjunctionLemmaPremiseFormula:
		//    PrimaryLemmaPremiseFormula ({ConjunctionLemmaPremiseFormula.left=current} CONJUNCTION right=ConjunctionLemmaPremiseFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryLemmaPremiseFormula ({ConjunctionLemmaPremiseFormula.left=current} CONJUNCTION right=ConjunctionLemmaPremiseFormula)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryLemmaPremiseFormula
		public RuleCall getPrimaryLemmaPremiseFormulaParserRuleCall_0() { return cPrimaryLemmaPremiseFormulaParserRuleCall_0; }
		
		//({ConjunctionLemmaPremiseFormula.left=current} CONJUNCTION right=ConjunctionLemmaPremiseFormula)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConjunctionLemmaPremiseFormula.left=current}
		public Action getConjunctionLemmaPremiseFormulaLeftAction_1_0() { return cConjunctionLemmaPremiseFormulaLeftAction_1_0; }
		
		//CONJUNCTION
		public RuleCall getCONJUNCTIONTerminalRuleCall_1_1() { return cCONJUNCTIONTerminalRuleCall_1_1; }
		
		//right=ConjunctionLemmaPremiseFormula
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjunctionLemmaPremiseFormula
		public RuleCall getRightConjunctionLemmaPremiseFormulaParserRuleCall_1_2_0() { return cRightConjunctionLemmaPremiseFormulaParserRuleCall_1_2_0; }
	}
	public class PrimaryLemmaPremiseFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PrimaryLemmaPremiseFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicNegationFormulaParserRuleCall_0_0 = (RuleCall)cAtomicAssignment_0.eContents().get(0);
		private final Assignment cAlwaysImpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAlwaysImpAlwaysImplicationParserRuleCall_1_0 = (RuleCall)cAlwaysImpAssignment_1.eContents().get(0);
		private final Assignment cInstAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInstPastExtraInvariantPatternInstanceParserRuleCall_2_0 = (RuleCall)cInstAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNestedFormulaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNestedFormulaLemmaPremiseFormulaParserRuleCall_3_1_0 = (RuleCall)cNestedFormulaAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryLemmaPremiseFormula:
		//    atomic=NegationFormula | alwaysImp=AlwaysImplication | inst=PastExtraInvariantPatternInstance | "(" nestedFormula=LemmaPremiseFormula ")";
		@Override public ParserRule getRule() { return rule; }
		
		//atomic=NegationFormula | alwaysImp=AlwaysImplication | inst=PastExtraInvariantPatternInstance | "(" nestedFormula=LemmaPremiseFormula ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//atomic=NegationFormula
		public Assignment getAtomicAssignment_0() { return cAtomicAssignment_0; }
		
		//NegationFormula
		public RuleCall getAtomicNegationFormulaParserRuleCall_0_0() { return cAtomicNegationFormulaParserRuleCall_0_0; }
		
		//alwaysImp=AlwaysImplication
		public Assignment getAlwaysImpAssignment_1() { return cAlwaysImpAssignment_1; }
		
		//AlwaysImplication
		public RuleCall getAlwaysImpAlwaysImplicationParserRuleCall_1_0() { return cAlwaysImpAlwaysImplicationParserRuleCall_1_0; }
		
		//inst=PastExtraInvariantPatternInstance
		public Assignment getInstAssignment_2() { return cInstAssignment_2; }
		
		//PastExtraInvariantPatternInstance
		public RuleCall getInstPastExtraInvariantPatternInstanceParserRuleCall_2_0() { return cInstPastExtraInvariantPatternInstanceParserRuleCall_2_0; }
		
		//"(" nestedFormula=LemmaPremiseFormula ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//nestedFormula=LemmaPremiseFormula
		public Assignment getNestedFormulaAssignment_3_1() { return cNestedFormulaAssignment_3_1; }
		
		//LemmaPremiseFormula
		public RuleCall getNestedFormulaLemmaPremiseFormulaParserRuleCall_3_1_0() { return cNestedFormulaLemmaPremiseFormulaParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class AlwaysImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.AlwaysImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysimpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateUpdateStateVariableCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateUpdateStateVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cStateUpdateStateVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftAlwaysImplicationParameterValueParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightAlwaysImplicationParameterValueParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AlwaysImplication:
		//    "alwaysimp" "(" state=[UpdateStateVariable] "," left=AlwaysImplicationParameterValue ","
		//    right=AlwaysImplicationParameterValue ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"alwaysimp" "(" state=[UpdateStateVariable] "," left=AlwaysImplicationParameterValue ","
		//right=AlwaysImplicationParameterValue ")"
		public Group getGroup() { return cGroup; }
		
		//"alwaysimp"
		public Keyword getAlwaysimpKeyword_0() { return cAlwaysimpKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//state=[UpdateStateVariable]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[UpdateStateVariable]
		public CrossReference getStateUpdateStateVariableCrossReference_2_0() { return cStateUpdateStateVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getStateUpdateStateVariableIDTerminalRuleCall_2_0_1() { return cStateUpdateStateVariableIDTerminalRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//left=AlwaysImplicationParameterValue
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//AlwaysImplicationParameterValue
		public RuleCall getLeftAlwaysImplicationParameterValueParserRuleCall_4_0() { return cLeftAlwaysImplicationParameterValueParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//right=AlwaysImplicationParameterValue
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//AlwaysImplicationParameterValue
		public RuleCall getRightAlwaysImplicationParameterValueParserRuleCall_6_0() { return cRightAlwaysImplicationParameterValueParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AlwaysImplicationParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.AlwaysImplicationParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLambdaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStateAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStateUpdateStateVariableParserRuleCall_0_1_0 = (RuleCall)cStateAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaNegationFormulaParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		//AlwaysImplicationParameterValue:
		//    ("lambda" state=UpdateStateVariable ".")? formula=NegationFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//("lambda" state=UpdateStateVariable ".")? formula=NegationFormula
		public Group getGroup() { return cGroup; }
		
		//("lambda" state=UpdateStateVariable ".")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"lambda"
		public Keyword getLambdaKeyword_0_0() { return cLambdaKeyword_0_0; }
		
		//state=UpdateStateVariable
		public Assignment getStateAssignment_0_1() { return cStateAssignment_0_1; }
		
		//UpdateStateVariable
		public RuleCall getStateUpdateStateVariableParserRuleCall_0_1_0() { return cStateUpdateStateVariableParserRuleCall_0_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//formula=NegationFormula
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }
		
		//NegationFormula
		public RuleCall getFormulaNegationFormulaParserRuleCall_1_0() { return cFormulaNegationFormulaParserRuleCall_1_0; }
	}
	public class PastExtraInvariantPatternInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.PastExtraInvariantPatternInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPatternPastExtraInvariantPatternCrossReference_0_0 = (CrossReference)cPatternAssignment_0.eContents().get(0);
		private final RuleCall cPatternPastExtraInvariantPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cPatternPastExtraInvariantPatternCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCParamsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCParamsConstantParameterParserRuleCall_2_2_0 = (RuleCall)cCParamsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cCParamsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cCParamsConstantParameterParserRuleCall_2_3_1_0 = (RuleCall)cCParamsAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFnParamsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_3_2_0 = (RuleCall)cFnParamsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFnParamsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFnParamsFunctionalParameterParserRuleCall_3_3_1_0 = (RuleCall)cFnParamsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFormulasKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFmParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_4_2_0 = (RuleCall)cFmParamsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFmParamsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFmParamsFormulaParameterParserRuleCall_4_3_1_0 = (RuleCall)cFmParamsAssignment_4_3_1.eContents().get(0);
		private final Keyword cCurrentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cStateUpdateStateVariableCrossReference_6_0 = (CrossReference)cStateAssignment_6.eContents().get(0);
		private final RuleCall cStateUpdateStateVariableIDTerminalRuleCall_6_0_1 = (RuleCall)cStateUpdateStateVariableCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PastExtraInvariantPatternInstance:
		//    pattern=[PastExtraInvariantPattern] "("
		//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//    "current" state=[UpdateStateVariable]
		//     ")";
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=[PastExtraInvariantPattern] "("
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		//"current" state=[UpdateStateVariable]
		// ")"
		public Group getGroup() { return cGroup; }
		
		//pattern=[PastExtraInvariantPattern]
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//[PastExtraInvariantPattern]
		public CrossReference getPatternPastExtraInvariantPatternCrossReference_0_0() { return cPatternPastExtraInvariantPatternCrossReference_0_0; }
		
		//ID
		public RuleCall getPatternPastExtraInvariantPatternIDTerminalRuleCall_0_0_1() { return cPatternPastExtraInvariantPatternIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"const"
		public Keyword getConstKeyword_2_0() { return cConstKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_2_2() { return cCParamsAssignment_2_2; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_2_2_0() { return cCParamsConstantParameterParserRuleCall_2_2_0; }
		
		//("," cParams+=ConstantParameter)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//cParams+=ConstantParameter
		public Assignment getCParamsAssignment_2_3_1() { return cCParamsAssignment_2_3_1; }
		
		//ConstantParameter
		public RuleCall getCParamsConstantParameterParserRuleCall_2_3_1_0() { return cCParamsConstantParameterParserRuleCall_2_3_1_0; }
		
		//("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"fun"
		public Keyword getFunKeyword_3_0() { return cFunKeyword_3_0; }
		
		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_3_2() { return cFnParamsAssignment_3_2; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_3_2_0() { return cFnParamsFunctionalParameterParserRuleCall_3_2_0; }
		
		//("," fnParams+=FunctionalParameter)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//fnParams+=FunctionalParameter
		public Assignment getFnParamsAssignment_3_3_1() { return cFnParamsAssignment_3_3_1; }
		
		//FunctionalParameter
		public RuleCall getFnParamsFunctionalParameterParserRuleCall_3_3_1_0() { return cFnParamsFunctionalParameterParserRuleCall_3_3_1_0; }
		
		//("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"formulas"
		public Keyword getFormulasKeyword_4_0() { return cFormulasKeyword_4_0; }
		
		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_4_2() { return cFmParamsAssignment_4_2; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_4_2_0() { return cFmParamsFormulaParameterParserRuleCall_4_2_0; }
		
		//("," fmParams+=FormulaParameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//fmParams+=FormulaParameter
		public Assignment getFmParamsAssignment_4_3_1() { return cFmParamsAssignment_4_3_1; }
		
		//FormulaParameter
		public RuleCall getFmParamsFormulaParameterParserRuleCall_4_3_1_0() { return cFmParamsFormulaParameterParserRuleCall_4_3_1_0; }
		
		//"current"
		public Keyword getCurrentKeyword_5() { return cCurrentKeyword_5; }
		
		//state=[UpdateStateVariable]
		public Assignment getStateAssignment_6() { return cStateAssignment_6; }
		
		//[UpdateStateVariable]
		public CrossReference getStateUpdateStateVariableCrossReference_6_0() { return cStateUpdateStateVariableCrossReference_6_0; }
		
		//ID
		public RuleCall getStateUpdateStateVariableIDTerminalRuleCall_6_0_1() { return cStateUpdateStateVariableIDTerminalRuleCall_6_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	public class EqPredicateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.EqPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQTildeEqualsSignKeyword_1_0 = (Keyword)cNOT_EQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqPredicate:
		//    EQ="==" | NOT_EQ="~=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOT_EQ="~="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQ="~="
		public EnumLiteralDeclaration getNOT_EQEnumLiteralDeclaration_1() { return cNOT_EQEnumLiteralDeclaration_1; }
		
		//"~="
		public Keyword getNOT_EQTildeEqualsSignKeyword_1_0() { return cNOT_EQTildeEqualsSignKeyword_1_0; }
	}
	public class CompPredicateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.CompPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_EQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompPredicate:
		//    LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">=";
		public EnumRule getRule() { return rule; }
		
		//LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQ="<="
		public EnumLiteralDeclaration getLESS_EQEnumLiteralDeclaration_2() { return cLESS_EQEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLESS_EQLessThanSignEqualsSignKeyword_2_0() { return cLESS_EQLessThanSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQ=">="
		public EnumLiteralDeclaration getGREATER_EQEnumLiteralDeclaration_3() { return cGREATER_EQEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGREATER_EQGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class AddOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.AddOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBMINUSHyphenMinusKeyword_1_0 = (Keyword)cBMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AddOperator:
		//    PLUS="+" | BMINUS="-";
		public EnumRule getRule() { return rule; }
		
		//PLUS="+" | BMINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//BMINUS="-"
		public EnumLiteralDeclaration getBMINUSEnumLiteralDeclaration_1() { return cBMINUSEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getBMINUSHyphenMinusKeyword_1_0() { return cBMINUSHyphenMinusKeyword_1_0; }
	}
	public class MulOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.MulOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODModKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulOperator:
		//    MUL="*" | DIV="/" | MOD="mod";
		public EnumRule getRule() { return rule; }
		
		//MUL="*" | DIV="/" | MOD="mod"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="mod"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"mod"
		public Keyword getMODModKeyword_2_0() { return cMODModKeyword_2_0; }
	}
	public class UnMinusElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.UnMinus");
		private final EnumLiteralDeclaration cUNMINUSEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cUNMINUSHyphenMinusKeyword_0 = (Keyword)cUNMINUSEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnMinus:
		//    UNMINUS="-";
		public EnumRule getRule() { return rule; }
		
		//UNMINUS="-"
		public EnumLiteralDeclaration getUNMINUSEnumLiteralDeclaration() { return cUNMINUSEnumLiteralDeclaration; }
		
		//"-"
		public Keyword getUNMINUSHyphenMinusKeyword_0() { return cUNMINUSHyphenMinusKeyword_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ElementElements pElement;
	private final BasicRequirementPatternElements pBasicRequirementPattern;
	private final DerivedRequirementPatternElements pDerivedRequirementPattern;
	private final VariableElements pVariable;
	private final VarDeclarationElements pVarDeclaration;
	private final ProgramVariableElements pProgramVariable;
	private final UpdateStateVariableElements pUpdateStateVariable;
	private final ConstantParameterElements pConstantParameter;
	private final FormulaParameterElements pFormulaParameter;
	private final FunctionalParameterElements pFunctionalParameter;
	private final FormulaElements pFormula;
	private final TerminalRule tDISJUNCTION;
	private final ConjunctionFormulaElements pConjunctionFormula;
	private final PrimaryFormulaElements pPrimaryFormula;
	private final TerminalRule tCONJUNCTION;
	private final OuterRequirementPatternInstanceElements pOuterRequirementPatternInstance;
	private final OuterRequirementPatternElements pOuterRequirementPattern;
	private final FormulaParameterValueElements pFormulaParameterValue;
	private final InnerFormulaElements pInnerFormula;
	private final ConjunctionInnerFormulaElements pConjunctionInnerFormula;
	private final PrimaryInnerFormulaElements pPrimaryInnerFormula;
	private final NegationFormulaElements pNegationFormula;
	private final TerminalRule tNEGATION;
	private final AtomicFormulaElements pAtomicFormula;
	private final BasicRequirementPatternInstanceElements pBasicRequirementPatternInstance;
	private final FutureRequirementPatternElements pFutureRequirementPattern;
	private final PastRequirementPatternElements pPastRequirementPattern;
	private final FutureExtraInvariantPatternElements pFutureExtraInvariantPattern;
	private final PastExtraInvariantPatternElements pPastExtraInvariantPattern;
	private final DerivedExtraInvariantPatternElements pDerivedExtraInvariantPattern;
	private final FilePathElements pFilePath;
	private final DirElements pDir;
	private final TermElements pTerm;
	private final ConjunctionTermElements pConjunctionTerm;
	private final NegationTermElements pNegationTerm;
	private final EqTermElements pEqTerm;
	private final EqPredicateElements eEqPredicate;
	private final CompareTermElements pCompareTerm;
	private final CompPredicateElements eCompPredicate;
	private final AddTermElements pAddTerm;
	private final AddOperatorElements eAddOperator;
	private final MulTermElements pMulTerm;
	private final MulOperatorElements eMulOperator;
	private final PowerTermElements pPowerTerm;
	private final TerminalRule tPOWER_OPERATOR;
	private final UnaryTermElements pUnaryTerm;
	private final UnMinusElements eUnMinus;
	private final PrimaryTermElements pPrimaryTerm;
	private final FunApplicationElements pFunApplication;
	private final TerminalRule tBOOLEAN_LITERAL;
	private final ConstantElements pConstant;
	private final NumericLiteralElements pNumericLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final TerminalRule tINTEGER;
	private final TerminalRule tDIGIT;
	private final RealLiteralElements pRealLiteral;
	private final TerminalRule tREAL;
	private final PatternFreeFormulaElements pPatternFreeFormula;
	private final ConjunctionPatternFreeFormulaElements pConjunctionPatternFreeFormula;
	private final PrimaryPatternFreeFormulaElements pPrimaryPatternFreeFormula;
	private final RequirementElements pRequirement;
	private final ExtraInvariantElements pExtraInvariant;
	private final PatternFreeFormulaParameterValueElements pPatternFreeFormulaParameterValue;
	private final FutureLemmasElements pFutureLemmas;
	private final PastLemmasElements pPastLemmas;
	private final DerivedLemmasElements pDerivedLemmas;
	private final LemmaElements pLemma;
	private final LemmaPremiseFormulaElements pLemmaPremiseFormula;
	private final TerminalRule tIMPLICATION;
	private final DisjunctionLemmaPremiseFormulaElements pDisjunctionLemmaPremiseFormula;
	private final ConjunctionLemmaPremiseFormulaElements pConjunctionLemmaPremiseFormula;
	private final PrimaryLemmaPremiseFormulaElements pPrimaryLemmaPremiseFormula;
	private final AlwaysImplicationElements pAlwaysImplication;
	private final AlwaysImplicationParameterValueElements pAlwaysImplicationParameterValue;
	private final PastExtraInvariantPatternInstanceElements pPastExtraInvariantPatternInstance;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RPLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pElement = new ElementElements();
		this.pBasicRequirementPattern = new BasicRequirementPatternElements();
		this.pDerivedRequirementPattern = new DerivedRequirementPatternElements();
		this.pVariable = new VariableElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pProgramVariable = new ProgramVariableElements();
		this.pUpdateStateVariable = new UpdateStateVariableElements();
		this.pConstantParameter = new ConstantParameterElements();
		this.pFormulaParameter = new FormulaParameterElements();
		this.pFunctionalParameter = new FunctionalParameterElements();
		this.pFormula = new FormulaElements();
		this.tDISJUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DISJUNCTION");
		this.pConjunctionFormula = new ConjunctionFormulaElements();
		this.pPrimaryFormula = new PrimaryFormulaElements();
		this.tCONJUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.CONJUNCTION");
		this.pOuterRequirementPatternInstance = new OuterRequirementPatternInstanceElements();
		this.pOuterRequirementPattern = new OuterRequirementPatternElements();
		this.pFormulaParameterValue = new FormulaParameterValueElements();
		this.pInnerFormula = new InnerFormulaElements();
		this.pConjunctionInnerFormula = new ConjunctionInnerFormulaElements();
		this.pPrimaryInnerFormula = new PrimaryInnerFormulaElements();
		this.pNegationFormula = new NegationFormulaElements();
		this.tNEGATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.NEGATION");
		this.pAtomicFormula = new AtomicFormulaElements();
		this.pBasicRequirementPatternInstance = new BasicRequirementPatternInstanceElements();
		this.pFutureRequirementPattern = new FutureRequirementPatternElements();
		this.pPastRequirementPattern = new PastRequirementPatternElements();
		this.pFutureExtraInvariantPattern = new FutureExtraInvariantPatternElements();
		this.pPastExtraInvariantPattern = new PastExtraInvariantPatternElements();
		this.pDerivedExtraInvariantPattern = new DerivedExtraInvariantPatternElements();
		this.pFilePath = new FilePathElements();
		this.pDir = new DirElements();
		this.pTerm = new TermElements();
		this.pConjunctionTerm = new ConjunctionTermElements();
		this.pNegationTerm = new NegationTermElements();
		this.pEqTerm = new EqTermElements();
		this.eEqPredicate = new EqPredicateElements();
		this.pCompareTerm = new CompareTermElements();
		this.eCompPredicate = new CompPredicateElements();
		this.pAddTerm = new AddTermElements();
		this.eAddOperator = new AddOperatorElements();
		this.pMulTerm = new MulTermElements();
		this.eMulOperator = new MulOperatorElements();
		this.pPowerTerm = new PowerTermElements();
		this.tPOWER_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.POWER_OPERATOR");
		this.pUnaryTerm = new UnaryTermElements();
		this.eUnMinus = new UnMinusElements();
		this.pPrimaryTerm = new PrimaryTermElements();
		this.pFunApplication = new FunApplicationElements();
		this.tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.BOOLEAN_LITERAL");
		this.pConstant = new ConstantElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.INTEGER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.DIGIT");
		this.pRealLiteral = new RealLiteralElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.REAL");
		this.pPatternFreeFormula = new PatternFreeFormulaElements();
		this.pConjunctionPatternFreeFormula = new ConjunctionPatternFreeFormulaElements();
		this.pPrimaryPatternFreeFormula = new PrimaryPatternFreeFormulaElements();
		this.pRequirement = new RequirementElements();
		this.pExtraInvariant = new ExtraInvariantElements();
		this.pPatternFreeFormulaParameterValue = new PatternFreeFormulaParameterValueElements();
		this.pFutureLemmas = new FutureLemmasElements();
		this.pPastLemmas = new PastLemmasElements();
		this.pDerivedLemmas = new DerivedLemmasElements();
		this.pLemma = new LemmaElements();
		this.pLemmaPremiseFormula = new LemmaPremiseFormulaElements();
		this.tIMPLICATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.rpl.RPL.IMPLICATION");
		this.pDisjunctionLemmaPremiseFormula = new DisjunctionLemmaPremiseFormulaElements();
		this.pConjunctionLemmaPremiseFormula = new ConjunctionLemmaPremiseFormulaElements();
		this.pPrimaryLemmaPremiseFormula = new PrimaryLemmaPremiseFormulaElements();
		this.pAlwaysImplication = new AlwaysImplicationElements();
		this.pAlwaysImplicationParameterValue = new AlwaysImplicationParameterValueElements();
		this.pPastExtraInvariantPatternInstance = new PastExtraInvariantPatternInstanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("su.nsk.iae.rpl.RPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (imports+=Import)*
	//    (elements+=Element)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//    "import" importURI=STRING ";";
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Element:
	//    VarDeclaration | DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern |
	//    DerivedExtraInvariantPattern | FutureExtraInvariantPattern | PastExtraInvariantPattern | Requirement | ExtraInvariant;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//BasicRequirementPattern:
	//    DerivedRequirementPattern | FutureRequirementPattern | PastRequirementPattern;
	public BasicRequirementPatternElements getBasicRequirementPatternAccess() {
		return pBasicRequirementPattern;
	}
	
	public ParserRule getBasicRequirementPatternRule() {
		return getBasicRequirementPatternAccess().getRule();
	}
	
	//    /* ======================= Derived requirement pattern ======================= */
	//DerivedRequirementPattern:
	//    'derivedreq' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)? ")"
	//   ("=" definition=Formula | "from" file=FilePath "with" extraInvPattern=[DerivedExtraInvariantPattern])
	//   (lemmas=DerivedLemmas)? ";";
	public DerivedRequirementPatternElements getDerivedRequirementPatternAccess() {
		return pDerivedRequirementPattern;
	}
	
	public ParserRule getDerivedRequirementPatternRule() {
		return getDerivedRequirementPatternAccess().getRule();
	}
	
	//Variable:
	//    ConstantParameter | ProgramVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///* ======================= Variables ======================= */
	//VarDeclaration:
	//    "var" vars+=ProgramVariable ("," vars+=ProgramVariable)* ";";
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//ProgramVariable:
	//    name=ID;
	public ProgramVariableElements getProgramVariableAccess() {
		return pProgramVariable;
	}
	
	public ParserRule getProgramVariableRule() {
		return getProgramVariableAccess().getRule();
	}
	
	//UpdateStateVariable:
	//    name=ID;
	public UpdateStateVariableElements getUpdateStateVariableAccess() {
		return pUpdateStateVariable;
	}
	
	public ParserRule getUpdateStateVariableRule() {
		return getUpdateStateVariableAccess().getRule();
	}
	
	///* ======================= Pattern parameters ======================= */
	//ConstantParameter:
	//    name=ID;
	public ConstantParameterElements getConstantParameterAccess() {
		return pConstantParameter;
	}
	
	public ParserRule getConstantParameterRule() {
		return getConstantParameterAccess().getRule();
	}
	
	//FormulaParameter:
	//    name=ID;
	public FormulaParameterElements getFormulaParameterAccess() {
		return pFormulaParameter;
	}
	
	public ParserRule getFormulaParameterRule() {
		return getFormulaParameterAccess().getRule();
	}
	
	//FunctionalParameter:
	//    name=ID;
	public FunctionalParameterElements getFunctionalParameterAccess() {
		return pFunctionalParameter;
	}
	
	public ParserRule getFunctionalParameterRule() {
		return getFunctionalParameterAccess().getRule();
	}
	
	///* ======================= Top-level formulas ======================= */
	//Formula:
	//    ConjunctionFormula ({Formula.left=current} DISJUNCTION right=Formula)*;
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//terminal DISJUNCTION:
	//    "OR" | "||" | "\\/";
	public TerminalRule getDISJUNCTIONRule() {
		return tDISJUNCTION;
	}
	
	//ConjunctionFormula:
	//    PrimaryFormula ({Conjunction.left=current} CONJUNCTION right=ConjunctionFormula)*;
	public ConjunctionFormulaElements getConjunctionFormulaAccess() {
		return pConjunctionFormula;
	}
	
	public ParserRule getConjunctionFormulaRule() {
		return getConjunctionFormulaAccess().getRule();
	}
	
	//PrimaryFormula:
	//    patternInst=OuterRequirementPatternInstance | "(" nestedFormula=Formula ")";
	public PrimaryFormulaElements getPrimaryFormulaAccess() {
		return pPrimaryFormula;
	}
	
	public ParserRule getPrimaryFormulaRule() {
		return getPrimaryFormulaAccess().getRule();
	}
	
	//terminal CONJUNCTION:
	//    "AND" | "&" | "&&" | "/\\";
	public TerminalRule getCONJUNCTIONRule() {
		return tCONJUNCTION;
	}
	
	//OuterRequirementPatternInstance:
	//    pattern=[OuterRequirementPattern] "("
	//    ("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
	//      ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
	//     ")";
	public OuterRequirementPatternInstanceElements getOuterRequirementPatternInstanceAccess() {
		return pOuterRequirementPatternInstance;
	}
	
	public ParserRule getOuterRequirementPatternInstanceRule() {
		return getOuterRequirementPatternInstanceAccess().getRule();
	}
	
	//OuterRequirementPattern:
	//    DerivedRequirementPattern | PastRequirementPattern;
	public OuterRequirementPatternElements getOuterRequirementPatternAccess() {
		return pOuterRequirementPattern;
	}
	
	public ParserRule getOuterRequirementPatternRule() {
		return getOuterRequirementPatternAccess().getRule();
	}
	
	///* ======================= Inner formulas ======================= */
	//FormulaParameterValue:
	//    ("lambda" (states+=UpdateStateVariable)+ ".")? formula=InnerFormula;
	public FormulaParameterValueElements getFormulaParameterValueAccess() {
		return pFormulaParameterValue;
	}
	
	public ParserRule getFormulaParameterValueRule() {
		return getFormulaParameterValueAccess().getRule();
	}
	
	//InnerFormula:
	//    ConjunctionInnerFormula ({InnerFormula.left=current} DISJUNCTION right=InnerFormula)*;
	public InnerFormulaElements getInnerFormulaAccess() {
		return pInnerFormula;
	}
	
	public ParserRule getInnerFormulaRule() {
		return getInnerFormulaAccess().getRule();
	}
	
	//ConjunctionInnerFormula:
	//    PrimaryInnerFormula ({ConnunctionInnerFormula.left=current} CONJUNCTION right=ConjunctionInnerFormula)*;
	public ConjunctionInnerFormulaElements getConjunctionInnerFormulaAccess() {
		return pConjunctionInnerFormula;
	}
	
	public ParserRule getConjunctionInnerFormulaRule() {
		return getConjunctionInnerFormulaAccess().getRule();
	}
	
	//PrimaryInnerFormula:
	//    atomic=NegationFormula | patternInst=BasicRequirementPatternInstance | "(" nestedFormula=InnerFormula ")";
	public PrimaryInnerFormulaElements getPrimaryInnerFormulaAccess() {
		return pPrimaryInnerFormula;
	}
	
	public ParserRule getPrimaryInnerFormulaRule() {
		return getPrimaryInnerFormulaAccess().getRule();
	}
	
	//NegationFormula:
	//    (neg?=NEGATION)? right=AtomicFormula;
	public NegationFormulaElements getNegationFormulaAccess() {
		return pNegationFormula;
	}
	
	public ParserRule getNegationFormulaRule() {
		return getNegationFormulaAccess().getRule();
	}
	
	//terminal NEGATION:
	//    "NOT" | "~";
	public TerminalRule getNEGATIONRule() {
		return tNEGATION;
	}
	
	//AtomicFormula:
	//    boolLiteral=BOOLEAN_LITERAL | "frm" "(" boolTerm=Term ")" |
	//    fmParam=[FormulaParameter] ("(" states+=[UpdateStateVariable] ("," states+=[UpdateStateVariable])* ")")?;
	public AtomicFormulaElements getAtomicFormulaAccess() {
		return pAtomicFormula;
	}
	
	public ParserRule getAtomicFormulaRule() {
		return getAtomicFormulaAccess().getRule();
	}
	
	//BasicRequirementPatternInstance:
	//    pattern=[BasicRequirementPattern] "("
	//    ("const" ":" cParams+=Term ("," cParams+=Term)*)? ("formulas" ":" fmParams+=FormulaParameterValue ("," fmParams+=FormulaParameterValue)*)?
	//      ("final" ":" finState=[UpdateStateVariable] ("current" ":" curState=[UpdateStateVariable])?)?
	//     ")";
	public BasicRequirementPatternInstanceElements getBasicRequirementPatternInstanceAccess() {
		return pBasicRequirementPatternInstance;
	}
	
	public ParserRule getBasicRequirementPatternInstanceRule() {
		return getBasicRequirementPatternInstanceAccess().getRule();
	}
	
	///* ======================= Pattern declarations ======================= */
	//FutureRequirementPattern:
	//    'futurereq' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//     ")"
	//     "from" file=FilePath "with" extraInvPattern=[FutureExtraInvariantPattern] (lessas=FutureLemmas)? ";";
	public FutureRequirementPatternElements getFutureRequirementPatternAccess() {
		return pFutureRequirementPattern;
	}
	
	public ParserRule getFutureRequirementPatternRule() {
		return getFutureRequirementPatternAccess().getRule();
	}
	
	//PastRequirementPattern:
	//    'pastreq' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter (","cParams+=ConstantParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//    ")"
	//    "from" file=FilePath "with" extraInvPattern=[PastExtraInvariantPattern] (lemmas=PastLemmas)? ";";
	public PastRequirementPatternElements getPastRequirementPatternAccess() {
		return pPastRequirementPattern;
	}
	
	public ParserRule getPastRequirementPatternRule() {
		return getPastRequirementPatternAccess().getRule();
	}
	
	//FutureExtraInvariantPattern:
	//    'futureeinv' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//    ")"
	//    ("from" file=FilePath)? (lemmas=FutureLemmas)? ";";
	public FutureExtraInvariantPatternElements getFutureExtraInvariantPatternAccess() {
		return pFutureExtraInvariantPattern;
	}
	
	public ParserRule getFutureExtraInvariantPatternRule() {
		return getFutureExtraInvariantPatternAccess().getRule();
	}
	
	//PastExtraInvariantPattern:
	//    'pasteinv' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//    ")"
	//    ("from" file=FilePath)? (lemmas=PastLemmas)? ";";
	public PastExtraInvariantPatternElements getPastExtraInvariantPatternAccess() {
		return pPastExtraInvariantPattern;
	}
	
	public ParserRule getPastExtraInvariantPatternRule() {
		return getPastExtraInvariantPatternAccess().getRule();
	}
	
	//DerivedExtraInvariantPattern:
	//    'derivedeinv' 'pattern' name=ID '('
	//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//    ")"
	//    ("from" file=FilePath)? (lemmas=DerivedLemmas)? ";";
	public DerivedExtraInvariantPatternElements getDerivedExtraInvariantPatternAccess() {
		return pDerivedExtraInvariantPattern;
	}
	
	public ParserRule getDerivedExtraInvariantPatternRule() {
		return getDerivedExtraInvariantPatternAccess().getRule();
	}
	
	//FilePath:
	//    '/'? (Dir '/')* ID;
	public FilePathElements getFilePathAccess() {
		return pFilePath;
	}
	
	public ParserRule getFilePathRule() {
		return getFilePathAccess().getRule();
	}
	
	//Dir:
	//    ID | "." | "..";
	public DirElements getDirAccess() {
		return pDir;
	}
	
	public ParserRule getDirRule() {
		return getDirAccess().getRule();
	}
	
	///* ======================= Terms ======================= */
	//Term:
	//    ConjunctionTerm ({Term.left=current} DISJUNCTION right=Term)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//ConjunctionTerm:
	//    NegationTerm ({ConjunctionTerm.left=current} CONJUNCTION right=ConjunctionTerm)*;
	public ConjunctionTermElements getConjunctionTermAccess() {
		return pConjunctionTerm;
	}
	
	public ParserRule getConjunctionTermRule() {
		return getConjunctionTermAccess().getRule();
	}
	
	//NegationTerm:
	//    EqTerm | (NEGATION right=EqTerm);
	public NegationTermElements getNegationTermAccess() {
		return pNegationTerm;
	}
	
	public ParserRule getNegationTermRule() {
		return getNegationTermAccess().getRule();
	}
	
	//EqTerm:
	//    CompareTerm ({EqTerm.left=current} eqPred=EqPredicate right=EqTerm)*;
	public EqTermElements getEqTermAccess() {
		return pEqTerm;
	}
	
	public ParserRule getEqTermRule() {
		return getEqTermAccess().getRule();
	}
	
	//enum EqPredicate:
	//    EQ="==" | NOT_EQ="~=";
	public EqPredicateElements getEqPredicateAccess() {
		return eEqPredicate;
	}
	
	public EnumRule getEqPredicateRule() {
		return getEqPredicateAccess().getRule();
	}
	
	//CompareTerm:
	//    AddTerm ({CompareTerm.left=current} compPred=CompPredicate right=CompareTerm)*;
	public CompareTermElements getCompareTermAccess() {
		return pCompareTerm;
	}
	
	public ParserRule getCompareTermRule() {
		return getCompareTermAccess().getRule();
	}
	
	//enum CompPredicate:
	//    LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">=";
	public CompPredicateElements getCompPredicateAccess() {
		return eCompPredicate;
	}
	
	public EnumRule getCompPredicateRule() {
		return getCompPredicateAccess().getRule();
	}
	
	//AddTerm:
	//    MulTerm ({AddTerm.left=current} addOp=AddOperator right=AddTerm)*;
	public AddTermElements getAddTermAccess() {
		return pAddTerm;
	}
	
	public ParserRule getAddTermRule() {
		return getAddTermAccess().getRule();
	}
	
	//enum AddOperator:
	//    PLUS="+" | BMINUS="-";
	public AddOperatorElements getAddOperatorAccess() {
		return eAddOperator;
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//MulTerm:
	//    PowerTerm ({MulTerm.left=current} mulOp=MulOperator right=MulTerm)*;
	public MulTermElements getMulTermAccess() {
		return pMulTerm;
	}
	
	public ParserRule getMulTermRule() {
		return getMulTermAccess().getRule();
	}
	
	//enum MulOperator:
	//    MUL="*" | DIV="/" | MOD="mod";
	public MulOperatorElements getMulOperatorAccess() {
		return eMulOperator;
	}
	
	public EnumRule getMulOperatorRule() {
		return getMulOperatorAccess().getRule();
	}
	
	//PowerTerm:
	//    UnaryTerm ({PowerTerm.left=current} POWER_OPERATOR right=PowerTerm)*;
	public PowerTermElements getPowerTermAccess() {
		return pPowerTerm;
	}
	
	public ParserRule getPowerTermRule() {
		return getPowerTermAccess().getRule();
	}
	
	//terminal POWER_OPERATOR:
	//    "**";
	public TerminalRule getPOWER_OPERATORRule() {
		return tPOWER_OPERATOR;
	}
	
	//UnaryTerm:
	//    PrimaryTerm | (unOp=UnMinus right=PrimaryTerm);
	public UnaryTermElements getUnaryTermAccess() {
		return pUnaryTerm;
	}
	
	public ParserRule getUnaryTermRule() {
		return getUnaryTermAccess().getRule();
	}
	
	//enum UnMinus:
	//    UNMINUS="-";
	public UnMinusElements getUnMinusAccess() {
		return eUnMinus;
	}
	
	public EnumRule getUnMinusRule() {
		return getUnMinusAccess().getRule();
	}
	
	//PrimaryTerm:
	//    Constant |  variable=[Variable] | state=[UpdateStateVariable] "[" variable=[ProgramVariable] "]" | FunApplication |
	//    "(" nestedTerm=Term ")";
	public PrimaryTermElements getPrimaryTermAccess() {
		return pPrimaryTerm;
	}
	
	public ParserRule getPrimaryTermRule() {
		return getPrimaryTermAccess().getRule();
	}
	
	//FunApplication:
	//    fnParam=[FunctionalParameter] "(" state=[UpdateStateVariable] ")";
	public FunApplicationElements getFunApplicationAccess() {
		return pFunApplication;
	}
	
	public ParserRule getFunApplicationRule() {
		return getFunApplicationAccess().getRule();
	}
	
	///* ======================= Literals ======================= */
	//terminal BOOLEAN_LITERAL:
	//    "True" | "False";
	public TerminalRule getBOOLEAN_LITERALRule() {
		return tBOOLEAN_LITERAL;
	}
	
	//Constant:
	//    num=NumericLiteral | bool=BOOLEAN_LITERAL;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//NumericLiteral:
	//    IntegerLiteral | RealLiteral;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//    (sig?="-")? value=INTEGER;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//terminal INTEGER returns ecore::EString:
	//    DIGIT+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal fragment DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//RealLiteral:
	//    (sig?="-")? value=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//terminal REAL returns ecore::EString:
	//    INTEGER '.' INTEGER;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	// /* ======================= Formulas without patterns ======================= */
	//PatternFreeFormula:
	//    ConjunctionPatternFreeFormula ({PatternFreeFormula.left=current} DISJUNCTION right=PatternFreeFormula)*;
	public PatternFreeFormulaElements getPatternFreeFormulaAccess() {
		return pPatternFreeFormula;
	}
	
	public ParserRule getPatternFreeFormulaRule() {
		return getPatternFreeFormulaAccess().getRule();
	}
	
	//ConjunctionPatternFreeFormula:
	//    PrimaryPatternFreeFormula ({ConjunctionPatternFreeFormula.left=current} CONJUNCTION right=ConjunctionPatternFreeFormula)*;
	public ConjunctionPatternFreeFormulaElements getConjunctionPatternFreeFormulaAccess() {
		return pConjunctionPatternFreeFormula;
	}
	
	public ParserRule getConjunctionPatternFreeFormulaRule() {
		return getConjunctionPatternFreeFormulaAccess().getRule();
	}
	
	//PrimaryPatternFreeFormula:
	//    atomic=NegationFormula | "(" nestedFormula=PatternFreeFormula ")";
	public PrimaryPatternFreeFormulaElements getPrimaryPatternFreeFormulaAccess() {
		return pPrimaryPatternFreeFormula;
	}
	
	public ParserRule getPrimaryPatternFreeFormulaRule() {
		return getPrimaryPatternFreeFormulaAccess().getRule();
	}
	
	//Requirement:
	//    "requirement" name=ID (("=" pattern=[DerivedRequirementPattern] "("
	//    ("const" ":" cParams+=Term ("," cParams+=Term)*)?
	//    ("formulas" ":" fmParams+=PatternFreeFormulaParameterValue ("," fmParams+=PatternFreeFormulaParameterValue)*)? ")") |
	//    (":" pattern=[DerivedRequirementPattern] "with" extraIn=ID)) ";";
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//ExtraInvariant:
	//    "extra" "invariant" name=ID (":" pattern=[DerivedExtraInvariantPattern] "for" reqName=ID |
	//        "for" req=[Requirement]
	//    ) ";";
	public ExtraInvariantElements getExtraInvariantAccess() {
		return pExtraInvariant;
	}
	
	public ParserRule getExtraInvariantRule() {
		return getExtraInvariantAccess().getRule();
	}
	
	//PatternFreeFormulaParameterValue:
	//    ("lambda" states+=UpdateStateVariable+ ".")? formula=PatternFreeFormula;
	public PatternFreeFormulaParameterValueElements getPatternFreeFormulaParameterValueAccess() {
		return pPatternFreeFormulaParameterValue;
	}
	
	public ParserRule getPatternFreeFormulaParameterValueRule() {
		return getPatternFreeFormulaParameterValueAccess().getRule();
	}
	
	///* ======================= Lemmas ======================= */
	//FutureLemmas:
	//    {FutureLemmas} ("lemmas" "{" (("LS1" L1=Lemma)? & ("LS2" L2=Lemma)? & ("LS3" L3=Lemma)?) "}");
	public FutureLemmasElements getFutureLemmasAccess() {
		return pFutureLemmas;
	}
	
	public ParserRule getFutureLemmasRule() {
		return getFutureLemmasAccess().getRule();
	}
	
	//PastLemmas:
	//    {PastLemmas} ("lemmas" "{" (("LS4" L4=Lemma)? & ("LS5" L5=Lemma)? & ("LS6" L6=Lemma)? & ("LS7" L7=Lemma)?) "}");
	public PastLemmasElements getPastLemmasAccess() {
		return pPastLemmas;
	}
	
	public ParserRule getPastLemmasRule() {
		return getPastLemmasAccess().getRule();
	}
	
	//DerivedLemmas:
	//    {DerivedLemmas} ("lemmas" "{" (("LS8" L8=Lemma)? & ("LS9" L9=Lemma)?) "}");
	public DerivedLemmasElements getDerivedLemmasAccess() {
		return pDerivedLemmas;
	}
	
	public ParserRule getDerivedLemmasRule() {
		return getDerivedLemmasAccess().getRule();
	}
	
	//Lemma:
	//    "lemma" name=ID "{"
	//    ("const" ":" cVars+=ConstantParameter ("," cVars+=ConstantParameter)*)? &
	//    ("fun" ":" fnVars+=FunctionalParameter ("," fnVars+=FunctionalParameter)*)? &
	//   ("extra" "invariant" "formulas" ":" ifmVars+=FormulaParameter ("," ifmVars+=FormulaParameter)*)? &
	//   ("requirement" "formulas" ":" rfmVars+=FormulaParameter ("," rfmVars+=FormulaParameter)*)? &
	//   ("init" "state" ":" initState=UpdateStateVariable)? &
	//   "final" "state" ":" finalState=UpdateStateVariable &
	//   "premise" prem=LemmaPremiseFormula "}" ";";
	public LemmaElements getLemmaAccess() {
		return pLemma;
	}
	
	public ParserRule getLemmaRule() {
		return getLemmaAccess().getRule();
	}
	
	///* ======================= Formulas in lemma premises ======================= */
	//LemmaPremiseFormula:
	//   DisjunctionLemmaPremiseFormula | left=FunApplication IMPLICATION right=LemmaPremiseFormula;
	public LemmaPremiseFormulaElements getLemmaPremiseFormulaAccess() {
		return pLemmaPremiseFormula;
	}
	
	public ParserRule getLemmaPremiseFormulaRule() {
		return getLemmaPremiseFormulaAccess().getRule();
	}
	
	//terminal IMPLICATION:
	//    "-->";
	public TerminalRule getIMPLICATIONRule() {
		return tIMPLICATION;
	}
	
	//DisjunctionLemmaPremiseFormula:
	//    ConjunctionLemmaPremiseFormula ({DisjunctionLemmaPremiseFormula.left=current} DISJUNCTION right=DisjunctionLemmaPremiseFormula)*;
	public DisjunctionLemmaPremiseFormulaElements getDisjunctionLemmaPremiseFormulaAccess() {
		return pDisjunctionLemmaPremiseFormula;
	}
	
	public ParserRule getDisjunctionLemmaPremiseFormulaRule() {
		return getDisjunctionLemmaPremiseFormulaAccess().getRule();
	}
	
	//ConjunctionLemmaPremiseFormula:
	//    PrimaryLemmaPremiseFormula ({ConjunctionLemmaPremiseFormula.left=current} CONJUNCTION right=ConjunctionLemmaPremiseFormula)*;
	public ConjunctionLemmaPremiseFormulaElements getConjunctionLemmaPremiseFormulaAccess() {
		return pConjunctionLemmaPremiseFormula;
	}
	
	public ParserRule getConjunctionLemmaPremiseFormulaRule() {
		return getConjunctionLemmaPremiseFormulaAccess().getRule();
	}
	
	//PrimaryLemmaPremiseFormula:
	//    atomic=NegationFormula | alwaysImp=AlwaysImplication | inst=PastExtraInvariantPatternInstance | "(" nestedFormula=LemmaPremiseFormula ")";
	public PrimaryLemmaPremiseFormulaElements getPrimaryLemmaPremiseFormulaAccess() {
		return pPrimaryLemmaPremiseFormula;
	}
	
	public ParserRule getPrimaryLemmaPremiseFormulaRule() {
		return getPrimaryLemmaPremiseFormulaAccess().getRule();
	}
	
	//AlwaysImplication:
	//    "alwaysimp" "(" state=[UpdateStateVariable] "," left=AlwaysImplicationParameterValue ","
	//    right=AlwaysImplicationParameterValue ")";
	public AlwaysImplicationElements getAlwaysImplicationAccess() {
		return pAlwaysImplication;
	}
	
	public ParserRule getAlwaysImplicationRule() {
		return getAlwaysImplicationAccess().getRule();
	}
	
	//AlwaysImplicationParameterValue:
	//    ("lambda" state=UpdateStateVariable ".")? formula=NegationFormula;
	public AlwaysImplicationParameterValueElements getAlwaysImplicationParameterValueAccess() {
		return pAlwaysImplicationParameterValue;
	}
	
	public ParserRule getAlwaysImplicationParameterValueRule() {
		return getAlwaysImplicationParameterValueAccess().getRule();
	}
	
	//PastExtraInvariantPatternInstance:
	//    pattern=[PastExtraInvariantPattern] "("
	//    ("const" ":" cParams+=ConstantParameter ("," cParams+=ConstantParameter)*)?
	//    ("fun" ":" fnParams+=FunctionalParameter ("," fnParams+=FunctionalParameter)*)?
	//    ("formulas" ":" fmParams+=FormulaParameter ("," fmParams+=FormulaParameter)*)?
	//    "current" state=[UpdateStateVariable]
	//     ")";
	public PastExtraInvariantPatternInstanceElements getPastExtraInvariantPatternInstanceAccess() {
		return pPastExtraInvariantPatternInstance;
	}
	
	public ParserRule getPastExtraInvariantPatternInstanceRule() {
		return getPastExtraInvariantPatternInstanceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
