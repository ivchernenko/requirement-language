import "Basic_Patterns.rpl" ; 
derivedeinv pattern always2_inv ( fun : b_0 simple formulas : A11 , A12 formulas : A2_1 ) 
lemmas {
 LS8 lemma always2_inv_saving_gen { 
fun : b_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 init state : s0 final state : s 
premise ( ( True AND True AND alwaysimp ( s0 , lambda r1 . A2_1 ( s0 , r1 ) , lambda r1 . A2_1 ( s , r1 ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A2_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ; 
LS9 lemma always2einv_imp_req_gen {
 fun : b_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 requirement formulas : A2 final state : s0 
premise True AND True AND alwaysimp ( s0 , lambda r1 . A2_1 ( s0 , r1 ) , lambda r1 . A2 ( s0 , r1 ) ) 
} ; 
} ;
 derivedeinv pattern always2_inv_part ( fun : b_0 simple formulas : A11 , A12 , A2 ) 
lemmas { 
LS8 lemma always2_inv_saving { 
fun : b_0 simple formulas : A11 , A12 , A2 init state : s0 final state : s 
premise ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR A2 ( s ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ; 
LS9 lemma always2einv_imp_req { 
fun : b_0 simple formulas : A11 , A12 , A2 final state : s 
premise True
 } ; 
} ; 

derivedreq pattern always2 ( simple formulas : A11 , A12 formulas : A2 ) with always2_inv ; 
derivedreq pattern always2_part ( simple formulas : A11 , A12 , A2 ) with always2_inv_part ; 

derivedeinv pattern P1_1_inv ( const : t fun : t1_0 simple formulas : A1 formulas : A2_1 , A3_1 ) 
lemmas { LS8 lemma P1_1_inv_saving_gen {
 const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) = 0 ) OR A3_1 ( s , s ) AND frm ( t1_0 ( s0 ) <= t ) OR A2_1 ( s , s ) AND frm ( t1_0 ( s0 ) < t1_0 ( s ) ) ) ) AND ( NOT A1 ( s ) OR A3_1 ( s , s ) OR A2_1 ( s , s ) AND frm ( t1_0 ( s ) > 0 ) ) 
} ; 
LS9 lemma P1_1einv_imp_req_gen { 
const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) AND frm ( t1_0 ( s0 ) <= t ) 
} ; 
} ; 
derivedeinv pattern P1_1_inv_part ( const : t fun : t1_0 simple formulas : A1 , A2 , A3 )
 lemmas { LS8 lemma P1_1_inv_saving { const : t fun : t1_0 simple formulas : A1 , A2 , A3 init state : s0 final state : s 
premise ( frm ( t1_0 ( s0 ) = 0 ) OR A3 ( s ) AND frm ( t1_0 ( s0 ) <= t ) OR A2 ( s ) AND frm ( t1_0 ( s0 ) < t1_0 ( s ) ) ) AND ( NOT A1 ( s ) OR A3 ( s ) OR A2 ( s ) AND frm ( t1_0 ( s ) > 0 ) )
 } ;
 LS9 lemma P1_1einv_imp_req { 
const : t fun : t1_0 simple formulas : A1 , A2 , A3 final state : s 
premise frm ( t1_0 ( s ) <= t ) 
} ;
 } ; 
derivedreq pattern P1_1 ( const : t simple formulas : A1 formulas : A2 , A3 ) with P1_1_inv ; 
derivedreq pattern P1_1_part ( const : t simple formulas : A1 , A2 , A3 ) with P1_1_inv_part ; 

derivedeinv pattern P1_2_inv ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 formulas : A2_1 , A3_1 ) 
lemmas { 
LS8 lemma P1_2_inv_saving_gen { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( ( True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) = 0 ) OR A3_1 ( s , s ) AND frm ( t1_0 ( s0 ) <= t ) OR A2_1 ( s , s ) AND frm ( t1_0 ( s0 ) < t1_0 ( s ) ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A3_1 ( s , s ) OR A2_1 ( s , s ) AND frm ( t1_0 ( s ) > 0 ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ; 
LS9 lemma P1_2einv_imp_req_gen { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) AND frm ( t1_0 ( s0 ) <= t )
 } ; 
} ;
 derivedeinv pattern P1_2_inv_part ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 ) 
lemmas { LS8 lemma P1_2_inv_saving { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 init state : s0 final state : s 
premise ( ( frm ( t1_0 ( s0 ) = 0 ) OR A3 ( s ) AND frm ( t1_0 ( s0 ) <= t ) OR A2 ( s ) AND frm ( t1_0 ( s0 ) < t1_0 ( s ) ) ) AND ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR A3 ( s ) OR A2 ( s ) AND frm ( t1_0 ( s ) > 0 ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ; 
LS9 lemma P1_2einv_imp_req { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 final state : s 
premise frm ( t1_0 ( s ) <= t )
 } ;
 } ; 
derivedreq pattern P1_2 ( const : t simple formulas : A11 , A12 formulas : A2 , A3 ) with P1_2_inv ; 
derivedreq pattern P1_2_part ( const : t simple formulas : A11 , A12 , A2 , A3 ) with P1_2_inv_part ; 

derivedeinv pattern P2_1_inv ( const : t fun : t1_0 simple formulas : A1 formulas : A2_1 ) 
lemmas {
 LS8 lemma P2_1_inv_saving_gen {
 const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 init state : s0 final state : s 
premise ( True AND ( frm ( t = 0 ) OR alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) + 1 >= t ) OR A2_1 ( s , s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( NOT A1 ( s ) OR frm ( t = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A2_1 ( s , s ) )
 } ; 
LS9 lemma P2_1einv_imp_req_gen { 
const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 requirement formulas : A2 final state : s0 
premise True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) )
 } ;
 } ;
 derivedeinv pattern P2_1_inv_part ( const : t fun : t1_0 simple formulas : A1 , A2 ) 
lemmas {
 LS8 lemma P2_1_inv_saving { 
const : t fun : t1_0 simple formulas : A1 , A2 init state : s0 final state : s 
premise ( frm ( t = 0 ) OR ( frm ( t1_0 ( s0 ) + 1 >= t ) OR A2 ( s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( NOT A1 ( s ) OR frm ( t = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A2 ( s ) )
 } ; 
LS9 lemma P2_1einv_imp_req {
 const : t fun : t1_0 simple formulas : A1 , A2 final state : s 
premise True
 } ;
 } ;
 derivedreq pattern P2_1 ( const : t simple formulas : A1 formulas : A2 ) with P2_1_inv ; 
derivedreq pattern P2_1_part ( const : t simple formulas : A1 , A2 ) with P2_1_inv_part ;

 derivedeinv pattern P2_2_inv ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 formulas : A2_1 ) 
lemmas {
 LS8 lemma P2_2_inv_saving_gen { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 init state : s0 final state : s
 premise ( ( True AND True AND ( frm ( t = 0 ) OR alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) + 1 >= t ) OR A2_1 ( s , s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR frm ( t = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A2_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ; 
LS9 lemma P2_2einv_imp_req_gen { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 requirement formulas : A2 final state : s0 
premise True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) 
} ;
 } ;
 derivedeinv pattern P2_2_inv_part ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 )
 lemmas {
 LS8 lemma P2_2_inv_saving { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 init state : s0 final state : s 
premise ( ( frm ( t = 0 ) OR ( frm ( t1_0 ( s0 ) + 1 >= t ) OR A2 ( s ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR frm ( t = 0 ) OR frm ( t1_0 ( s ) = 0 ) AND A2 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) )
 } ; 
LS9 lemma P2_2einv_imp_req { const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 final state : s premise True 
} ;
 } ;
 derivedreq pattern P2_2 ( const : t simple formulas : A11 , A12 formulas : A2 ) with P2_2_inv ;
 derivedreq pattern P2_2_part ( const : t simple formulas : A11 , A12 , A2 ) with P2_2_inv_part ; 

derivedeinv pattern P3_1_inv ( fun : w_0 simple formulas : A1 formulas : A2_1 , A3_1 ) 
lemmas { 
LS8 lemma P3_1_inv_saving_gen { 
fun : w_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s
 premise ( True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( NOT frm ( w_0 ( s0 ) ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( NOT A1 ( s ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) )
 } ; 
LS9 lemma P3_1einv_imp_req_gen {
 fun : w_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) )
 } ;
 } ; 
derivedeinv pattern P3_1_inv_part ( fun : w_0 simple formulas : A1 , A2 , A3 ) 
lemmas { 
LS8 lemma P3_1_inv_saving { 
fun : w_0 simple formulas : A1 , A2 , A3 init state : s0 final state : s
 premise ( NOT frm ( w_0 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) AND ( NOT A1 ( s ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) 
} ; 
LS9 lemma P3_1einv_imp_req { fun : w_0 simple formulas : A1 , A2 , A3 final state : s 
premise True 
} ;
 } ; 
derivedreq pattern P3_1 ( simple formulas : A1 formulas : A2 , A3 ) with P3_1_inv ; 
derivedreq pattern P3_1_part ( simple formulas : A1 , A2 , A3 ) with P3_1_inv_part ; 

derivedeinv pattern P3_2_inv ( fun : b_0 , w_0 simple formulas : A11 , A12 formulas : A2_1 , A3_1 ) 
lemmas {
 LS8 lemma P3_2_inv_saving_gen { 
fun : b_0 , w_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( ( True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( NOT frm ( w_0 ( s0 ) ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ;
 LS9 lemma P3_2einv_imp_req_gen { 
fun : b_0 , w_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ;
 derivedeinv pattern P3_2_inv_part ( fun : b_0 , w_0 simple formulas : A11 , A12 , A2 , A3 ) 
lemmas { LS8 lemma P3_2_inv_saving { fun : b_0 , w_0 simple formulas : A11 , A12 , A2 , A3 init state : s0 final state : s
 premise ( ( NOT frm ( w_0 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) AND ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) )
 } ; 
LS9 lemma P3_2einv_imp_req { fun : b_0 , w_0 simple formulas : A11 , A12 , A2 , A3 final state : s premise True
 } ;
 } ; 
derivedreq pattern P3_2 ( simple formulas : A11 , A12 formulas : A2 , A3 ) with P3_2_inv ; 
derivedreq pattern P3_2_part ( simple formulas : A11 , A12 , A2 , A3 ) with P3_2_inv_part ;

 derivedeinv pattern P3_3_inv ( fun : b_0 , w_0 simple formulas : A1 formulas : A2_1 , A3_1 ) 
lemmas { 
LS8 lemma P3_3_inv_saving_gen { fun : b_0 , w_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( ( True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( NOT frm ( w_0 ( s0 ) ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A1 ( s ) ) 
} ;
 LS9 lemma P3_3einv_imp_req_gen { fun : b_0 , w_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ; 
derivedeinv pattern P3_3_inv_part ( fun : b_0 , w_0 simple formulas : A1 , A2 , A3 )
 lemmas {
 LS8 lemma P3_3_inv_saving { fun : b_0 , w_0 simple formulas : A1 , A2 , A3 init state : s0 final state : s 
premise ( ( NOT frm ( w_0 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) AND ( frm ( b_0 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) ) AND ( b_0 ( s ) --> NOT A1 ( s ) ) 
} ; 
LS9 lemma P3_3einv_imp_req { 
fun : b_0 , w_0 simple formulas : A1 , A2 , A3 final state : s 
premise True 
} ;
 } ; 
derivedreq pattern P3_3 ( simple formulas : A1 formulas : A2 , A3 ) with P3_3_inv ; 
derivedreq pattern P3_3_part ( simple formulas : A1 , A2 , A3 ) with P3_3_inv_part ; 

derivedeinv pattern P3_4_inv ( fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 formulas : A2_1 , A3_1 ) 
lemmas {
 LS8 lemma P3_4_inv_saving_gen {
 fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s
 premise ( ( ( ( True AND True ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( NOT frm ( w_0 ( s0 ) ) OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( frm ( b_1 ( s0 ) ) AND True AND True OR A3_1 ( s , s ) OR frm ( w_0 ( s ) ) AND A2_1 ( s , s ) ) ) AND ( b_1 ( s ) --> frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) )
 } ; 
LS9 lemma P3_4einv_imp_req_gen {
 fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise ( True AND True ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ; 
derivedeinv pattern P3_4_inv_part ( fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 , A2 , A3 ) 
lemmas { LS8 lemma P3_4_inv_saving {
 fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 , A2 , A3 init state : s0 final state : s 
premise ( ( ( NOT frm ( w_0 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) AND ( frm ( b_1 ( s0 ) ) OR A3 ( s ) OR frm ( w_0 ( s ) ) AND A2 ( s ) ) ) AND ( b_1 ( s ) --> frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) )
 } ;
 LS9 lemma P3_4einv_imp_req { 
fun : b_0 , b_1 , w_0 simple formulas : A11 , A12 , A2 , A3 final state : s 
premise True
 } ;
 } ; 
derivedreq pattern P3_4 ( simple formulas : A11 , A12 formulas : A2 , A3 ) with P3_4_inv ;
 derivedreq pattern P3_4_part ( simple formulas : A11 , A12 , A2 , A3 ) with P3_4_inv_part ; 

derivedeinv pattern P4_1_inv ( const : t fun : t1_0 simple formulas : A1 formulas : A2_1 , A3_1 )
 lemmas {
 LS8 lemma P4_1_inv_saving_gen { const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) < t ) AND ( A3_1 ( s , s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A2_1 ( s , s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( NOT A1 ( s ) OR A3_1 ( s , s ) OR frm ( t1_0 ( s ) = 0 ) AND A2_1 ( s , s ) )
 } ;
 LS9 lemma P4_1einv_imp_req_gen {
 const : t fun : t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ; 
derivedeinv pattern P4_1_inv_part ( const : t fun : t1_0 simple formulas : A1 , A2 , A3 )
 lemmas { LS8 lemma P4_1_inv_saving { const : t fun : t1_0 simple formulas : A1 , A2 , A3 init state : s0 final state : s 
premise ( frm ( t1_0 ( s0 ) < t ) AND ( A3 ( s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A2 ( s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( NOT A1 ( s ) OR A3 ( s ) OR frm ( t1_0 ( s ) = 0 ) AND A2 ( s ) ) 
} ; 
LS9 lemma P4_1einv_imp_req {
 const : t fun : t1_0 simple formulas : A1 , A2 , A3 final state : s 
premise True
 } ; 
} ;
 derivedreq pattern P4_1 ( const : t simple formulas : A1 formulas : A2 , A3 ) with P4_1_inv ; 
derivedreq pattern P4_1_part ( const : t simple formulas : A1 , A2 , A3 ) with P4_1_inv_part ; 

derivedeinv pattern P4_2_inv ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 formulas : A2_1 , A3_1 ) 
lemmas {
 LS8 lemma P4_2_inv_saving_gen {
 const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 init state : s0 final state : s 
premise ( ( True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) < t ) AND ( A3_1 ( s , s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A2_1 ( s , s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A3_1 ( s , s ) OR frm ( t1_0 ( s ) = 0 ) AND A2_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) )
 } ;
 LS9 lemma P4_2einv_imp_req_gen { 
const : t fun : b_0 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A2_1 , A3_1 requirement formulas : A2 , A3 final state : s0 
premise True AND True AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ; 
derivedeinv pattern P4_2_inv_part ( const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 ) 
lemmas { LS8 lemma P4_2_inv_saving {
 const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 init state : s0 final state : s 
premise ( ( frm ( t1_0 ( s0 ) < t ) AND ( A3 ( s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A2 ( s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR A3 ( s ) OR frm ( t1_0 ( s ) = 0 ) AND A2 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) 
} ;
 LS9 lemma P4_2einv_imp_req { const : t fun : b_0 , t1_0 simple formulas : A11 , A12 , A2 , A3 final state : s 
premise True
 } ;
 } ; 
derivedreq pattern P4_2 ( const : t simple formulas : A11 , A12 formulas : A2 , A3 ) with P4_2_inv ; 
derivedreq pattern P4_2_part ( const : t simple formulas : A11 , A12 , A2 , A3 ) with P4_2_inv_part ;

 derivedeinv pattern P4_3_inv ( const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 formulas : A21_1 , A22_1 , A3_1 ) 
lemmas {
 LS8 lemma P4_3_inv_saving_gen {
 const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A21_1 , A22_1 , A3_1 init state : s0 final state : s
 premise ( ( ( True AND True AND ( alwaysimp ( s0 , A21_1 ( s0 ) , A21_1 ( s ) ) AND alwaysimp ( s0 , lambda r3 . A22_1 ( s0 , r3 ) , lambda r3 . A22_1 ( s , r3 ) ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) < t ) AND ( A3_1 ( s , s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND ( frm ( b_1 ( s0 ) ) AND alwaysimp ( s0 , A21_1 ( s0 ) , A21_1 ( s ) ) ) AND A22_1 ( s , s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND ( frm ( b_0 ( s0 ) ) AND True OR NOT A12 ( s ) OR A3_1 ( s , s ) OR frm ( t1_0 ( s ) = 0 ) AND ( frm ( b_1 ( s0 ) ) AND alwaysimp ( s0 , A21_1 ( s0 ) , A21_1 ( s ) ) ) AND A22_1 ( s , s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) ) AND ( b_1 ( s ) --> A21_1 ( s , s ) )
 } ;
 LS9 lemma P4_3einv_imp_req_gen { 
const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 extra invariant formulas : A21_1 , A22_1 , A3_1 requirement formulas : A21 , A22 , A3 final state : s0 
premise True AND True AND ( alwaysimp ( s0 , A21_1 ( s0 ) , A21 ( s0 ) ) AND alwaysimp ( s0 , lambda r3 . A22_1 ( s0 , r3 ) , lambda r3 . A22 ( s0 , r3 ) ) ) AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) 
} ;
 } ; 
derivedeinv pattern P4_3_inv_part ( const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 , A21 , A22 , A3 )
 lemmas {
 LS8 lemma P4_3_inv_saving {
 const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 , A21 , A22 , A3 init state : s0 final state : s 
premise ( ( ( frm ( t1_0 ( s0 ) < t ) AND ( A3 ( s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND frm ( b_1 ( s0 ) ) AND A22 ( s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( frm ( b_0 ( s0 ) ) OR NOT A12 ( s ) OR A3 ( s ) OR frm ( t1_0 ( s ) = 0 ) AND frm ( b_1 ( s0 ) ) AND A22 ( s ) ) ) AND ( b_0 ( s ) --> NOT A11 ( s ) ) ) AND ( b_1 ( s ) --> A21 ( s ) ) 
} ; 
LS9 lemma P4_3einv_imp_req { 
const : t fun : b_0 , b_1 , t1_0 simple formulas : A11 , A12 , A21 , A22 , A3 final state : s 
premise True 
} ;
 } ; 
derivedreq pattern P4_3 ( const : t simple formulas : A11 , A12 formulas : A21 , A22 , A3 ) with P4_3_inv ; 
derivedreq pattern P4_3_part ( const : t simple formulas : A11 , A12 , A21 , A22 , A3 ) with P4_3_inv_part ;

