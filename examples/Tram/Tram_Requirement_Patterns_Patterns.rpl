import "../Basic_Patterns.rpl" ; import "../Derived_Patterns.rpl" ; derivedeinv pattern R5_pattern_inv ( const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 formulas : A3_1 , A4_1 ) lemmas { LS8 lemma R5_pattern_inv_saving_gen { const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 , A4_1 init state : s0 final state : s premise ( ( ( ( ( True AND True ) AND True AND ( ( True AND alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND alwaysimp ( s0 , A4_1 ( s0 ) , A4_1 ( s ) ) AND ( frm ( t1_0 ( s0 ) < t ) AND ( A4_1 ( s , s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A3_1 ( s , s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) ) AND True AND True ) AND ( NOT frm ( w_0_0_0 ( s0 ) ) OR ( A2 ( s ) AND ( A4_1 ( s , s ) OR frm ( t1_0 ( s ) = 0 ) AND A3_1 ( s , s ) ) OR ( frm ( b_0_0 ( s0 ) ) AND True ) AND False ) OR frm ( w_0_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( frm ( b_1_0_0 ( s0 ) ) AND True AND True OR ( A2 ( s ) AND ( A4_1 ( s , s ) OR frm ( t1_0 ( s ) = 0 ) AND A3_1 ( s , s ) ) OR ( frm ( b_0_0 ( s0 ) ) AND True ) AND False ) OR frm ( w_0_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( b_1_0_0 ( s ) --> frm ( b_0_0_0 ( s0 ) ) AND True OR NOT A12 ( s ) ) ) AND ( b_0_0_0 ( s ) --> NOT A11 ( s ) ) ) AND ( b_0_0 ( s ) --> True ) } ; LS9 lemma R5_patterneinv_imp_req_gen { const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 extra invariant formulas : A3_1 , A4_1 requirement formulas : A3 , A4 final state : s0 premise ( True AND True ) AND True AND ( True AND alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) AND alwaysimp ( s0 , A4_1 ( s0 ) , A4 ( s0 ) ) ) AND True AND True } ; } ; derivedeinv pattern R5_pattern_inv_part ( const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 ) lemmas { LS8 lemma R5_pattern_inv_saving { const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 init state : s0 final state : s premise ( ( ( ( ( frm ( t1_0 ( s0 ) < t ) AND ( A4 ( s ) AND frm ( t1_0 ( s ) <= t + 1 ) OR frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A3 ( s ) ) OR frm ( t1_0 ( s0 ) >= t AND t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) ) AND ( NOT frm ( w_0_0_0 ( s0 ) ) OR ( A2 ( s ) AND ( A4 ( s ) OR frm ( t1_0 ( s ) = 0 ) AND A3 ( s ) ) OR frm ( b_0_0 ( s0 ) ) AND False ) OR frm ( w_0_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( frm ( b_1_0_0 ( s0 ) ) OR ( A2 ( s ) AND ( A4 ( s ) OR frm ( t1_0 ( s ) = 0 ) AND A3 ( s ) ) OR frm ( b_0_0 ( s0 ) ) AND False ) OR frm ( w_0_0_0 ( s ) ) AND NOT A2 ( s ) ) ) AND ( b_1_0_0 ( s ) --> frm ( b_0_0_0 ( s0 ) ) OR NOT A12 ( s ) ) ) AND ( b_0_0_0 ( s ) --> NOT A11 ( s ) ) ) AND ( b_0_0 ( s ) --> True ) } ; LS9 lemma R5_patterneinv_imp_req { const : t fun : t1_0 , b_0_0 , b_0_0_0 , b_1_0_0 , w_0_0_0 simple formulas : A11 , A12 , A2 , A3 , A4 final state : s premise True } ; } ; derivedreq pattern R5_pattern ( const : t simple formulas : A11 , A12 , A2 formulas : A3 , A4 ) with R5_pattern_inv ; derivedreq pattern R5_pattern_part ( const : t simple formulas : A11 , A12 , A2 , A3 , A4 ) with R5_pattern_inv_part ; derivedeinv pattern R6_pattern_inv ( fun : b_0 , t1_0 simple formulas : A1 formulas : A2_1 , A3_1 , A4_1 ) lemmas { LS8 lemma R6_pattern_inv_saving_gen { fun : b_0 , t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 , A4_1 init state : s0 final state : s premise ( ( True AND ( alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) ) AND alwaysimp ( s0 , lambda r1 . A4_1 ( s0 , r1 ) , lambda r1 . A4_1 ( s , r1 ) ) ) AND ( NOT A1 ( s ) OR ( frm ( 0 = 0 ) AND A2_1 ( s , s ) OR alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND frm ( b_0 ( s0 ) ) AND frm ( 0 <= t1_0 ( s0 ) + 1 ) AND A3_1 ( s , s ) ) OR A4_1 ( s , s ) ) ) AND ( b_0 ( s ) --> frm ( t1_0 ( s ) = 0 ) AND A2_1 ( s , s ) OR alwaysimp ( s0 , A3_1 ( s0 ) , A3_1 ( s ) ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2_1 ( s ) ) AND frm ( b_0 ( s0 ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A3_1 ( s , s ) ) } ; LS9 lemma R6_patterneinv_imp_req_gen { fun : b_0 , t1_0 simple formulas : A1 extra invariant formulas : A2_1 , A3_1 , A4_1 requirement formulas : A2 , A3 , A4 final state : s0 premise True AND ( alwaysimp ( s0 , A3_1 ( s0 ) , A3 ( s0 ) ) AND alwaysimp ( s0 , A2_1 ( s0 ) , A2 ( s0 ) ) ) AND alwaysimp ( s0 , lambda r1 . A4_1 ( s0 , r1 ) , lambda r1 . A4 ( s0 , r1 ) ) } ; } ; derivedeinv pattern R6_pattern_inv_part ( fun : b_0 , t1_0 simple formulas : A1 , A2 , A3 , A4 ) lemmas { LS8 lemma R6_pattern_inv_saving { fun : b_0 , t1_0 simple formulas : A1 , A2 , A3 , A4 init state : s0 final state : s premise ( NOT A1 ( s ) OR ( frm ( 0 = 0 ) AND A2 ( s ) OR frm ( b_0 ( s0 ) ) AND frm ( 0 <= t1_0 ( s0 ) + 1 ) AND A3 ( s ) ) OR A4 ( s ) ) AND ( b_0 ( s ) --> frm ( t1_0 ( s ) = 0 ) AND A2 ( s ) OR frm ( b_0 ( s0 ) ) AND frm ( t1_0 ( s ) <= t1_0 ( s0 ) + 1 ) AND A3 ( s ) ) } ; LS9 lemma R6_patterneinv_imp_req { fun : b_0 , t1_0 simple formulas : A1 , A2 , A3 , A4 final state : s premise True } ; } ; derivedreq pattern R6_pattern ( simple formulas : A1 formulas : A2 , A3 , A4 ) with R6_pattern_inv ; derivedreq pattern R6_pattern_part ( simple formulas : A1 , A2 , A3 , A4 ) with R6_pattern_inv_part ;